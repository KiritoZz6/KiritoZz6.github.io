<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🌸樱花酒吧🍻</title>
  
  <subtitle>🌸Sakura-Pub🍻</subtitle>
  <link href="http://sakura-pub.top/atom.xml" rel="self"/>
  
  <link href="http://sakura-pub.top/"/>
  <updated>2022-09-07T14:15:36.537Z</updated>
  <id>http://sakura-pub.top/</id>
  
  <author>
    <name>Sakura.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SakuraServer项目</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/SakuraServer%E9%A1%B9%E7%9B%AE/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/SakuraServer%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-09-07T14:09:31.000Z</published>
    <updated>2022-09-07T14:15:36.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sakura-WebServer"><a href="#Sakura-WebServer" class="headerlink" title="Sakura WebServer"></a>Sakura WebServer</h1><p>有个网站知识点挺多的：<a href="https://balloonwj.github.io/cpp-guide-web/">https://balloonwj.github.io/cpp-guide-web/</a></p><h2 id="别人的项目"><a href="#别人的项目" class="headerlink" title="别人的项目"></a>别人的项目</h2><p>找到一个别人自己开发的框架，用的人还少，但是很复杂秋招看肯定来不及了↓</p><p><a href="https://github.com/tomatowithpotato/HAHA-WebServer">https://github.com/tomatowithpotato/HAHA-WebServer</a></p><p>所以又有个稍微简单点的，和我的差不多，而且还有upload功能</p><p><a href="https://github.com/Sakura1221/SimpleWebServer/tree/upload">https://github.com/Sakura1221/SimpleWebServer/tree/upload</a></p><h2 id="网上找到别人提前批给问到的问题"><a href="#网上找到别人提前批给问到的问题" class="headerlink" title="网上找到别人提前批给问到的问题"></a>网上找到别人提前批给问到的问题</h2><p><img src="E:\Snipaste截图保存\Snipaste_2022-08-10_14-46-37.png" alt="Snipaste_2022-08-10_14-46-37"></p><h2 id="牛客有人京东面经也问到了WebServer"><a href="#牛客有人京东面经也问到了WebServer" class="headerlink" title="牛客有人京东面经也问到了WebServer"></a>牛客有人京东面经也问到了WebServer</h2><p><a href="https://www.nowcoder.com/discuss/723200?type=all&amp;order=time&amp;pos=&amp;page=1&amp;ncTraceId=&amp;channel=-1&amp;source_id=search_all_nctrack">https://www.nowcoder.com/discuss/723200?type=all&amp;order=time&amp;pos=&amp;page=1&amp;ncTraceId=&amp;channel=-1&amp;source_id=search_all_nctrack</a></p><p>这里就来分析下GitHub上找到的更好的WebServer，它支持日志异步队列，线程池，连接与监听socket都可以选择LT和ET，数据库连接池等组件，功能上支持web文件上传下载、账号登录注册等。</p><p>另外也支持keep-alive检测以及定时器断开连接处理，效果见下面的图</p><p><img src="D:\编程\面试项目相关\备忘录图片\Snipaste_2022-08-13_10-19-37.png" alt="Snipaste_2022-08-13_10-19-37"></p><p><img src="D:\编程\面试项目相关\备忘录图片\Snipaste_2022-08-13_10-31-15.png" alt="Snipaste_2022-08-13_10-31-15"></p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器节点是自定义的结构体</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//定时器结点</span><span class="token keyword">struct</span> <span class="token class-name">TimerNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//连接套接字描述符</span>    TimeStamp expires<span class="token punctuation">;</span> <span class="token comment">//到期时间</span>    TimeoutCallBack cb<span class="token punctuation">;</span> <span class="token comment">//回调函数</span>    <span class="token comment">//重载&lt;，到期时间近的排在前面</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> TimerNode<span class="token operator">&amp;</span> t<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> expires <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>expires<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定时器容器是用vector模拟出来的小根堆，顶上元素是最小值，它内部提供的操作定时器节点位置函数有</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**如果用0号作为根结点，那么结点x的左结点是 2x+1，右结点是2x+2那么结点x的父结点就是 (x-1)/2swap操作：交换两个结点，同时更新哈希表内每个定时器的下标down操作：比左或右结点大，与左右结点的最小值交换up操作：比父结点小，与父结点交换我们的需求有以下几个：增加定时器：查哈希表，如果是新定时器，插在最后，再up，如果不是新定时器，就需要调整定时器调整定时器：更新定时后，再执行down和up（实际上只会执行一个）删除定时器：与最后一个元素交换，删除末尾元素，然后再down和up（删除任意位置结点，同样也只会执行一个）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定时器容器中会监听容器中是否有定时器到时，到时则触发epoll_wait并且不阻塞立即返回（因为知道有事件要处理），否则如果没有到时则等待时长是下一次超时时间，如果队列为空的话则一直阻塞epoll_wait()</p><p>初始化服务器时默认传的是60秒进行一次定时器事件，而该定时器事件是为了防止一个连接一直连太久但是又不发生事件处理这种情况，有了定时器后就可以限制一个连接最多占用服务器60秒而不请求事件，过了60秒就会将其断开连接（关闭fd、断开文件映射mmap）</p><h3 id="问题：为什么要用数组模拟堆呢？"><a href="#问题：为什么要用数组模拟堆呢？" class="headerlink" title="问题：为什么要用数组模拟堆呢？"></a>问题：为什么要用数组模拟堆呢？</h3><h2 id="自定义缓冲区Buffer"><a href="#自定义缓冲区Buffer" class="headerlink" title="自定义缓冲区Buffer"></a>自定义缓冲区Buffer</h2><p>是一个底层为vector&lt;char*&gt;的类，在读数据时候，用到了IO向量iovec iov[2];，其中iov[0]是Buffer类里面的vector，默认大小是1024字节的，一旦读一次数据超过了1024则会用到iov[1]的char newbuffer[65536];它是在处理读操作函数中定义的临时变量，在读完后则会将这个newbuffer内容添加到vector当中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ssize_t <span class="token class-name">Buffer</span><span class="token operator">::</span><span class="token function">readfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> saveErrno<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> newbuffer<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> size_t writable <span class="token operator">=</span> <span class="token function">writableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> <span class="token function">beginPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> writePos<span class="token punctuation">;</span>    iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> writable<span class="token punctuation">;</span>    iov<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> newbuffer<span class="token punctuation">;</span>    iov<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>newbuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> ssize_t len <span class="token operator">=</span> <span class="token function">readv</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>saveErrno <span class="token operator">=</span> errno<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>size_t<span class="token operator">></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> writable<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        writePos <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//buffer is full, append newbuffer</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        writePos <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">append</span><span class="token punctuation">(</span>newbuffer<span class="token punctuation">,</span> len <span class="token operator">-</span> writable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，在读时候是个循环，还会判断是否为LT模式，如果是则会一直进入读函数操作，直到读不出数据<code>len&lt;=0</code>为止</p><h1 id="当判断fd读事件之后的流程"><a href="#当判断fd读事件之后的流程" class="headerlink" title="当判断fd读事件之后的流程"></a>当判断fd读事件之后的流程</h1><p>epoll_wait判断到有读事件，主线程会直接将该连接对象丢到线程池让线程池线程处理</p><p>进入线程池后，会先进行读操作，将数据读入自定义的Buffer类对象中，这个对象也是在连接对象中有定义的，有分为读缓冲区<code>readBuffer</code>和写缓冲区<code>writeBuffer</code>，这里的读是读到读缓冲区当中</p><p>不管是LT读还是ET读，运行完读函数之后又会进入到一个处理函数<code>process()</code>中进行解析并判断请求报文是否完整，不完整返回false并注册EPOLLIN事件让线程继续读，如果报文完整则在写缓存写入响应报文</p><p>解析报文时会分部分读取，请求行再到请求头部最后是请求体，请求行和请求头部会逐行分析，以回车符换行符<code>\r\n</code>作为一行结束的条件，逐行解析用到的函数为<code>std::search()</code><strong>这个可以研究一下</strong></p><p>得到<strong>请求行</strong>会通过正则表达式分析出method、path、version，即请求方法、请求资源、HTTP版本号</p><p>解析<strong>请求头部</strong>则是分析如<code>Connection</code>、<code>keep-alive</code>、<code>Content-Length</code>，其中Content-Length可以得知body的长度，另外这里解析头部有个代码不知道什么意思</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">smatch subMatch<span class="token punctuation">;</span><span class="token comment">//...</span>header<span class="token punctuation">[</span>subMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> subMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到了<strong>请求体</strong>，只会进行POST请求的判断，如果<code>Content-Type</code>是<code>application/x-www-form-urlencoded</code>则会进行解析数据，<strong>这里不懂也可以研究</strong>，涉及转码问题，然后进行登录注册这些操作；如果是<code>multipart/form-data</code>则为上传文件</p><p>到此解析请求报文结束</p><p>然后如果请求报文完整则进行响应报文的写操作为发送响应报文做准备（其实就算不完整也会写响应报文，只是会再次接受数据再分析响应报文）</p><p>在写之前会判断浏览器请求的文件是否存在、路径是否正确，这里是通过<code>stat()</code>获取文件文件属性，然后通过两个宏<code>S_ISDIR()</code>，<code>S_IROTH()</code>来判断状态码，错误的话分为404和403（S_IROTH判断文件是否有“其他读”权限，如果浏览器无权限读则返回403）</p><p>搞完上面的东西后，就是按步骤添加状态行、响应头部、响应正文，添加响应正文时会将请求的文件用<code>mmap()</code>映射到内存，提高读写速度，并且附加属性使其映射区可读以及写入时可复制</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//将文件映射到内存提高文件的访问速度</span><span class="token comment">//PROT_READ：映射区可读</span><span class="token comment">//MAP_PRIVATE：写入时复制</span><span class="token keyword">int</span><span class="token operator">*</span> mmRet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mmFileStat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> srcfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加完响应正文内容并且请求报文是完整的则进行发送操作，使用一次<code>writev()</code>发送iov[2]向量（这个写io向量和读的不同，他是在连接类对象中的）后，会进行判断是否发送完毕，如果没有发送完进入第二个判断：响应头部是否发送完毕，接着再继续接下来的内容发送。以上的writev和两重判断都是在一个do…while()循环里面进行的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 写方法,响应头和响应体分开传输 */</span>ssize_t <span class="token class-name">HttpConnect</span><span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> saveErrno<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//最后一次写入的长度</span>    ssize_t len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        len <span class="token operator">=</span> <span class="token function">writev</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token operator">*</span>saveErrno <span class="token operator">=</span> errno<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//缓存为空，传输完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">+</span> iov<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">//响应头已经传输完成</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>len <span class="token operator">></span> iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//更新响应体传输起点和长度</span>            iov<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iov<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">+</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span><span class="token punctuation">;</span>            iov<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">-=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//响应头不再需要传输</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//响应头保存在写缓存中，全部回收即可</span>                iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                writeBuffer<span class="token punctuation">.</span><span class="token function">retrieveAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//响应头还没传输完成</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//更新响应头传输起点和长度</span>            iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">+</span> len<span class="token punctuation">;</span>            iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">-=</span> len<span class="token punctuation">;</span>            writeBuffer<span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>isET <span class="token operator">||</span> <span class="token function">toWriteBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10240</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一次最多传输10MB数据</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，一次完整的浏览器请求事件完成</p><h1 id="如果在读数据读到一半发现读的不是HTTP怎么办"><a href="#如果在读数据读到一半发现读的不是HTTP怎么办" class="headerlink" title="如果在读数据读到一半发现读的不是HTTP怎么办"></a>如果在读数据读到一半发现读的不是HTTP怎么办</h1><p>可以参考这篇文章：<a href="https://www.yht7.com/news/186483">https://www.yht7.com/news/186483</a></p><p>HTTP是有协议的，一开始读取请求行的时候就可以通过格式判断，请求行中最后面有HTTP的版本号，如果我们在请求行中检测到格式不是HTTP协议的则可以立马返回BAD_REQUEST，表示格式错误</p><p>如果是读到半路发现HTTP格式不规范（比如多了个空格导致解析时切分不合理）的话，也应该返回400（格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），出现这种不规范原因可能是前端提交的数据字段名称或类型与后台的实体类不一致，导致无法封装</p><p>我在代码中也有一个地方处理了类似的问题，因为项目中除了消息体之外，请求行和请求头都是逐行来读取然后解析的，如果解析到格式错误（正则表达式匹配不到）则会返回BAD_REQUEST状态然后由IO线程注册写任务，让写工作线程写400错误响应报文</p><p>下面是一个正常的HTTP的GET请求格式</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">GET https://www.baidu.com/content-search.xml HTTP/1.1Host: www.baidu.comConnection: keep-aliveSec-Fetch-Site: same-originSec-Fetch-Mode: no-corsUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9Cookie:xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="如果一次HTTP解析器从Socket中读到的数据可能并不是直接对应一个HTTP-Message怎么办（所谓的“粘包”←当然这说法是错误的）"><a href="#如果一次HTTP解析器从Socket中读到的数据可能并不是直接对应一个HTTP-Message怎么办（所谓的“粘包”←当然这说法是错误的）" class="headerlink" title="如果一次HTTP解析器从Socket中读到的数据可能并不是直接对应一个HTTP Message怎么办（所谓的“粘包”←当然这说法是错误的）"></a>如果一次HTTP解析器从Socket中读到的数据可能并不是直接对应一个HTTP Message怎么办（所谓的“粘包”←当然这说法是错误的）</h1><p>题目大概意思就是说：一个缓冲区里的两个HTTP报文</p><p>知乎有个回答非常好：<a href="https://www.zhihu.com/question/24598268/answer/2293520538">https://www.zhihu.com/question/24598268/answer/2293520538</a></p><p>首先HTTP协议是应用层的，而TCP是传输层的。TCP是面向流传输的，没有包的概念，要在这个基础上实现HTTP传输协议则需要一个缓冲区和定时器。那么当数据从socket读出来时候，所有数据放在缓冲区，这时候就要开始应用层分包了，这个问题通过HTTP协议规定好的规则来进行数据划分，比如HTTP协议的Headers以“\r\n”作为字段的分隔符；当然也可以是在每条消息的头部加一个文件长度字段进行划分</p><p>总之我们要明白，HTTP协议是不存在所谓“粘包”问题，因为它已经定义好了怎么划分每个已经到达缓冲区的数据包</p><h1 id="项目有哪些组件"><a href="#项目有哪些组件" class="headerlink" title="项目有哪些组件"></a>项目有哪些组件</h1><p>总的来说：同步模块（互斥锁、信号量、条件变量）、封装的epoll模块、线程池、连接池、可自动扩容的buff类、定时器以及HTTP的连接、请求与响应模块</p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><h2 id="这里有个经典的问题：为什么不用读写锁而用互斥锁？"><a href="#这里有个经典的问题：为什么不用读写锁而用互斥锁？" class="headerlink" title="这里有个经典的问题：为什么不用读写锁而用互斥锁？"></a>这里有个经典的问题：为什么不用读写锁而用互斥锁？</h2><p>首先，我们可能会误认为读写锁肯定会比互斥锁效率高，其实并没有多高效，读锁还要维护一个reader的数目，如果临界区很小，锁竞争不激烈的话，往往互斥锁会更高效一些；</p><p>其次如果我们用了读写锁，还要维护读与写之间的关系，比如在一个函数中是用的读锁来保护的，但是可能在维护阶段我们会对它进行修改数据，这时候和无保护结果是一致的；</p><p>还有一种情况就是，如果一直有读线程获取读锁，这样会导致写线程无法获取写锁，导致写线程饿死</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池是在服务器启动时创建的，在Reactor模式中，IO线程作为一个主线程，线程池中的线程是负责业务处理的工作线程，工作线程内部是一个循环，当没有事件需要处理时会因为条件变量阻塞而进行等待。当epoll_wait监听到事件时会将该事件的连接对象<code>httpconnect</code>放入线程池<code>que</code>队列当中，然后唤醒条件变量，让工作线程处理事件</p><h2 id="Http连接对象"><a href="#Http连接对象" class="headerlink" title="Http连接对象"></a>Http连接对象</h2><p>我在项目中建立了一个类<code>httpconnect</code>来存储连接对象的信息，比如它们的文件描述符、socketaddr信息、有两个可自动扩容Buffer对象（这两个buffer是缓冲区，用来存储从连接对象的文件描述符中readv读到的数据以及即将要write写入的数据）、另外还有两个<code>httprequest</code>请求类对象和<code>httpresponse</code>响应类对象（这两个类对象是用来分步骤解析http报文和制作响应报文的）</p><p>在解析http报文的时候用的是有限状态机机制，根据当前所解析到的状态来寻找下一步怎么做，比如说刚开始的时候状态是REQUEST_LINE，代表着要进行请求行的解析，如果解析完没有出现格式错误等问题的话会将状态更新成HEADERS，代表下一步进行解析请求头部</p><p>而制作响应报文方法我进行了优化，使用一个哈希表来存放不同的生成报文函数的回调函数，在制作响应报文时根据http请求方法来调用不同的生成函数，这种设计是考虑到为以后添加新的解析请求而做的，因为目前服务器只支持解析GET、POST、HEAD三个类型的请求</p><h2 id="可自动扩容Buffer"><a href="#可自动扩容Buffer" class="headerlink" title="可自动扩容Buffer"></a>可自动扩容Buffer</h2><p>每个连接对象都有两个Buffer，一个读buffer和一个写buffer</p><p>该buffer是参考muduo网络库那本书的思想设计的，底层是用了<code>vector&lt;char&gt;</code>数组，初始化的时候可以自定义数组的大小，其中会额外预留一个8字节的空间放在缓冲区最前面，这个预留空间可以用来在收到数据时计算数据包的大小并且存放在这个8字节的空间里，当然，这个空间是可以修改的</p><p>然后这个buffer封装了读fd和写fd的两个方法，可以自动化帮我们完成从文件描述符中的读写操作。在读的时候，会额外在栈中，也就是局部变量声明一个newbuffer，这个newbuffer是后备缓冲区，如果这次读操作超过了我们本身的缓冲区大小，就会把剩下的数据读到newbuffer里面，这里用到的是io向量读。当读取完毕后，会将newbuffer读到的数据增添在原本的buffer里面（这时候就会将buffer扩容）。</p><p><strong>？如果读完newbuffer也不够怎么办呢？</strong></p><p>如果这次数据读满了这个newbuffer也没读完则会等下一次epoll事件上报，继续读取数据不会丢失</p><p>写的话就很简单了，直接把buffer里面的数据往fd里调用write函数就是了</p><h1 id="下载上传功能是怎么实现的？"><a href="#下载上传功能是怎么实现的？" class="headerlink" title="下载上传功能是怎么实现的？"></a>下载上传功能是怎么实现的？</h1><p>下载功能的话，项目中有一个json列表，用来记录用户上传过的文件，下载页面则是根据这个json列表来展示出可下载文件列表</p><p>上传功能的话，是在解析http报文时在请求头检测到<code>Content-Type</code>为指定类型（<code>multipart/form-data</code>）时调用上传文件的对应方法，该方法首先是从报文中获取文件的相关信息（比如文件的大小），这些信息已经是在报文中的了，之后再从POST请求报文所附带的内容拷贝到服务器当中，这样就完成了上传功能</p><p><a href="https://www.jianshu.com/p/53b5bd0f1d44">Post请求的两种编码格式：application/x-www-form-urlencoded和multipart/form-data</a></p><h1 id="HTTP协议再熟悉"><a href="#HTTP协议再熟悉" class="headerlink" title="HTTP协议再熟悉"></a>HTTP协议再熟悉</h1><p><a href="https://www.jianshu.com/p/facefd3969d4">概括HTTP知识点挺全的文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sakura-WebServer&quot;&gt;&lt;a href=&quot;#Sakura-WebServer&quot; class=&quot;headerlink&quot; title=&quot;Sakura WebServer&quot;&gt;&lt;/a&gt;Sakura WebServer&lt;/h1&gt;&lt;p&gt;有个网站知识点挺多的：&lt;a </summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="WebServer" scheme="http://sakura-pub.top/tags/WebServer/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>C++集群聊天服务器（细节问题篇）</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++-%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E7%BB%86%E8%8A%82%E9%97%AE%E9%A2%98%E7%AF%87%EF%BC%89/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++-%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E7%BB%86%E8%8A%82%E9%97%AE%E9%A2%98%E7%AF%87%EF%BC%89/</id>
    <published>2022-09-02T02:41:04.000Z</published>
    <updated>2022-09-07T14:10:32.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么客户端不采用P2P的方式通信，而是采用服务器转发消息的方式？"><a href="#为什么客户端不采用P2P的方式通信，而是采用服务器转发消息的方式？" class="headerlink" title="为什么客户端不采用P2P的方式通信，而是采用服务器转发消息的方式？"></a>为什么客户端不采用P2P的方式通信，而是采用服务器转发消息的方式？</h1><p>这里P2P指的是客户端直接将消息转发给客户端，不经过服务器转发。可以肯定的是，P2P方式不符合现代IM（即时通信）系统的通信方式，以下有两个方面可以反驳P2P</p><ol><li>如果消息不经过服务器，那么服务器会失去监管客户端的权力（如果消息违反法律怎么办？）</li><li>P2P模式下群组聊天功能很吃效率，比如在千人群中总不能客户端自己一个人转发一千多次吧</li></ol><h1 id="怎么保证消息按顺序显示（两个方案，一个可行一个不可行）"><a href="#怎么保证消息按顺序显示（两个方案，一个可行一个不可行）" class="headerlink" title="怎么保证消息按顺序显示（两个方案，一个可行一个不可行）"></a>怎么保证消息按顺序显示（两个方案，一个可行一个不可行）</h1><p>这里有篇文章写得很好<a href="https://www.cnblogs.com/imteck4713/p/13925791.html">零基础IM开发入门(四)：什么是IM系统的消息时序一致性？</a></p><h2 id="首先考虑添加时间戳的方案（不可行）"><a href="#首先考虑添加时间戳的方案（不可行）" class="headerlink" title="首先考虑添加时间戳的方案（不可行）"></a>首先考虑添加时间戳的方案（不可行）</h2><p>假设有两个客户端甲和乙，然后甲向乙发送两个消息</p><p>​    你好吗？（23:10:01）</p><p>​    你有什么打算（23:10:05）</p><p>这会导致一个问题↓</p><h3 id="谁先到达服务端？"><a href="#谁先到达服务端？" class="headerlink" title="谁先到达服务端？"></a>谁先到达服务端？</h3><p>第一条消息<strong>不一定</strong>是早到达服务端的，因为有可能选择的路由节点是比较拥堵，停留时间比较长，而第二条消息的路由节点则比较通畅。这种情况下就会导致第二条消息比第一条消息早到达服务端</p><p>同样的，将消息从服务端传到客户端也会导致类似的乱序到达问题</p><h3 id="客户端还要进行排序"><a href="#客户端还要进行排序" class="headerlink" title="客户端还要进行排序"></a>客户端还要进行排序</h3><p>消息到达客户端后，因为是乱序的所以可能会想到按时间段来排序来解决这个问题，比如说在05秒这一秒内的消息按序排好再输出</p><p>可另外一个问题又来了，第一条消息是01秒的，不在排序的时间段中，时间段外的消息还是没得排好序，所以这个时间戳方案是<strong>不可行</strong>的</p><p>而且，因为服务器是集群的，<strong>在不同服务器下时钟可能是不一样的</strong>，这个也是一个需要考虑的问题</p><h2 id="另一个方案——维护一个seq标志位（可行）"><a href="#另一个方案——维护一个seq标志位（可行）" class="headerlink" title="另一个方案——维护一个seq标志位（可行）"></a>另一个方案——维护一个seq标志位（可行）</h2><p>在每个客户端中要维护一个标志位seq（注意要用<strong>原子量</strong>，可以设置成unsigned int），并且这个seq是对每个目标用户都是独立的，比如在A用户中，它与B用户和与C用户聊天都是独立的seq，并不是一个全局的变量，群组聊天也不例外。</p><p>初始化时seq为0，代表下一个需要接收的消息标志号为0，当接收到指定的消息后seq++变成了1，以此类推</p><h3 id="发送消息又怎么编写发送的seq号呢？"><a href="#发送消息又怎么编写发送的seq号呢？" class="headerlink" title="发送消息又怎么编写发送的seq号呢？"></a>发送消息又怎么编写发送的seq号呢？</h3><p>这时候又来了个问题，假如A要发送一个消息，那么它怎么知道对方接收的seq序号是要多少呢？</p><p>其实很容易解决，让这个seq是用作与双方用户的就好了，刚开始双方seq都是0，当A向B发送一个消息时，seq++变成了1，这个1代表着A的seq，也代表着B的seq，此时不管是A还是B发送消息，都是以1来作为seq发送就好了</p><h3 id="确定收到消息后才seq-（消息的传输的可靠性）"><a href="#确定收到消息后才seq-（消息的传输的可靠性）" class="headerlink" title="确定收到消息后才seq++（消息的传输的可靠性）"></a>确定收到消息后才seq++（消息的传输的可靠性）</h3><p>因为seq是用作于双方用户，所以要确保发送消息对方接收了才seq++，这里又是一个难点，因为你<strong>要保证消息传输的可靠性</strong>，这个话题到时候再开一个讨论</p><h3 id="群聊的seq又得怎么样呢？（不要求消息顺序到达服务器，但要求顺序显示在每个客户端）"><a href="#群聊的seq又得怎么样呢？（不要求消息顺序到达服务器，但要求顺序显示在每个客户端）" class="headerlink" title="群聊的seq又得怎么样呢？（不要求消息顺序到达服务器，但要求顺序显示在每个客户端）"></a>群聊的seq又得怎么样呢？（不要求消息顺序到达服务器，但要求顺序显示在每个客户端）</h3><p>首先，群聊的时候不能像点对点聊天那样每个客户端都保存一个独立的seq，因为发送方不一样，而且可能每时每刻都有人发送消息，很难保证每个客户端的seq一致，再加上<strong>群聊可以在小范围内出现消息顺序不一致到达服务器</strong>，所以在群组聊天中<strong>客户端发送消息到服务器的过程</strong>就不用带seq了</p><p>这里，我们要求<strong>每个客户端的群组消息显示顺序是一致的</strong>，于是这里可以等消息到了服务器才从底层（可以是数据库）中拿一个<strong>唯一seq</strong>，然后附在消息上面发送给每个客户端，客户端根据这个seq进行排序显示。这样就保证了显示顺序一致了。</p><h3 id="再优化"><a href="#再优化" class="headerlink" title="再优化"></a>再优化</h3><p>上面提到唯一seq需要从底层（可能是数据库）中拿取，这样并发量大的时候可能会造成性能上的损失，有什么方法优化呢？</p><p>下面是一些解决方案：</p><ol><li>使用Redis缓存（我个人的想法），借助Redis数据存储于内存的机制来提高效率，不足的地方就是万一Redis崩了会导致消息只能按随机顺序发送给客户端</li><li>将消息传到一个相同的服务器集中管理添加seq（网上的方案），由一个服务器来本地管理这个群的seq，消息集中发送过来这里添加好seq后再传给客户端，相当于一个中继站，缺点是耗时（消息每次都要经过这个服务器），但起码比存在数据库中每次都提取好一些。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>IM系统架构下，消息的绝对时序是很困难的，原因多种多样，比如：没有全局时钟、多发送方、多接收方、多线程、网络传输不确定性等。</p><p>一对一单聊时，其实只需要保证发出的时序与接收的时序一致，就基本能让用户感觉不到乱序了。</p><p>多对多的群聊情况下，保证同一群内的所有接收方消息时序一致，也就能让用户感觉不到乱序了</p><h1 id="如何确保消息的可靠性？（消息不丢，消息不重）"><a href="#如何确保消息的可靠性？（消息不丢，消息不重）" class="headerlink" title="如何确保消息的可靠性？（消息不丢，消息不重）"></a>如何确保消息的可靠性？（消息不丢，消息不重）</h1><p>同样也是一篇写得比较好的文章：<a href="http://www.52im.net/thread-3182-1-1.html">零基础IM开发入门(三)：什么是IM系统的可靠性？</a></p><p>这里的消息可靠性包括两个方面：</p><ol><li>消息不会丢失</li><li>消息不会重复</li></ol><p>当然，我们还要注意消息分为<strong>在线消息</strong>和离线消息两种方式，这两个方式都要保证可靠性</p><h2 id="TCP并不能保证在线消息的“可靠性”"><a href="#TCP并不能保证在线消息的“可靠性”" class="headerlink" title="TCP并不能保证在线消息的“可靠性”"></a>TCP并不能保证在线消息的“可靠性”</h2><p>TCP是网络层的协议，它虽然能够保证网络连接时网络层的“可靠性”，但是网络层上到业务层的过程中并不能保证其“可靠性”。</p><p>什么意思呢？比如说数据到达网络层，而程序需要把数据放入数据库中，这时候程序可能会出现崩溃，就会导致数据还没保存到数据库中就“消失了”。</p><p>因此，即使TCP可靠，可随着项目的功能越来越多，网络层向上的处理出错率也越大</p><h2 id="那么在线消息怎么保证其可靠性呢？"><a href="#那么在线消息怎么保证其可靠性呢？" class="headerlink" title="那么在线消息怎么保证其可靠性呢？"></a>那么在线消息怎么保证其可靠性呢？</h2><p>可以参考TCP的超时重传机制，在指定的时间内没有收到ACK进行数据重新发送</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa0516842074b7cc521085313a11bf9aea6669666f7a7bbbaf78f2ae7/0.png" alt="在线消息可靠性流程图.png"></p><p>第一阶段（A-&gt;server）：</p><ol><li>A发送消息msg给server</li><li>server接收到消息，回给A一个ACK确认包msg-ack</li><li>A在超时时间内收到ACK代表成功发送消息，第一阶段结束</li></ol><p>如果msg或者msg-ack任意一个发送失败，都会导致客户端A无法收到ACK，这时候就可以提示用户发送消息失败，进行重新发送</p><p>第二阶段（server-&gt;B）：</p><ol><li>server向B推送消息notify-req</li><li>B收到消息，回复notify-ack给server</li><li>server收到ack，代表第二阶段以及整个消息转发完成</li></ol><p>和第一阶段一样，无论notify-req还是notify-ack其中一个发送失败，都会导致server无法收到ack，此时则要超时重传</p><h2 id="离线消息也要保证可靠性"><a href="#离线消息也要保证可靠性" class="headerlink" title="离线消息也要保证可靠性"></a>离线消息也要保证可靠性</h2><p>离线消息也会有发送消息丢失的状况，比如从数据库中取出数据传给客户端过程中，万一客户端此时断开了，那么数据库的数据也删除了，消息也在传输过程中丢失了。</p><p>这里也有对应的解决方案，也是利用超时重传的机制</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa0516842074b7cc5210853134a507149f14dfb7e992462b915767e8e/0.png" alt="离线消息可靠性流程图.png"></p><p>先看左边客户端A的阶段，这是发送一个消息给服务器，服务器检测到需要作为离线消息存放在数据库的过程：</p><ol><li>客户端A发送msg给server</li><li>server检测到属于离线消息类型，需要存放在数据库中</li><li>存放好后，server发送ack回复给客户端A，此时A不管消息类型是在线还是离线，都是代表A的消息成功发出去了</li></ol><p>然后是比较重要的取出离线消息的阶段：</p><ol><li>客户端B上线，向server请求检查是否有属于它的离线消息</li><li>server从数据库中取出数据（注意此时还没删除）</li><li>server将取出的数据发送给B</li><li>B收到后回复给server一个ack</li><li>server只有在收到ack后才将数据库中的离线消息删除</li></ol><p>当然，<strong>上面的操作还可以进一步优化</strong></p><p>每次B取出一条数据就要向server回一个ack，如果消息量大起来时候会增大了双方的压力。</p><p>对于这种情况我们可以使用<strong>接收批量消息才回复一个ack的方式</strong>，将多个消息划分成组发送，一个组发送成功客户端才回复一个ack，如果某个组超时了则重新发送这一组的消息就好了。</p><h2 id="消息不丢失保证了，那消息重复怎么办呢？？"><a href="#消息不丢失保证了，那消息重复怎么办呢？？" class="headerlink" title="消息不丢失保证了，那消息重复怎么办呢？？"></a>消息不丢失保证了，那消息重复怎么办呢？？</h2><p>对于消息重复的情况很简单解决，就是根据一个<strong>唯一的消息id</strong>来将消息过滤</p><ol><li>对于客户端：可以通过一个哈希表<code>unordered_map</code>来维护已收到过的消息id，当再次收到该id时将消息丢弃</li><li>对于服务端：将从客户端接收的消息id<strong>往数据库中查询</strong>(不能用保存在内存中的哈希表，因为服务端是集群部署的)，如果数据库中已经存在该id则将消息丢弃。但是<strong>仍然要回复ACK给客户端</strong>（因为这条消息有可能是客户端主动发送手动重传的）；</li></ol><p>既然做了id机制了，那么按顺序到达的功能也可以完成了（ps：这两个问题的关联性，惊了）</p><h1 id="扩展：另种随机UID生成算法–Snowflake（雪花算法）"><a href="#扩展：另种随机UID生成算法–Snowflake（雪花算法）" class="headerlink" title="扩展：另种随机UID生成算法–Snowflake（雪花算法）"></a>扩展：另种随机UID生成算法–Snowflake（雪花算法）</h1><p><a href="https://www.e-learn.cn/topic/3715693">忘掉 Snowflake，感受一下性能高出 587 倍的全局唯一 ID 生成算法</a></p><p>大名鼎鼎的 Snowflake<br>Twitter 于 2010 年开源了内部团队在用的一款全局唯一 ID 生成算法 Snowflake，翻译过来叫做雪花算法。Snowflake 不借助数据库，可直接由编程语言生成，它通过巧妙的位设计使得 ID 能够满足递增属性，且生成的 ID 并不是依次连续的，能够满足上面提到的全局唯一 ID 的 4 个属性。它连续生成的 3 个 ID 看起来像这样：</p><p>563583455628754944<br>563583466173235200<br>563583552944996352<br>Snowflake 以 64 bit 来存储组成 ID 的4 个部分：</p><p>1、最高位占1 bit，值固定为 0，以保证生成的 ID 为正数；</p><p>2、中位占 41 bit，值为毫秒级时间戳；</p><p>3、中下位占 10 bit，值为工作机器的 ID，值的上限为 1024；</p><p>4、末位占 12 bit，值为当前毫秒内生成的不同 ID，值的上限为 4096；</p><p>Snowflake 的代码实现网上有很多款，基本上各大语言都能找到实现参考。我之前在做实验的时候在网上找到一份 Golang 的代码实现：</p><h1 id="消息明文传输的安全问题"><a href="#消息明文传输的安全问题" class="headerlink" title="消息明文传输的安全问题"></a>消息明文传输的安全问题</h1><p>明文传输会有给劫持信息，泄露内容的风险，肯定是不可以直接使用明文传输的。</p><p>所以我们要使用加密技术来保证安全性，至于要用什么加密方式则是着重要思考的问题。</p><h2 id="要选择什么加密方式呢？"><a href="#要选择什么加密方式呢？" class="headerlink" title="要选择什么加密方式呢？"></a>要选择什么加密方式呢？</h2><p>我们可以参考所学到的知识，比如HTTPS就是一个很好的例子，使用非对称加密传输通信随机码，再使用通信随机码对称加密信息来传输正常的数据</p><h2 id="自己想到的一个新问题：HTTPS是应用在端对端通信过程，如果是项目这种服务器中继站模式的怎么实现加密呢？"><a href="#自己想到的一个新问题：HTTPS是应用在端对端通信过程，如果是项目这种服务器中继站模式的怎么实现加密呢？" class="headerlink" title="自己想到的一个新问题：HTTPS是应用在端对端通信过程，如果是项目这种服务器中继站模式的怎么实现加密呢？"></a>自己想到的一个新问题：HTTPS是应用在端对端通信过程，如果是项目这种服务器中继站模式的怎么实现加密呢？</h2><p>这个问题的意思是，HTTPS是直接两个终端进行通信，而对称加密与非对称加密传输之间是直接根据两个终端的公私钥来加密并且传输的，加密传输只有一段路。</p><p>可是放到聊天服务器中，数据报文要先传给服务器，服务器再负责转发给目标用户，这就形成了三个终端两段路了，此时我们应该怎么加密呢？</p><h3 id="两个不可取的思路："><a href="#两个不可取的思路：" class="headerlink" title="两个不可取的思路："></a>两个不可取的思路：</h3><ol><li>A到服务器加一次密，服务器解密解析之后再发送给B过程再加一次密？<strong>不可取</strong>，这样很影响服务器效率</li><li>A在与B聊天前建立加密通信秘钥，然后服务器只负责转发不会解密？<strong>不可取</strong>，这样又影响到了客户端的效率，万一是群组聊天怕不是每个客户端都要进行建立通信秘钥呢。。。</li></ol><h3 id="两全其美的方案："><a href="#两全其美的方案：" class="headerlink" title="两全其美的方案："></a>两全其美的方案：</h3><p>网上找到个好方法，就是将前面两个方案结合。数据报文<strong>暴露出目标用户</strong>以及<strong>发送用户</strong>作为数据的<strong>控制层</strong>，控制层是用于给服务器转发消息用的，所以这个暴露了也没关系。而真正存储数据的<strong>内容层才是需要加密</strong>，这样就解决了上面第一个方案1的问题，避免服务器解密计算</p><p>而关于群组聊天如何加密，这里也有个方案</p><p>Signal Protocol协议 在群组聊天中的设计与二人聊天又有所不同，由于群聊的保密性要求相对低一些，只采用了 KDF 链棘轮+公钥签名来进行加密通讯以保障加密的前向安全。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">群组聊天的加解密通讯流程如下：1）每个群组成员都要首先生成随机 32 字节的 KDF 链密钥(Chain Key)，用于生成消息密钥，以保障消息密钥的前向安全性，同时还要生成一个随机 Curve25519 签名密钥对，用于消息签名；2）每个群组成员用向其它成员单独加密发送链密钥(Chain Key)和签名公钥。此时每一个成员都拥有群内所有成员的链密钥和签名公钥；3）当一名成员发送消息时，首先用 KDF 链棘轮算法生成的消息密钥加密消息，然后使用私钥签名，再将消息发给服务器，由服务器发送给其它成员；4）其它成员收到加密消息后，首先使用发送人的签名公钥验证，验证成功后，使用相应的链密钥生成消息密钥，并用消息密钥解密；5）当群组成员离开时，所有的群组成员都清除自己链密钥和签名公钥并重新生成，再次单独发给每一位成员。这样操作，离开的成员就无法查看群组内的消息了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展：一些关于传输安全的文章"><a href="#扩展：一些关于传输安全的文章" class="headerlink" title="扩展：一些关于传输安全的文章"></a>扩展：一些关于传输安全的文章</h2><p><a href="http://www.52im.net/thread-4026-1-1.html"><strong>即时通讯安全篇（十一）：IM聊天系统安全手段之传输内容端到端加密技术</strong></a>——&gt;介绍了群组聊天加密</p><p><a href="http://www.52im.net/thread-2866-1-1.html"><strong>即时通讯安全篇（八）：你知道，HTTPS用的是对称加密还是非对称加密？</strong></a></p><p><a href="http://www.52im.net/thread-217-1-1.html"><strong>主流的加密算法介绍以及探讨组合加密算法在IM中的应用</strong></a></p><h1 id="为什么选用消息队列（消息队列意义）"><a href="#为什么选用消息队列（消息队列意义）" class="headerlink" title="为什么选用消息队列（消息队列意义）"></a>为什么选用消息队列（消息队列意义）</h1><p>PS: 这论坛是真好用，<a href="http://www.52im.net/thread-1979-1-1.html">IM开发基础知识补课(五)：通俗易懂，正确理解并用好MQ消息队列</a></p><p>其中最主要的一个功能是跨服务器通信，因为项目中的聊天服务器是集群部署的，不同服务器之间可能要传递消息，所以要解决好跨服务器通信的问题</p><p>MQ消息队列中间件是中大型分布式系统中重要的组件，它主要用来解决：应用解耦、异步消息、流量削锋等问题，用以实现高性能、高可用、可伸缩和最终一致性架构。</p><p>项目应用到的是Kafka 生产者消费者模式 或者Redis 发布-订阅模式</p><p>项目刚开始是只有Redis的，因为它使用起来比较简单；后来发现企业中根本不会用Redis作为消息队列，就把Kafka也加了上去，在编译时通过宏预处理来选择使用哪个消息队列</p><h2 id="Kafka-生产者消费者模式"><a href="#Kafka-生产者消费者模式" class="headerlink" title="Kafka 生产者消费者模式"></a>Kafka 生产者消费者模式</h2><p>对比RabbitMQ—&gt;<a href="http://www.52im.net/thread-1647-1-1.html"><strong>M系统的MQ消息中间件选型：Kafka还是RabbitMQ？</strong></a></p><p>选择kafka主要原因是kafka可以支持很大的并发量，kafka的单机QPS可以维持在十万级别，甚至可以达到百万级别；而RabbitMQ一般在万级。（当然这是在网上找的数据）</p><p>同时kafka有许多好的特性，如广播消费、消息回溯、消息堆积、消息持久化、消息幂等性、消息事务性。（这些都要去了解一下）</p><p>另外，kafka的可靠性与运维管理方面都相当出色，</p><h2 id="Redis-发布-订阅模式"><a href="#Redis-发布-订阅模式" class="headerlink" title="Redis 发布-订阅模式"></a>Redis 发布-订阅模式</h2><p>只是一个简单的消息队列，功能性没有Kafka强，不支持高并发量、消息持久化，消息堆积量大时也可能会导致消息丢失等，无法实现高并发和大数据量</p><p><a href="https://www.jianshu.com/p/412551ad84cb">Redis到底适不适合做消息队列？</a></p><h3 id="高并发："><a href="#高并发：" class="headerlink" title="高并发："></a>高并发：</h3><p>因为Redis在发布消息前，会先将数据推送到每个客户端的连接缓冲区，如果单个消息体量大，会撑爆缓冲区导致Redis错误。即使没有撑爆缓冲区，如果消费者没有及时取走消息，也会导致数据积累而撑爆内存。</p><h3 id="消息持久化："><a href="#消息持久化：" class="headerlink" title="消息持久化："></a>消息持久化：</h3><p>PubSub 的生产者传递过来一个消息，Redis 会直接找到相应的消费者传递过去。如果一个消费者都没有，那么消息直接丢弃。如果开始有三个消费者，一个消费者突然挂掉了，生产者会继续发送消息，另外两个消费者可以持续收到消息。但是挂掉的消费者重新连上的时候，这断连期间生产者发送的消息，对于这个消费者来说就是彻底丢失了。</p><p>如果 Redis 停机重启，PubSub 的消息是不会持久化的，毕竟 Redis 宕机就相当于一个消费者都没有，所有的消息直接被丢弃。</p><h1 id="为什么要用Redis作为跨服务器通信的中间件"><a href="#为什么要用Redis作为跨服务器通信的中间件" class="headerlink" title="为什么要用Redis作为跨服务器通信的中间件"></a>为什么要用Redis作为跨服务器通信的中间件</h1><p>因为项目中用到跨服务器通信地方是在点对点聊天以及群聊天功能上，当A服务器的用户发送的消息涉及到B服务器的用户时，首先服务器会在数据库中查看该用户是否在线，如果在线则代表在另外一个服务器的在线列表中，此时则需要把数据包发送给消息队列，然后由订阅了目标用户的服务器接收。</p><p>因为服务器用到消息队列的地方较少并且Redis消息队列代码实现比较方便，所以才考虑用到Redis的发布-订阅功能作为服务器的消息队列，！（这里我通过压力测试，不断向服务器发送一个必须跨服务器通信的数据包，压力测试在xxx通信量下，Redis还是能顺利完成通信）</p><p>当然不排除当数据量大的时候Redis存在挂掉的现象，这时候就可以考虑采取设置消息量阈值、更换重型的消息队列框架（如Kafka、RabbitMQ）等消息队列来作为跨服务器通信的中间件</p><h1 id="Redis不稳定挂掉了怎么办"><a href="#Redis不稳定挂掉了怎么办" class="headerlink" title="Redis不稳定挂掉了怎么办"></a>Redis不稳定挂掉了怎么办</h1><p>emm，没有哪个服务器是可以保证绝对稳定的，当数据量达到一定值的时候，只能选择如抛弃消息策略（可以设置一个阈值，当消息量达到这个阈值时则不再继续接收消息）、扩展服务器硬件、采用更专业的消息队列架构如Kafka、RabbitMQ、RocketMQ、ZeroMQ等等</p><p>Redis的发布-订阅还存在数据丢失问题，分别是在<strong>消费者下线</strong>、<strong>Redis宕机</strong>、<strong>消息堆积</strong>这三个情况会出现。</p><p>关于第一种情况消费者下线服务器已经有处理方法了，就是在发布跨服务器的数据包前会在服务器检测目标用户是否在线，如果不在线就直接转为离线消息放在数据库中存储；</p><p>而关于Redis宕机导致消息丢失的问题，可以考虑使用更趋于成熟的队列：<strong>Stream</strong>，该类型的队列可以支持AOF和RDB持久化，一旦Redis宕机也可以恢复消息；</p><p>而消息堆积问题，Stream选择的是丢弃旧的消息选择新的消息，实际上消息丢失问题还是会存在，这时候就要选择更加专业的消息队列了</p><h1 id="为什么各个Server不能相互直接通信呢？"><a href="#为什么各个Server不能相互直接通信呢？" class="headerlink" title="为什么各个Server不能相互直接通信呢？"></a>为什么各个Server不能相互直接通信呢？</h1><p>项目中每台服务器有特定的用户在线列表，这也是要求项目拥有跨服务器通信功能的原因之一，但是因为引入了多台服务器，我们就要对此加以管理。</p><p>首先考虑服务器之间直接相互连接的情况，这种方式服务器作为服务端又作为客户端，如果服务器数量一大，则会导致难以管理连接。比如说想要增加一台服务器的时候，就要将这台新的服务器与当前在线的服务器建立连接，耗时长并且在维持连接的过程中还要时不时发送一个心跳包来查看对方服务器是否在线从而判断连接是否正常。因此服务器相互直连的方式是淘汰的，连接量多，建立连接复杂，管理难。</p><p>项目中考虑的是消息队列作为跨服器中间件的情况，用这种方案的话连接量会对比直接连接方案的连接量大大减小，每台服务器只用保持与消息队列一条连接就行，并且每当新增一台服务器的时候其它服务器并不需要知道有服务器新增加进来了，这台新增加的服务器只用和消息队列连接就行了，连接管理也是简单很多。</p><h1 id="数据库表是怎么设计的"><a href="#数据库表是怎么设计的" class="headerlink" title="数据库表是怎么设计的"></a>数据库表是怎么设计的</h1><p>一共有五个表，分别是用户表、群组信息表（不同群组的信息）、群组成员表（某个群中所有的成员信息）、离线信息表（存放每个用户的离线信息Json）、以及一个好友表（一对多的关系）</p><h2 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h2><p>用户表存放用户的登录账号（id）、名称、加盐哈希后的密码、盐值、在线状态</p><h2 id="好友表（两种设计方案）"><a href="#好友表（两种设计方案）" class="headerlink" title="好友表（两种设计方案）"></a>好友表（两种设计方案）</h2><p><a href="https://zhuanlan.zhihu.com/p/25648654">两种好友关系表的设计方案</a></p><h3 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h3><p>第一种方案是和我项目中的一样</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 好友列表，点对点的关系CREATE TABLE &#96;friend&#96; (  &#96;userid&#96; int NOT NULL COMMENT &#39;用户id&#39;,  &#96;friendid&#96; int NOT NULL COMMENT &#39;好友id&#39;,  PRIMARY KEY (&#96;userid&#96;,&#96;friendid&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;gbk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当A添加B为好友后，会添加两条数据：“A与B是好友”，以及“B与A是好友”</p><p>这种方案优点是：表结构的存取逻辑简单</p><p>缺点是：表内容存在冗余的数据</p><h3 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h3><p>第二种方案网上示例如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;user_relation&#96; (  &#96;id&#96; int(11) unsigned NOT NULL AUTO_INCREMENT,  &#96;user_id&#96; int(11) DEFAULT NULL,  &#96;friend_id&#96; int(11) DEFAULT NULL,  &#96;sorted_key&#96; varchar(255) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;),  UNIQUE KEY &#96;user_id&#96; (&#96;user_id&#96;,&#96;friend_id&#96;),  KEY &#96;sorted_uniq_key&#96; (&#96;sorted_key&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次用户A添加用户B为好友后，即在数据库中添加一条记录：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">user_id: 10001, friend_id: 10002, sorted_key: 10001-10002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sorted_key是将（user_id和friend_id）升序排序后的拼接，作为两个用户为好友关系的唯一验证</p><p>即：使用A添加B为好友后，不用也不可以再使用B添加A好友命令，因为相同的sorted_key已经存在</p><p>但是查找好友关系时还是比较麻烦</p><p>获取用户A的朋时 SQL</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">SELECT friend_id FROM user_relation WHERE user_id &#x3D; 10001;SELECT user_id FROM user_relation WHERE friend_id &#x3D; 10001;或SELECT friend_id as user_id FROM user_relation WHERE user_id &#x3D; 10001  UNIONSELECT user_id FROM user_relation WHERE friend_id &#x3D; 10001;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法有点是：没有数据冗余</p><p>缺点：获取逻辑比较复杂，唯一验证字段也要占空间</p><p>个人比较倾向于第一种方案，第二种虽然数据库冗余少，但是逻辑比较复杂，而且查询sql复杂，性能上肯定比第一种差不少</p><h2 id="群组信息表"><a href="#群组信息表" class="headerlink" title="群组信息表"></a>群组信息表</h2><p>存放群组id、群组名称和群组描述</p><h2 id="群组成员"><a href="#群组成员" class="headerlink" title="群组成员"></a>群组成员</h2><p>存放群组id内的成员id，以及该成员id在群中的群组角色</p><h2 id="离线信息表"><a href="#离线信息表" class="headerlink" title="离线信息表"></a>离线信息表</h2><p>存放Json格式的用户离线消息，待到对应用户上线则将离线消息推送成功再从数据库删除该离线消息</p><h1 id="TODO-离线消息怎么存储（加密？还是明文？）"><a href="#TODO-离线消息怎么存储（加密？还是明文？）" class="headerlink" title="TODO:离线消息怎么存储（加密？还是明文？）"></a>TODO:离线消息怎么存储（加密？还是明文？）</h1><h1 id="项目中Protobuf是怎么使用的"><a href="#项目中Protobuf是怎么使用的" class="headerlink" title="项目中Protobuf是怎么使用的"></a>项目中Protobuf是怎么使用的</h1><p>我首先是按照功能来划分多个消息类型，比如说登录的时候会有一个登录请求类型的消息，包含用户输入的</p><h1 id="Protobuf与Json的区别在哪里"><a href="#Protobuf与Json的区别在哪里" class="headerlink" title="Protobuf与Json的区别在哪里"></a>Protobuf与Json的区别在哪里</h1><h2 id="序列化与解析速度"><a href="#序列化与解析速度" class="headerlink" title="序列化与解析速度"></a>序列化与解析速度</h2><p>我进行了一下Protobuf和Json的序列化速度对比，实验结果如下：</p><table><thead><tr><th>序列化与解析次数：</th><th>1次</th><th>1千次</th><th>1万次</th><th>10万次</th><th>100万次</th></tr></thead><tbody><tr><td>Json序列化</td><td>0.040毫秒</td><td>3.74毫秒</td><td>36.87毫秒</td><td>0.38秒</td><td>3.77秒</td></tr><tr><td>Json解析</td><td>0.031毫秒</td><td>11.23毫秒</td><td>103.37毫秒</td><td>1.06秒</td><td>10.40秒</td></tr><tr><td>Protobuf序列化</td><td>0.002毫秒</td><td>0.21毫秒</td><td>2.02毫秒</td><td>0.02秒</td><td>0.20秒</td></tr><tr><td>Protobuf解析</td><td>0.001毫秒</td><td>0.19毫秒</td><td>1.89毫秒</td><td>0.02秒</td><td>0.19秒</td></tr></tbody></table><p>可以见到，在循环进行100万次序列化与解析的情景下：</p><p>Json的序列化耗时4秒钟左右；解析耗时10秒钟左右</p><p>而protobuf序列化只用0.2秒；解析也只用0.2秒</p><p>上下相差了差不多一百倍</p><h2 id="序列化后所占空间"><a href="#序列化后所占空间" class="headerlink" title="序列化后所占空间"></a>序列化后所占空间</h2><p>这里这进行了简单的样例，一个字符串和一个32位int整数</p><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">json js<span class="token punctuation">;</span>js<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"zhao ying jian"</span><span class="token punctuation">;</span>js<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将上述样例json序列化后所得的字符串大小为34个字节</p><h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">people<span class="token punctuation">.</span><span class="token function">set_name</span><span class="token punctuation">(</span><span class="token string">"zhao ying jian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">set_age</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">SerializeToString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将上述样例protobuf序列化后所得的字符串大小为18个字节</p><p>可见protobuf序列化后比json序列化后节省空间</p><h3 id="开发方便"><a href="#开发方便" class="headerlink" title="开发方便"></a>开发方便</h3><p>在项目开发过程中，个人感觉protobuf的使用更规范，建立好protobuf结构后，调用对象方法时可以直接看到字段的方法，不需要死记硬背有哪些字段</p><p>而使用Json时，我使用的第三方Json库和使用unordered_map的键值对方式差不多的，这样就要我另外起一张表来记录某个消息类型的字段有哪些</p><h1 id="TODO-容灾方案"><a href="#TODO-容灾方案" class="headerlink" title="TODO:容灾方案"></a>TODO:容灾方案</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么客户端不采用P2P的方式通信，而是采用服务器转发消息的方式？&quot;&gt;&lt;a href=&quot;#为什么客户端不采用P2P的方式通信，而是采用服务器转发消息的方式？&quot; class=&quot;headerlink&quot; title=&quot;为什么客户端不采用P2P的方式通信，而是采用服务器转</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/tags/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++集群聊天服务器（优化篇）</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++-%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%BC%98%E5%8C%96%E7%AF%87%EF%BC%89/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++-%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%BC%98%E5%8C%96%E7%AF%87%EF%BC%89/</id>
    <published>2022-07-24T15:10:26.000Z</published>
    <updated>2022-07-25T04:49:29.659Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章是在做完该项目的服务端和客户端后写的，记录所要优化方面的内容</p><h1 id="负载均衡器-——-Nginx"><a href="#负载均衡器-——-Nginx" class="headerlink" title="负载均衡器 —— Nginx"></a>负载均衡器 —— Nginx</h1><p><strong>什么是Nginx</strong>，在网上查找到的资料如下：</p><blockquote><p>Nginx是十分轻量级的HTTP服务器。Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。Nginx是由俄罗斯人 Igor Sysoev为俄罗斯访问量第二的 Rambler.ru站点开发的，它已经在该站点运行超过两年半了。Igor Sysoev在建立的项目时,使用基于BSD许可。</p><p>Nginx凭借其<strong>稳定性</strong>、<strong>低资源消耗</strong>、<strong>简单配置</strong>和<strong>丰富的功能</strong>，从十多年前名不见经传的Web服务器软件，发展到如今能够跟Apache匹敌的地位。</p></blockquote><p><strong>什么是负载均衡呢？</strong>这里也是引用网上找到的资料：</p><blockquote><p>所谓负载均衡，就是 Nginx 把请求均匀的分摊给上游的应用服务器，这样即使某一个服务器宕机也不会影响请求的处理，或者当应用服务器扛不住了，可以随时进行扩容。</p></blockquote><p><img src="https://pic.rmb.bdstatic.com/bjh/75e90abfde4c84a8185ef7167f203c38.jpeg" alt="什么是负载均衡.jpg"></p><p>从我自身了解的来说，Nginx就是一个客户端连接服务端中间的一个代理服务器，负责将客户端连接分发给多个服务端，从而提高服务端的并发量，它从而达到负载均衡的效果</p><h2 id="为什么要使用负载均衡器？"><a href="#为什么要使用负载均衡器？" class="headerlink" title="为什么要使用负载均衡器？"></a>为什么要使用负载均衡器？</h2><p>这里无非就是问负载均衡器的意义，下面这张图是项目课中老师画的图，有三个点的意义</p><p><img src="https://pic.rmb.bdstatic.com/bjh/34a6e378a363616e0a8b3373c56bdf41.png" alt="为什么要引入负载均衡器.png"></p><ol><li>负载均衡器可以起到一个分配的效果，他会监听集群之后的多个服务器，通过负载均衡策略（有多种），将多个请求分摊到多个服务器中，相当于把一个服务器所要承担的负载量交给多个服务器处理，提高系统的吞吐量；并且当其中一台服务器瘫痪时，还可以使用其他服务器提供正常的服务</li><li>负载均衡器还可以通过心跳机制，即定时发送一个结构体（心跳包），让对方（服务端）知道自己还处在连接当中，这可以作为检测服务端是否故障的机制</li><li>负载均衡器还可以发现新加进来的服务端，方便扩展服务器数量</li></ol><p>另外上图下面还说了Nginx的一个优点，即它是可以平滑启动的，因为我们负载均衡器可能时时刻刻都有用户连接中，当我们想修改配置时不可能时刻都有机会重启，而Nginx则可以在不重启的情况下加载修改好的配置文件</p><h2 id="如何解决集群聊天服务器中跨服务器通信问题？"><a href="#如何解决集群聊天服务器中跨服务器通信问题？" class="headerlink" title="如何解决集群聊天服务器中跨服务器通信问题？"></a>如何解决集群聊天服务器中跨服务器通信问题？</h2><p>当我们使用负载均衡器后，我们要思考一个问题，即我们的客户端可能分布在不同的服务器中，如下图：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/44d1bb8628d9bb70211ceb61406cca63.png" alt="客户端分布在多个服务器中.png"></p><p>用户1、2、3分别在三台服务器中，但是当用户1想发消息给用户2时，<strong>第一台服务器在线列表中并没有用户2的在线信息</strong>，虽然这个时候可以从数据库查表来解决，但是另一个问题是<strong>第一台服务器没有用户2的连接Conn</strong>，这样也导致不能将信息发送给用户2，那么该如何解决呢？</p><p><strong>方案一：</strong>将每个服务器也进行连接，这样便可以传输客户端连接等信息，如下图所示：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/c5769ef07f82e596cd22aabc6abd89bb.png" alt="解决跨服务器通信方案一.png"></p><p>这种方案缺点很明显：</p><ol><li>实现复杂，6台服务器就要进行那么多连接，各服务器带宽压力大，业务代码也要进行大量的修改，不利于系统修改</li><li>当服务器发生异常时，难以解决</li><li>违背了“低耦合”的设计理念，这里是强耦合</li></ol><p>因此这个方案是淘汰的！</p><p><strong>方案二：</strong></p><p>而集群部署的服务器之间通信，最好的方式则是引入中间件（有很多种方式），其中一种则是消息队列，如下图：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/3ce898756241f9ece801bddb2735d4f0.png" alt="引入中间件解决跨服务器通信.png"></p><p>当一台服务器新添加进来的时候，我们只用和消息队列建立连接就行了</p><blockquote><p>在集群分布式环境中，经常使用的中间件消息队列有ActiveMQ、RabbitMQ、Kafka等，都是应用场景广<br>泛并且性能很好的消息队列，供集群服务器之间，分布式服务之间进行消息通信。限于我们的项目业务<br>类型并不是非常复杂，对并发请求量也没有太高的要求，因此我们的中间件消息队列选型的是-<strong>基于发</strong><br><strong>布-订阅模式的redis</strong>。  </p></blockquote><p>这也就让我们项目使用Redis的原因</p><p>而消息队列的原理是：当用户1连接进第一台服务器时，第一台服务器则会在消息队列中<strong>订阅这个用户1</strong>，当有人发消息给用户1时，就会<strong>通知并转发消息内容（假设是chat_json）给该第一台服务器</strong>，再由服务器转发json给用户1，从而完成跨服务器通信</p><h2 id="安装及配置、运行Nginx"><a href="#安装及配置、运行Nginx" class="headerlink" title="安装及配置、运行Nginx"></a>安装及配置、运行Nginx</h2><p>安装过程这里就省略了，我安装时候出了点小插曲，最后在官网上下了个最新版的才安装成功。安装过程中注意运行shell脚本时要先进入root用户下并且运行脚本要附带参数 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">su root.&#x2F;configure --with-stream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好后配置文件在目录：<code>/sur/local/nginx.conf</code>中</p><p>然后我们这里要添加的内容如下</p><p><img src="https://pic.rmb.bdstatic.com/bjh/70c5c0449f86cd3d2b295a71dfea1b13.png" alt="nginx配置文件中要添加的配置.png"></p><p>里面 upstream Myserver 中的两条文本代表我们本地开两个服务器，供负载均衡器分配客户端</p><p>每个服务器后面的属性意思如下：</p><ul><li>weight：代表权重值，影响着负载均衡器分配算法，如果每个服务器权重值都一样则按照轮询的方法来分配</li><li>max_fails：影响着负载均衡器心跳机制，按照这里的3来说，如果发送了3次心跳包后还没有收到响应，则负载均衡器判断该服务器挂掉了</li></ul><p>下面server中有个<code>listen 8000</code>代表nginx监听连接到8000端口的客户端，即客户端只用连接进来服务器的8000端口就可以使用nginx的服务了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># nginx tcp loadbalance configstream &#123;    upstream MyServer&#123;        server 127.0.0.1:6970 weight&#x3D;1 max_fails&#x3D;3 fail_timeout&#x3D;3s;        server 127.0.0.1:6971 weight&#x3D;1 max_fails&#x3D;3 fail_timeout&#x3D;3s;    &#125;       server&#123;        proxy_connect_timeout 1s;        #proxy_timeout 3s;        listen 6969;        proxy_pass MyServer;        tcp_nodelay on;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好后即可在<code>/usr/local/nginx/sbin</code>目录下运行nginx，注意要用root用户启动</p><p>启动后可通过<code>netstat -tanp</code>查看是否有启动（一般在80端口）</p><pre class="line-numbers language-none"><code class="language-none">korone@ubuntu:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin$ sudo netstat -tanp激活Internet连接 (服务器和已建立连接的)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name  ...tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      21684&#x2F;nginx: master ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后想停止或重新加载配置文件可以用以下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nginx -s reload # 重新加载配置文件启动nginx -s stop   # 停止nginx服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="验证Nginx效果"><a href="#验证Nginx效果" class="headerlink" title="验证Nginx效果"></a>验证Nginx效果</h2><p>启动Nginx后，我们再选择启动两个服务端，分别是在配置文件上配置的服务器地址和端口（一个6970端口，一个6971端口，Nginx监听的是6969端口）</p><p><img src="https://pic.rmb.bdstatic.com/bjh/403164850c5a8883450fc987ae84167a.png" alt="验证Nginx-启动两个服务端.png"></p><p>由于我设置的权重值都是1<code>weight=1</code>，所以按理来说我连两个客户端（连接端口是Nginx的6969端口），Nginx应该是轮询方式分配给上图两个服务器，结果也是成功了，看下图</p><p><img src="https://pic.rmb.bdstatic.com/bjh/e5a3312d6d8876859d492f640be1c909.png" alt="验证Nginx-轮询分配客户端结果.png"></p><p>大功告成！！</p><h1 id="基于发布—订阅的消息队列中间件-——-Redis"><a href="#基于发布—订阅的消息队列中间件-——-Redis" class="headerlink" title="基于发布—订阅的消息队列中间件 —— Redis"></a>基于发布—订阅的消息队列中间件 —— Redis</h1><p>在这里我们要修改项目代码，增加一个Redis类，在这个类中我们要根据之前分析的消息队列制定下面几个功能</p><ul><li>服务端和消息队列连接</li><li>为服务器创建一个通道（订阅）</li><li>删除通道</li><li>服务器发布消息</li><li>消息队列收到消息通知服务器</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇文章是在做完该项目的服务端和客户端后写的，记录所要优化方面的内容&lt;/p&gt;
&lt;h1 id=&quot;负载均衡器-——-Nginx&quot;&gt;&lt;a href=&quot;#负载均衡器-——-Nginx&quot; class=&quot;headerlink&quot; title=&quot;负载均衡器 —— Nginx&quot;&gt;&lt;/a&gt;负载</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/tags/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++集群聊天服务器（正式内容篇）</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9%E7%AF%87%EF%BC%89/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9%E7%AF%87%EF%BC%89/</id>
    <published>2022-07-17T03:56:18.000Z</published>
    <updated>2022-09-05T01:00:42.330Z</updated>
    
    <content type="html"><![CDATA[<p> 有了上一篇所提到的预备知识后，我们就可以开始着手开发集群聊天室项目了</p><h1 id="构建项目目录"><a href="#构建项目目录" class="headerlink" title="构建项目目录"></a>构建项目目录</h1><p>首先我们把项目的目录构建好先，这里打算将服务端和客户端放在同一个项目大文件夹下</p><p><strong>注意：使用CMake构建项目时候要在build目录下用命令进行构建，这样中间文件就会生成在build目录下</strong></p><p>下面展示下我创建文件目录：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/ede58589e573549c56768514209192bd.png" alt="文件目录展示.png"></p><h1 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h1><p>由于CMake的性质，在项目中CMakeLists.txt不止有一个的，比如在用到的源文件的子目录下都应该有单独的一个CMakeLists.txt，因此我们可以在项目开始前先把CMakeLists.txt写好先</p><h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h2><p>其中最外面的CMakeLists.txt代码如下：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># CMakeLists.txt</span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span>    <span class="token comment">#要求系统CMake最小的版本</span><span class="token keyword">project</span><span class="token punctuation">(</span>chat<span class="token punctuation">)</span>   <span class="token comment">#工程名字</span><span class="token comment"># 配置编译选项，这里是在CMAKE_CXX_FLAGS基础上后面再加个 -g</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS</span><span class="token punctuation">&#125;</span> -g<span class="token punctuation">)</span><span class="token comment"># 配置最终的可执行文件输出的路径</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/bin<span class="token punctuation">)</span><span class="token comment"># 配置头文件搜索路径</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/thirdparty<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/include<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/include/server<span class="token punctuation">)</span><span class="token comment"># 加载子目录</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="src"><a href="#src" class="headerlink" title="./src"></a>./src</h2><p>然后是src目录下的CMakeLists.txt，它分别指定客户端源文件子目录和服务端源文件子目录：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># ./src/CMakeLists.txt</span><span class="token comment"># 再次添加子目录路径，起到一个中介作用</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="src-server"><a href="#src-server" class="headerlink" title="./src/server"></a>./src/server</h2><p>存放服务端源代码的目录下也应该有个CMakeLists.txt，用于指定源文件路径：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 定义了一个SRC_LIST变量，包含了该目录下所有的源文件</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. SRC_LIST<span class="token punctuation">)</span><span class="token comment"># 指定生成可执行文件</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>ChatServer <span class="token punctuation">$&#123;</span>SRC_LIST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 链接库文件</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>ChatServer muduo_net muduo_base pthread<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="待补充。。。"><a href="#待补充。。。" class="headerlink" title="待补充。。。"></a>待补充。。。</h2><h1 id="❗服务器框架设计思路（重要，获取handler相关）"><a href="#❗服务器框架设计思路（重要，获取handler相关）" class="headerlink" title="❗服务器框架设计思路（重要，获取handler相关）"></a>❗服务器框架设计思路（重要，获取handler相关）</h1><p>这里说一下设计思路，整个服务器框架大致分为网络模块和业务逻辑模块，这里在设计之初就想好了要解耦他们之间的关系，即<strong>充分利用回调函数</strong></p><p>在muduo库检测到读写事件时，会调用<code>onMessage()</code>回调函数，但这个事件类型是整体的，我们还有<strong>很多细分的类型</strong>，因此为了以后代码编写方便，就不选择在<code>onMessage()</code>里面一直改来改去（判断各种类型事件）了</p><p>这里做法则是运用一个消息类型枚举类<code>EnMsgType</code>、一个哈希表<code>unordered_map&lt;EnMsgType,MsgHandler&gt; _msgHandlerMap;</code>、一个操作函数模板<code>MsgHandler</code>来控制什么消息类型对应什么样的操作函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//消息类型</span><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EnMsgType</span><span class="token punctuation">&#123;</span>    LOG_MSG<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">//登录类型消息</span>    REG_MSG<span class="token operator">=</span><span class="token number">2</span>   <span class="token comment">//注册类型消息</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//MsgHandler</span><span class="token keyword">using</span> MsgHandler<span class="token operator">=</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//哈希表记录xxx消息类型对应xxxMsgHandler</span><span class="token keyword">class</span> <span class="token class-name">ChatService</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//消息id操作表，不同消息id对应不同的处理操作</span>    unordered_map<span class="token operator">&lt;</span>EnMsgType<span class="token punctuation">,</span>MsgHandler<span class="token operator">></span> _msgHandlerMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取handler流程"><a href="#获取handler流程" class="headerlink" title="获取handler流程"></a>获取handler流程</h2><p>通过这种设计，整个消息进行的流程为：</p><ol><li>收到读写请求，<code>onMessage()</code>事件给调用</li><li>在<code>onMessage()</code>里面会获取json信息</li><li>反序列化json，解析<code>js[&quot;msgid&quot;]</code>得到请求的事件类型EnMsgType mtype</li><li>获取ChatService类的单例对象，并调用<code>getHandler( mtype )</code>从而获取对应的事件处理方法</li><li><code>getHandler()</code>实际上是通过哈希表<code>_msgHandlerMap</code>查找是否有对应handler的，如果否则返回空操作并输出日志信息</li><li>获取到事件处理方法handler后，作用域回到了<code>onMessage()</code>中</li><li>最后执行获得到的handler方法，<code>handler(conn,js,time);</code></li></ol><p>可以看下onMessage()代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//chatserver.cpp</span><span class="token comment">/** * 客户端读写事件回调函数 * @param conn: 客户端连接对象 * @param buffer: 缓冲区 * @param time: 接收到数据时的时间 */</span><span class="token keyword">void</span> <span class="token class-name">ChatServer</span><span class="token operator">::</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>Buffer<span class="token operator">*</span> buffer<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将buffer内容转为string类型</span>    string buf<span class="token operator">=</span>buffer<span class="token operator">-></span><span class="token function">retrieveAllAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解析，反序列化</span>    json js<span class="token operator">=</span>json<span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//下面代码为了达到一个目的：完全解耦网络模块代码和业务模块代码</span>    <span class="token comment">//通过js["msgid"] 获取==>业务handler==>conn js time</span>    <span class="token comment">/**     * 获取事件对应的处理器：     * 1.先从json获取事件类型msgid     * 2.将msgid通过工具类转换成EnMsgType枚举类类型     * 3.获得对应处理器     */</span>    EnMsgType type <span class="token operator">=</span> <span class="token class-name">Utils_MsgType</span><span class="token operator">::</span><span class="token function">IntToMsgType</span><span class="token punctuation">(</span>js<span class="token punctuation">[</span><span class="token string">"msgid"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MsgHandler handler <span class="token operator">=</span> <span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//回调消息绑定好的事件处理器，来执行相应的业务</span>    <span class="token function">handler</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>js<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="服务端网络模块"><a href="#服务端网络模块" class="headerlink" title="服务端网络模块"></a>服务端网络模块</h1><p>整个服务端网络模块其实和muduo一般模板差不多</p><h2 id="chatserver-hpp"><a href="#chatserver-hpp" class="headerlink" title="chatserver.hpp"></a>chatserver.hpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CHATSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHATSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/net/TcpServer.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/net/EventLoop.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token operator">::</span>net<span class="token punctuation">;</span><span class="token comment">/** * muduo一般的使用模板： * 1.组合TcpServer对象 * 2.创建EventLoop事件循环对象指针 * 3.明确TcpServer构造函数需要什么参数（有三个必要的），输出ChatServer的构造函数 * 4.在当前服务器类的构造函数中，注册处理连接的回调函数和处理读写事件回调函数 * 5.设置合适的服务端线程数量，muduo库会自己分配I/O线程和工作线程 */</span><span class="token comment">//聊天服务器类 </span><span class="token keyword">class</span> <span class="token class-name">ChatServer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//带参数构造函数，初始化聊天服务器对象</span>    <span class="token function">ChatServer</span><span class="token punctuation">(</span>EventLoop<span class="token operator">*</span> loop<span class="token punctuation">,</span>                <span class="token keyword">const</span> InetAddress<span class="token operator">&amp;</span> listenAddr<span class="token punctuation">,</span>                <span class="token keyword">const</span> string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//服务器启动服务</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//服务端对象</span>    TcpServer _server<span class="token punctuation">;</span>    <span class="token comment">//循环事件指针</span>    EventLoop<span class="token operator">*</span> _loop<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//客户端连接或断开事件回调函数</span>    <span class="token keyword">void</span> <span class="token function">onClientConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 客户端读写事件回调函数     * @param conn: 客户端连接对象     * @param buffer: 缓冲区     * @param time: 接收到数据时的时间     */</span>    <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>    <span class="token comment">//连接</span>                    Buffer<span class="token operator">*</span> buffer<span class="token punctuation">,</span>                   <span class="token comment">//缓冲区</span>                    Timestamp time<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//接收到数据时候的时间</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="chatserver-cpp"><a href="#chatserver-cpp" class="headerlink" title="chatserver.cpp"></a>chatserver.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"chatserver.hpp"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"json.hpp"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"chatservice.hpp"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token operator">::</span>placeholders<span class="token punctuation">;</span><span class="token keyword">using</span> nlohmann<span class="token operator">::</span>json<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Utils_MsgType</span><span class="token punctuation">;</span><span class="token class-name">ChatServer</span><span class="token operator">::</span><span class="token function">ChatServer</span><span class="token punctuation">(</span>EventLoop<span class="token operator">*</span> loop<span class="token punctuation">,</span>                <span class="token keyword">const</span> InetAddress<span class="token operator">&amp;</span> listenAddr<span class="token punctuation">,</span>                <span class="token keyword">const</span> string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token function">_server</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span>listenAddr<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//注册链接回调函数</span>    _server<span class="token punctuation">.</span><span class="token function">setConnectionCallback</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ChatServer<span class="token operator">::</span>onClientConnection<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注册读写事件回调函数</span>    _server<span class="token punctuation">.</span><span class="token function">setMessageCallback</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ChatServer<span class="token operator">::</span>onMessage<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>_1<span class="token punctuation">,</span>_2<span class="token punctuation">,</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置线程数量</span>    <span class="token comment">//大于等于两个时候muduo会自动将其中一个作为I/O线程，另外的作为工作线程</span>    _server<span class="token punctuation">.</span><span class="token function">setThreadNum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//服务器启动服务</span><span class="token keyword">void</span> <span class="token class-name">ChatServer</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//客户端连接或断开事件回调函数</span><span class="token keyword">void</span> <span class="token class-name">ChatServer</span><span class="token operator">::</span><span class="token function">onClientConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//客户端断开连接</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>conn<span class="token operator">-></span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        conn<span class="token operator">-></span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 客户端读写事件回调函数 * @param conn: 客户端连接对象 * @param buffer: 缓冲区 * @param time: 接收到数据时的时间 */</span><span class="token keyword">void</span> <span class="token class-name">ChatServer</span><span class="token operator">::</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>Buffer<span class="token operator">*</span> buffer<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将buffer内容转为string类型</span>    string buf<span class="token operator">=</span>buffer<span class="token operator">-></span><span class="token function">retrieveAllAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解析，反序列化</span>    json js<span class="token operator">=</span>json<span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//下面代码为了达到一个目的：完全解耦网络模块代码和业务模块代码</span>    <span class="token comment">//通过js["msgid"] 获取==>业务handler==>conn js time</span>    <span class="token comment">/**     * 获取事件对应的处理器：     * 1.先从json获取事件类型msgid     * 2.将msgid通过工具类转换成EnMsgType枚举类类型     * 3.获得对应处理器     */</span>    EnMsgType type <span class="token operator">=</span> <span class="token class-name">Utils_MsgType</span><span class="token operator">::</span><span class="token function">IntToMsgType</span><span class="token punctuation">(</span>js<span class="token punctuation">[</span><span class="token string">"msgid"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MsgHandler handler <span class="token operator">=</span> <span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//回调消息绑定好的事件处理器，来执行相应的业务</span>    <span class="token function">handler</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>js<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="业务逻辑模块"><a href="#业务逻辑模块" class="headerlink" title="业务逻辑模块"></a>业务逻辑模块</h1><p>由于设计的结构，业务逻辑模块和网络模块是可以完全分开来编写代码的</p><p>这里的<code>ChatService</code>类是专门负责服务端逻辑的类，目前写这篇文章时候只有两个操作方法<code>login()</code>和<code>reg()</code>负责登录和注册逻辑</p><p>关于如何调用这些方法的，本文章上面的【<strong>服务器框架设计思路</strong>】有讲到</p><h2 id="chatservice-hpp"><a href="#chatservice-hpp" class="headerlink" title="chatservice.hpp"></a>chatservice.hpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CHATSERVICE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHATSERVICE_H</span></span><span class="token comment">/** * 服务器业务模块的头文件 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/net/TcpServer.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"json.hpp"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"public.hpp"</span></span><span class="token keyword">using</span> std<span class="token operator">::</span>function<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token operator">::</span>unordered_map<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token operator">::</span>net<span class="token punctuation">;</span><span class="token keyword">using</span> nlohmann<span class="token operator">::</span>json<span class="token punctuation">;</span><span class="token comment">//表示处理消息事件回调方法的类型</span><span class="token keyword">using</span> MsgHandler<span class="token operator">=</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//聊天室服务器业务类</span><span class="token keyword">class</span> <span class="token class-name">ChatService</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//获取单例对象</span>    <span class="token keyword">static</span> ChatService<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理登录业务</span>    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理注册业务</span>    <span class="token keyword">void</span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取某个类型的事件的处理器</span>    MsgHandler <span class="token function">getHandler</span><span class="token punctuation">(</span>EnMsgType msgID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ChatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">ChatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//消息id操作表，不同消息id对应不同的处理操作</span>    unordered_map<span class="token operator">&lt;</span>EnMsgType<span class="token punctuation">,</span>MsgHandler<span class="token operator">></span> _msgHandlerMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="chatservice-cpp"><a href="#chatservice-cpp" class="headerlink" title="chatservice.cpp"></a>chatservice.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"chatservice.hpp"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/base/Logging.h></span> <span class="token comment">//muduo日志头文件</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token punctuation">;</span>ChatService<span class="token operator">*</span> <span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//C++11线程安全</span>    <span class="token comment">//单例对象</span>    <span class="token keyword">static</span> ChatService _service<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>_service<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造函数注册消息以及对应的Handler回调操作</span><span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">ChatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//哈希表插入某个消息类型对应的操作回调函数</span>    <span class="token comment">//登录消息类型--->login()函数</span>    _msgHandlerMap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        <span class="token punctuation">&#123;</span>EnMsgType<span class="token operator">::</span>LOG_MSG<span class="token punctuation">,</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ChatService<span class="token operator">::</span>login<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>_1<span class="token punctuation">,</span>_2<span class="token punctuation">,</span>_3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册消息类型--->reg()</span>    _msgHandlerMap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        <span class="token punctuation">&#123;</span>EnMsgType<span class="token operator">::</span>REG_MSG<span class="token punctuation">,</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ChatService<span class="token operator">::</span>reg<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>_1<span class="token punctuation">,</span>_2<span class="token punctuation">,</span>_3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取某个类型的事件的处理器</span>MsgHandler <span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">getHandler</span><span class="token punctuation">(</span>EnMsgType msgID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> iter<span class="token operator">=</span>_msgHandlerMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>msgID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果找不到对应的回调函数，则输出日志</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token operator">==</span>_msgHandlerMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//使用lambda表达式，返回空操作的回调函数，并输出错误日志</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            LOG_ERROR<span class="token operator">&lt;&lt;</span><span class="token string">"msgID: "</span><span class="token operator">&lt;&lt;</span>                <span class="token class-name">Utils_MsgType</span><span class="token operator">::</span><span class="token function">MsgTypeToString</span><span class="token punctuation">(</span>msgID<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" could not find handler!\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> iter<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ChatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LOG_INFO<span class="token operator">&lt;&lt;</span><span class="token string">"do login() success !\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ChatService</span><span class="token operator">::</span><span class="token function">reg</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>json<span class="token operator">&amp;</span> js<span class="token punctuation">,</span>Timestamp time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LOG_INFO<span class="token operator">&lt;&lt;</span><span class="token string">"do reg() success !\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据模块"><a href="#数据模块" class="headerlink" title="数据模块"></a>数据模块</h1><p>这里对数据库里面的数据操作，设计也是要追求低耦合，即数据模块和业务模块也分开来</p><p>教学视频中提到一个概念===&gt;<strong>ORM框架</strong>，即</p><p>业务层操作的都是对象，看不到MySQL代码</p><p>数据层才是有对数据库的操作</p><p><strong>注意：因为mysql代码需要依赖<code>mysqlclient</code>库，所以记得把这个库加到<code>./src/server</code>目录下的CMake.txt中，以及编译源文件也要加多一个收录db目录下的源文件</strong></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># ./src/server/CMakeLists.txt</span><span class="token comment"># 定义了一个SRC_LIST变量，包含了该目录下所有的源文件</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. SRC_LIST<span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>./db DB_LIST<span class="token punctuation">)</span><span class="token comment"># 指定生成可执行文件</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>ChatServer <span class="token punctuation">$&#123;</span>SRC_LIST<span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>DB_LIST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="include-server-db-db-h"><a href="#include-server-db-db-h" class="headerlink" title="./include/server/db/db.h"></a>./include/server/db/db.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DB_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DB_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token operator">::</span>string<span class="token punctuation">;</span><span class="token comment">// 数据库操作类</span><span class="token keyword">class</span> <span class="token class-name">MySQL</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">// 初始化数据库连接</span>    <span class="token function">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放数据库连接资源</span>    <span class="token operator">~</span><span class="token function">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 连接数据库</span>    <span class="token keyword">bool</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新操作</span>    <span class="token keyword">bool</span> <span class="token function">update</span><span class="token punctuation">(</span>string sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询操作</span>    MYSQL_RES <span class="token operator">*</span><span class="token function">query</span><span class="token punctuation">(</span>string sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取连接</span>    MYSQL<span class="token operator">*</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    MYSQL <span class="token operator">*</span>_conn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="src-server-db-db-cpp"><a href="#src-server-db-db-cpp" class="headerlink" title="./src/server/db/db.cpp"></a>./src/server/db/db.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"db/db.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/base/Logging.h></span></span><span class="token comment">// 数据库配置信息</span><span class="token keyword">static</span> string server <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span><span class="token keyword">static</span> string user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token keyword">static</span> string password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token keyword">static</span> string dbname <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">;</span><span class="token comment">// 初始化数据库连接</span><span class="token class-name">MySQL</span><span class="token operator">::</span><span class="token function">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _conn <span class="token operator">=</span> <span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放数据库连接资源</span><span class="token class-name">MySQL</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_conn <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token function">mysql_close</span><span class="token punctuation">(</span>_conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 连接数据库</span><span class="token keyword">bool</span> <span class="token class-name">MySQL</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MYSQL <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>_conn<span class="token punctuation">,</span> server<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                  password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dbname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// "set names gbk" 将当前MYSQL对象编码设置成gbk显示，不影响原本数据库编码</span>        <span class="token comment">// C和C++代码默认的编码字符是ASCII，如果不设置，从MySQL上拉下来的中文显示？</span>        <span class="token function">mysql_query</span><span class="token punctuation">(</span>_conn<span class="token punctuation">,</span> <span class="token string">"set names gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG_INFO <span class="token operator">&lt;&lt;</span> <span class="token string">"connect mysql success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        LOG_INFO <span class="token operator">&lt;&lt;</span> <span class="token string">"connect mysql fail!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 更新操作</span><span class="token keyword">bool</span> <span class="token class-name">MySQL</span><span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span>string sql<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>_conn<span class="token punctuation">,</span> sql<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LOG_INFO <span class="token operator">&lt;&lt;</span> <span class="token constant">__FILE__</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span>                 <span class="token operator">&lt;&lt;</span> sql <span class="token operator">&lt;&lt;</span> <span class="token string">"更新失败!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查询操作</span>MYSQL_RES <span class="token operator">*</span><span class="token class-name">MySQL</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span>string sql<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>_conn<span class="token punctuation">,</span> sql<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LOG_INFO <span class="token operator">&lt;&lt;</span> <span class="token constant">__FILE__</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span>                 <span class="token operator">&lt;&lt;</span> sql <span class="token operator">&lt;&lt;</span> <span class="token string">"查询失败!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">mysql_use_result</span><span class="token punctuation">(</span>_conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取连接</span>MYSQL<span class="token operator">*</span> <span class="token class-name">MySQL</span><span class="token operator">::</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _conn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="消息类型EnMsgType"><a href="#消息类型EnMsgType" class="headerlink" title="消息类型EnMsgType"></a>消息类型EnMsgType</h1><p><strong>EnMsgType</strong>代表着传输Json时用来标记消息类型的枚举类，它声明在<code>public.hpp</code>中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//消息类型</span><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EnMsgType</span><span class="token punctuation">&#123;</span>    ERR_TYPE<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment">//错误类型（在protobuf模式中ERR_TYPE=0）</span>    <span class="token comment">//一般消息类型</span>    ONE_CHAT_MSG<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>     <span class="token comment">//点对点聊天消息</span>    ADD_FRIEND_MSG<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>   <span class="token comment">//添加好友类型消息</span>    ADD_FRIEND_ACK<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>   <span class="token comment">//添加好友应答信息（这个类型暂时只用来返回找不到该好友ID，功能可扩展）</span>    <span class="token comment">//群组相关消息类型</span>    CREATE_GROUP_MSG<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token comment">//创建群组</span>    ADD_GROUP_MSG<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">,</span>  <span class="token comment">//加入群组</span>    GROUP_CHAT_MSG<span class="token operator">=</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token comment">//群聊天</span>    <span class="token comment">//群组相关响应</span>    CREATE_GROUP_ACK<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">,</span><span class="token comment">//创建群组响应</span>    ADD_GROUP_ACK<span class="token operator">=</span><span class="token number">202</span><span class="token punctuation">,</span>  <span class="token comment">//加入群组响应</span>    <span class="token comment">//客户端登录或注销相关</span>    LOG_MSG<span class="token operator">=</span><span class="token number">401</span><span class="token punctuation">,</span>          <span class="token comment">//登录类型消息</span>    REG_MSG<span class="token operator">=</span><span class="token number">402</span><span class="token punctuation">,</span>          <span class="token comment">//注册类型消息</span>    LOG_MSG_ACK<span class="token operator">=</span><span class="token number">403</span><span class="token punctuation">,</span>      <span class="token comment">//登录响应消息</span>    REG_MSG_ACK<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>      <span class="token comment">//注册成功响应消息</span>    LOGINOUT_MSG<span class="token operator">=</span><span class="token number">405</span><span class="token punctuation">,</span>   <span class="token comment">//客户端注销消息</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="项目Json数据包格式"><a href="#项目Json数据包格式" class="headerlink" title="项目Json数据包格式"></a>项目Json数据包格式</h1><p>由于项目中都是通过和客户端传输Json数据包从而达到通信，而不同的功能模块Json数据包格式都大不一样，这里就来展示一下各个数据包格式</p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><table><thead><tr><th>msgid</th><th>name</th><th>password</th></tr></thead><tbody><tr><td>REG_MSG=402</td><td>账号名称</td><td>密码</td></tr></tbody></table><h2 id="登录账号"><a href="#登录账号" class="headerlink" title="登录账号"></a>登录账号</h2><table><thead><tr><th>msgid</th><th>id</th><th>password</th></tr></thead><tbody><tr><td>LOG_MSG=401</td><td>登录账户的唯一标识id</td><td>登录账户的密码</td></tr></tbody></table><h2 id="一对一发送信息"><a href="#一对一发送信息" class="headerlink" title="一对一发送信息"></a>一对一发送信息</h2><table><thead><tr><th>msgid</th><th>to</th><th>from</th><th>msg</th></tr></thead><tbody><tr><td>ONE_CHAT_MSG=5</td><td>发送目标id</td><td>发送者id</td><td>所要发送的消息内容</td></tr></tbody></table><h2 id="添加好友"><a href="#添加好友" class="headerlink" title="添加好友"></a>添加好友</h2><table><thead><tr><th>msgid</th><th>id</th><th>friendid</th></tr></thead><tbody><tr><td>ADD_FRIEND_MSG=6</td><td>自身id</td><td>添加目标id</td></tr></tbody></table><h2 id="创建群组"><a href="#创建群组" class="headerlink" title="创建群组"></a>创建群组</h2><table><thead><tr><th>msgid</th><th>id</th><th>groupname</th><th>groupdesc</th></tr></thead><tbody><tr><td>CREATE_GROUP_MSG=101</td><td>创建者用户id</td><td>群组名称</td><td>群组功能描述（群备注）</td></tr></tbody></table><h2 id="创建群组响应"><a href="#创建群组响应" class="headerlink" title="创建群组响应"></a>创建群组响应</h2><table><thead><tr><th>msgid</th><th>errno</th><th>errmsg</th><th>groupid</th></tr></thead><tbody><tr><td>CREATE_GROUP_ACK（201）</td><td>错误码（无错误则为：0）</td><td>错误消息（无错误则为：空）</td><td>创建成功返回创建的id（失败返回：-1）</td></tr></tbody></table><h2 id="加入群组"><a href="#加入群组" class="headerlink" title="加入群组"></a>加入群组</h2><table><thead><tr><th>msgid</th><th>id</th><th>groupid</th></tr></thead><tbody><tr><td>ADD_GROUP_MSG=102</td><td>请求加入者用户id</td><td>要加入的群组id</td></tr></tbody></table><h2 id="加入群组响应"><a href="#加入群组响应" class="headerlink" title="加入群组响应"></a>加入群组响应</h2><table><thead><tr><th>msgid</th><th>userid</th><th>groupid</th><th>errno</th><th>errmsg</th></tr></thead><tbody><tr><td>ADD_GROUP_ACK（202）</td><td>加入者</td><td>群组id</td><td>错误码（无错误则为：0）</td><td>错误消息（无错误则为：空）</td></tr></tbody></table><h2 id="群组聊天"><a href="#群组聊天" class="headerlink" title="群组聊天"></a>群组聊天</h2><table><thead><tr><th>msgid</th><th>id</th><th>name</th><th>groupid</th><th>msg</th><th>time</th></tr></thead><tbody><tr><td>GROUP_CHAT_MSG（103）</td><td>说话用户id</td><td>说话人用户名称</td><td>群组id</td><td>聊天正文内容</td><td>发送消息的时间</td></tr></tbody></table><h2 id="客户端账号注销"><a href="#客户端账号注销" class="headerlink" title="客户端账号注销"></a>客户端账号注销</h2><table><thead><tr><th>msgid</th><th>id</th></tr></thead><tbody><tr><td>LOGINOUT_MSG（405）</td><td>注销的用户ID</td></tr></tbody></table><h1 id="Protobuf模式下数据包格式"><a href="#Protobuf模式下数据包格式" class="headerlink" title="Protobuf模式下数据包格式"></a>Protobuf模式下数据包格式</h1><h2 id="枚举消息类型"><a href="#枚举消息类型" class="headerlink" title="枚举消息类型"></a>枚举消息类型</h2><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token comment">//定义聊天室的服务端和客户端共用的消息包格式</span><span class="token comment">//使用proto3语法</span><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token comment">//定义包声明（命名空间）</span><span class="token keyword">package</span> chatproto<span class="token punctuation">;</span><span class="token comment">/* Protobuf格式定义 * 先按原本msgType制定多个message * 最后我们使用一个总的message ChatProtoMessage作为主要的通信协议 *  * ChatProtoMessage里面使用oneof关键字，规定ChatProtoMessage同一时刻内只能使用同一种类型的消息 */</span><span class="token comment">//！新添加的！离线消息列表类型，可以同时存放点对点的离线消息和群组离线消息</span><span class="token keyword">message</span> <span class="token class-name">OfflineMsgList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">OneChatMsg</span> OneChatOfflineMsg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">GroupChatMsg</span> GroupChatOfflineMsg<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//用户状态。用于用户的在线列表</span><span class="token keyword">message</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> userID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> userName<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> state<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//群组状态，包含用户成员列表</span><span class="token keyword">message</span> <span class="token class-name">GroupInfo</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> groupID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> grouName<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> groupDesc<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">message</span> <span class="token class-name">Users</span><span class="token punctuation">&#123;</span><span class="token comment">//群成员多了一个用户在群组中的角色</span>        <span class="token positional-class-name class-name">User</span> user<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token builtin">bytes</span> groupRole<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Users</span> group_users<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------聊天消息类型--------//</span><span class="token comment">//点对点聊天消息类型</span><span class="token keyword">message</span> <span class="token class-name">OneChatMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> senderID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//消息发送方ID</span>    <span class="token builtin">bytes</span> senderName<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//发送方名称</span>    <span class="token builtin">uint32</span> receiverID<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//消息接收方ID</span>    <span class="token builtin">bytes</span> msg<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token comment">//消息内容</span>    <span class="token builtin">bytes</span> time<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//群组聊天消息类型</span><span class="token keyword">message</span> <span class="token class-name">GroupChatMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> senderID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//消息发送方ID</span>    <span class="token builtin">bytes</span> senderName<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//发送方名称</span>    <span class="token builtin">uint32</span> receiverID<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//接收方ID</span>    <span class="token builtin">uint32</span> groupID<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//消息所在群组ID</span>    <span class="token builtin">bytes</span> msg<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//消息内容正文</span>    <span class="token builtin">bytes</span> time<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//发送消息时的时间</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------账号功能类型--------//</span><span class="token comment">//账户登录请求消息类型</span><span class="token keyword">message</span> <span class="token class-name">AccountLoginMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> accountID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//账号ID（不是名称）</span>    <span class="token builtin">bytes</span> password<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//账号密码</span><span class="token punctuation">&#125;</span><span class="token comment">//账号登录响应消息</span><span class="token keyword">message</span> <span class="token class-name">AccountLoginACK</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> accountID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//账号ID</span>    <span class="token builtin">bytes</span> accountName<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">uint32</span> errNum<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//响应码（错误码），如果值为0时则代表无错误</span>    <span class="token builtin">bytes</span> errmsg<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//响应内容正文（可以记录错误消息）</span>    <span class="token comment">//登录成功后要返回的列表：</span>    <span class="token positional-class-name class-name">OfflineMsgList</span> offlineMsgList<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//离线消息列表</span>    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">User</span> users<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">GroupInfo</span> groupinfo<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//账号注册请求消息类型</span><span class="token keyword">message</span> <span class="token class-name">AccountRegisterMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">bytes</span> accountName<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//注册账号的名称</span>    <span class="token builtin">bytes</span> password<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//账号密码</span><span class="token punctuation">&#125;</span><span class="token comment">//账号注册响应消息</span><span class="token keyword">message</span> <span class="token class-name">AccountRegisterACK</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> accountID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//账号ID</span>    <span class="token builtin">uint32</span> errNum<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//响应码（错误码），如果值为0时则代表无错误</span>    <span class="token builtin">bytes</span> errmsg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//响应内容正文（可以记录错误消息）</span><span class="token punctuation">&#125;</span><span class="token comment">//账号注销消息类型</span><span class="token keyword">message</span> <span class="token class-name">AccountLogoutMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> accountID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//账号ID</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------群组功能消息类型----------//</span><span class="token comment">//创建群组消息类型</span><span class="token keyword">message</span> <span class="token class-name">CreateGroupMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> creatorID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//群组创建者ID</span>    <span class="token builtin">bytes</span> groupName<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//群组名称</span>    <span class="token builtin">bytes</span> groupDesc<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//群组功能描述（群备注）</span><span class="token punctuation">&#125;</span><span class="token comment">//创建群组操作响应</span><span class="token keyword">message</span> <span class="token class-name">CreateGroupACK</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> groupID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//创建成功后返回群组ID</span>    <span class="token builtin">uint32</span> errNum<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//错误码</span>    <span class="token builtin">bytes</span> errmsg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//错误消息</span><span class="token punctuation">&#125;</span><span class="token comment">//加入群组消息类型</span><span class="token keyword">message</span> <span class="token class-name">AddGroupMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> accountID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//申请者ID</span>    <span class="token builtin">uint32</span> groupID<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//群组ID</span><span class="token punctuation">&#125;</span><span class="token comment">//添加群组响应</span><span class="token keyword">message</span> <span class="token class-name">AddGroupACK</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> accountID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//申请加群者ID</span>    <span class="token builtin">uint32</span> groupID<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//群组ID</span>    <span class="token builtin">uint32</span> errNum<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//错误码</span>    <span class="token builtin">bytes</span> errmsg<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//错误信息</span><span class="token punctuation">&#125;</span><span class="token comment">//添加好友请求消息类型</span><span class="token keyword">message</span> <span class="token class-name">AddFriendMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> applicantID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//申请者ID</span>    <span class="token builtin">uint32</span> friendID<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//所要添加的好友ID</span><span class="token punctuation">&#125;</span><span class="token comment">//添加好友响应</span><span class="token keyword">message</span> <span class="token class-name">AddFriendACK</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> applicantID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//申请者ID</span>    <span class="token builtin">uint32</span> errNum<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//错误码</span>    <span class="token builtin">bytes</span> errmsg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//错误信息</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------错误消息------------//</span><span class="token keyword">message</span> <span class="token class-name">ErrorMsg</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> errNum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> errmsg<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//枚举消息类型</span><span class="token keyword">enum</span> <span class="token class-name">MsgType</span><span class="token punctuation">&#123;</span>    ERR_TYPE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//错误类型</span>    <span class="token comment">//一般消息类型</span>    ONE_CHAT_MSG<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">//点对点聊天消息</span>    ADD_FRIEND_MSG<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token comment">//添加好友类型消息</span>    ADD_FRIEND_ACK<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>   <span class="token comment">//添加好友应答信息（这个类型暂时只用来返回找不到该好友ID，功能可扩展）</span>    <span class="token comment">//群组相关消息类型</span>    CREATE_GROUP_MSG<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token comment">//创建群组</span>    ADD_GROUP_MSG<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">;</span>  <span class="token comment">//加入群组</span>    GROUP_CHAT_MSG<span class="token operator">=</span><span class="token number">103</span><span class="token punctuation">;</span> <span class="token comment">//群聊天</span>    <span class="token comment">//群组相关响应</span>    CREATE_GROUP_ACK<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">;</span><span class="token comment">//创建群组响应</span>    ADD_GROUP_ACK<span class="token operator">=</span><span class="token number">202</span><span class="token punctuation">;</span>  <span class="token comment">//加入群组响应</span>    <span class="token comment">//离线消息相关</span>    OFFLINE_LIST_MSG<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">;</span><span class="token comment">//离线消息列表消息类型</span>    <span class="token comment">//客户端登录或注销相关</span>    LOG_MSG<span class="token operator">=</span><span class="token number">401</span><span class="token punctuation">;</span>          <span class="token comment">//登录类型消息</span>    REG_MSG<span class="token operator">=</span><span class="token number">402</span><span class="token punctuation">;</span>          <span class="token comment">//注册类型消息</span>    LOG_MSG_ACK<span class="token operator">=</span><span class="token number">403</span><span class="token punctuation">;</span>      <span class="token comment">//登录响应消息</span>    REG_MSG_ACK<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>      <span class="token comment">//注册成功响应消息</span>    LOGOUT_MSG<span class="token operator">=</span><span class="token number">405</span><span class="token punctuation">;</span>       <span class="token comment">//客户端注销消息</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------全部消息封装在同一个数据包里面，靠MsgID区分类型，并使用oneof只保留对应类型的字段----------//</span><span class="token keyword">message</span> <span class="token class-name">ChatProtoMessage</span><span class="token punctuation">&#123;</span>    <span class="token positional-class-name class-name">MsgType</span> msgtype<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">oneof</span> TypeOfMsg_oneof<span class="token punctuation">&#123;</span>        <span class="token positional-class-name class-name">OneChatMsg</span> oneChatMsg<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">GroupChatMsg</span> groupChatMsg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AccountLoginMsg</span> accountLoginMsg<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AccountLoginACK</span> accountLoginACK<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AccountRegisterMsg</span> accountRegisterMsg<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AccountRegisterACK</span> accountRegisterACK<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AccountLogoutMsg</span> accountLogoutMsg<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">CreateGroupMsg</span> createGroupMsg<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">CreateGroupACK</span> createGroupACK<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AddGroupMsg</span> addGroupMsg<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AddGroupACK</span> addGroupACK<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AddFriendMsg</span> addFriendMsg<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">AddFriendACK</span> addFriendACK<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span>        <span class="token positional-class-name class-name">ErrorMsg</span> errorMsg<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 有了上一篇所提到的预备知识后，我们就可以开始着手开发集群聊天室项目了&lt;/p&gt;
&lt;h1 id=&quot;构建项目目录&quot;&gt;&lt;a href=&quot;#构建项目目录&quot; class=&quot;headerlink&quot; title=&quot;构建项目目录&quot;&gt;&lt;/a&gt;构建项目目录&lt;/h1&gt;&lt;p&gt;首先我们把项目的目录构</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/tags/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>暑假冲刺秋招项目--C++集群聊天服务器（预备知识篇）</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E6%9A%91%E5%81%87%E5%86%B2%E5%88%BA%E7%A7%8B%E6%8B%9B%E9%A1%B9%E7%9B%AE-C++%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%89/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E6%9A%91%E5%81%87%E5%86%B2%E5%88%BA%E7%A7%8B%E6%8B%9B%E9%A1%B9%E7%9B%AE-C++%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%89/</id>
    <published>2022-07-16T06:38:33.000Z</published>
    <updated>2022-07-17T08:56:35.105Z</updated>
    
    <content type="html"><![CDATA[<p> 本C++集群聊天服务器项目于2022/7/16开始开发，为一个暑期项目</p><p>相比于之前的WebServer，本项目用到了<strong>JSON</strong>、<strong>muduo</strong>、<strong>nginx负载均衡</strong>、<strong>CMake</strong>等新功能</p><p>另外，本项目是在Windows环境中通过VSCode的SSH连接至虚拟机Linux开发的，也就是说本质上还是基于Linux环境</p><p>下面来介绍一些预备知识和做一些准备工作</p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON不必多说，已经算挺熟悉的，它可以通过序列化和反序列化来传输或解析一个数据集，百度百科对于JSON解释如下</p><blockquote><p>JSON（JavaScript Object Notation, JS对象简谱）是一种轻量级的数据交换格式。</p><p>它基于 ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。</p><p>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote><p>回到来项目中，这里JSON用的是一个第三方库，只用引入一个<code>json.hpp</code>头文件就可以使用了，非常轻量方便</p><p>另外，这个json除了可以对普通数据类型<code>数组</code>、<code>int</code>、<code>string</code>等进行序列化外，还可以对STL中的<code>vector&lt;T&gt;</code>和<code>map&lt;K,V&gt;</code>进行序列化</p><p><strong>普通数据类型：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">json js<span class="token punctuation">;</span><span class="token comment">// 添加数组</span>js<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 添加key-value</span>js<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zhang san"</span><span class="token punctuation">;</span><span class="token comment">// 添加对象</span>js<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"zhang san"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>js<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"liu shuo"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello china"</span><span class="token punctuation">;</span><span class="token comment">// 上面等同于下面这句一次性添加数组对象</span>js<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"zhang san"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"liu shuo"</span><span class="token punctuation">,</span> <span class="token string">"hello china"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> js <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出结果为：&#123;"id":[1,2,3,4,5],msg":&#123;"liu shuo":"hello china","zhang san":"hello world"&#125;,"name":"zhangsan"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>STL类型：</strong></p><p>除了vector和map，该json库还能存储<code>std::array, std::vector, std::deque, std::forward_list, std::list, std::set, std::multiset, std::unordered_set, std::unordered_multiset</code>等容器</p><p>另外像<code>std::map, std::multimap, std::unordered_map, std::unordered_multimap</code>，nlohmann也是支持的，但是需要注意的是其中的Key被构造为std::string保存。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">json js<span class="token punctuation">;</span><span class="token comment">// 直接序列化一个vector容器</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>js<span class="token punctuation">[</span><span class="token string">"list"</span><span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">;</span><span class="token comment">// 直接序列化一个map容器</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"黄山"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"华山"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"泰山"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>js<span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>js<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果为：&#123;"list":[1,2,5],"path":[[1,"黄山"],[2,"华山"],[3,"泰山"]]&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，除了直接cout&lt;&lt;输出json序列化结果外，还可以将其<strong>转为string类型再输出</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string jstr<span class="token operator">=</span>js<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dump()返回JSON对象中存储的原始string值。</span>cout<span class="token operator">&lt;&lt;</span>jstr<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解析json（反序列化）</strong>功能操作如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 模拟从网络接收到json字符串，通过json::parse函数把json字符串专程json对象</span>json js2 <span class="token operator">=</span> json<span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里只是展示了该JSON库的一小部分功能，更多的可以上网搜索：nlohmann json</p><h1 id="muduo"><a href="#muduo" class="headerlink" title="muduo"></a>muduo</h1><p>muduo是陈硕大神个人开发的C++的TCP网络编程库。muduo基于Reactor模式实现。</p><p><strong>使用muduo前还需要安装Boost库，这是由于muduo依赖于Boost库</strong></p><p>muduo网络库给用户提供了两个主要的类</p><ul><li>TcpServer：用于编写服务器程序的</li><li>TcpClient：用于编写客户端程序的</li></ul><p>muduo有个好处就是它把网络I/O和业务代码区分开来了：</p><p>使用时我们只用关心<strong>用户连接和断开事件</strong>以及<strong>用户的可读可写事件</strong>就可以了，也就是说我们只用编写这两种事件的接口代码即可，其它如何连接、epoll、线程池等事项muduo帮我们完成了</p><p>使用muduo编写服务端时候代码模式比较固定，基本上只用修改<strong>用户连接事件回调函数</strong>、<strong>用户可读写事件回调函数</strong>以及<strong>服务端名称</strong>就行了</p><p>在编写完事件回调函数后，需要做的就是在服务端对象的构造函数中进行回调函数绑定，由于成员函数的参数有个隐式参数<code>this</code>的原因，固不能直接在调用<code>setConnectionCallback()</code>时将成员函数方法写进去里边</p><p>这里就要用到<code>&lt;functional&gt;</code>头文件中的<code>std::bind()</code>绑定了，同时也用到了<code>std::placeholders::_1</code>参数占位符</p><p><strong>注意：</strong>由于回调函数是类的成员函数，成员函数有个隐式参数<code>this</code>，因此这里也要补上</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_server<span class="token punctuation">.</span><span class="token function">setConnectionCallback</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ChatServer<span class="token operator">::</span>onConnection<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>std<span class="token operator">::</span>placeholders<span class="token operator">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是一个简单的使用muduo网络库服务端模板例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//基于muduo网络库开发的服务器程序实例</span><span class="token comment">//muduo_server.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/net/TcpServer.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;muduo/net/EventLoop.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token operator">::</span>net<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> muduo<span class="token punctuation">;</span><span class="token comment">/** * 1.组合TcpServer对象 * 2.创建EventLoop事件循环对象指针 * 3.明确TcpServer构造函数需要什么参数（有三个必要的），输出ChatServer的构造函数 * 4.在当前服务器类的构造函数中，注册处理连接的回调函数和处理读写事件回调函数 * 5.设置合适的服务端线程数量，muduo库会自己分配I/O线程和工作线程 */</span><span class="token keyword">class</span> <span class="token class-name">ChatServer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ChatServer</span><span class="token punctuation">(</span>EventLoop<span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token comment">//事件循环</span>                <span class="token keyword">const</span> InetAddress<span class="token operator">&amp;</span> listenAddr<span class="token punctuation">,</span>  <span class="token comment">//IP+Port（端口）</span>                <span class="token keyword">const</span> string<span class="token operator">&amp;</span> nameArg<span class="token punctuation">)</span>  <span class="token comment">//服务器名字</span>        <span class="token operator">:</span><span class="token function">_server</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span>listenAddr<span class="token punctuation">,</span>nameArg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//给服务器注册用户连接的创建和断开回调</span>        <span class="token comment">//因为回调函数onConnection是成员函数，有个隐式this指针</span>        <span class="token comment">//这就导致和原本setConnectionCallback要求的回调函数格式不一致</span>        <span class="token comment">//因此这里就要用到std::bind()绑定函数</span>        <span class="token comment">//_1为参数占位符</span>        _server<span class="token punctuation">.</span><span class="token function">setConnectionCallback</span><span class="token punctuation">(</span>            std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ChatServer<span class="token operator">::</span>onConnection<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>std<span class="token operator">::</span>placeholders<span class="token operator">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给服务器注册用户读写事件回调</span>        _server<span class="token punctuation">.</span><span class="token function">setMessageCallback</span><span class="token punctuation">(</span>            std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onMessage<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>_1<span class="token punctuation">,</span>_2<span class="token punctuation">,</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置服务端的线程数量（当>=2时会自动把其中一个作为I/O线程，其它为工作线程）</span>        <span class="token comment">//这里的4则表示 1个I/O 3个工作线程</span>        _server<span class="token punctuation">.</span><span class="token function">setThreadNum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//开启事件循环</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        _server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    muduo<span class="token operator">::</span>net<span class="token operator">::</span>TcpServer _server<span class="token punctuation">;</span>  <span class="token comment">// #1.定义个服务器对象</span>    muduo<span class="token operator">::</span>net<span class="token operator">::</span>EventLoop<span class="token operator">*</span> _loop<span class="token punctuation">;</span>   <span class="token comment">// #2.事件循环指针</span>    <span class="token comment">//专门处理用户的连接和断开 回调函数</span>    <span class="token keyword">void</span> <span class="token function">onConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//打印连接或断开的客户端ip和port</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">-></span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//peerAddress对端信息</span>            cout<span class="token operator">&lt;&lt;</span>conn<span class="token operator">-></span><span class="token function">peerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" -> "</span><span class="token operator">&lt;&lt;</span>                conn<span class="token operator">-></span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" state: online ."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>conn<span class="token operator">-></span><span class="token function">peerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" -> "</span><span class="token operator">&lt;&lt;</span>                conn<span class="token operator">-></span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" state: offline ."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                        conn<span class="token operator">-></span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于close(fd)，注意是对端的fd</span>            <span class="token comment">//_loop->quit(); //关闭服务端</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//专门处理用户读写事件的回调函数</span>    <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpConnectionPtr<span class="token operator">&amp;</span> conn<span class="token punctuation">,</span>    <span class="token comment">//连接</span>                    Buffer<span class="token operator">*</span> buffer<span class="token punctuation">,</span>    <span class="token comment">//缓冲区</span>                    Timestamp time<span class="token punctuation">)</span> <span class="token comment">//接收到数据的时间信息</span>    <span class="token punctuation">&#123;</span>        string buf<span class="token operator">=</span>buffer<span class="token operator">-></span><span class="token function">retrieveAllAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把接收的数据全部转为string</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"recv data: "</span><span class="token operator">&lt;&lt;</span>buf<span class="token operator">&lt;&lt;</span><span class="token string">"\ntime: "</span><span class="token operator">&lt;&lt;</span>time<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">//原封不动返回数据给客户端</span>        conn<span class="token operator">-></span><span class="token function">send</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EventLoop loop<span class="token punctuation">;</span> <span class="token comment">//相当于创建了epoll</span>    InetAddress <span class="token function">addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ChatServer <span class="token function">server</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>loop<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"ChatServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建服务端对象</span>    server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于listenfd == epoll_ctl() ==> epoll</span>    loop<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//相当于以阻塞调用epoll_wait，等待连接事件或读写事件</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译指令为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 注意 -lmuduo_net 要在 -lmuduo_base 前面g++ muduo_server.cpp -o server -lmuduo_net -lmuduo_base -lpthread<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><p>CMake是一个跨平台的安装（<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91/1258343">编译</a>）工具，可以用简单的语句来描述所有平台的安装(编译过程)</p><p>CMake使用简单方便，可以跨平台，构建项目编译环境。尤其比直接写Makefile简单（在构建大型工程编译<br>时，需要写大量的文件依赖关系），可以通过简单的CMake生成负责的Makefile文件。  </p><p>这里以编译<code>testMuduo</code>项目为例来编写CMake实例，首先创建一个CMakeLists.txt文件，我们的CMake代码就在里面编写：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># CMakeLists.txt</span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span>    <span class="token comment">#要求系统CMake最小的版本</span><span class="token keyword">project</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>   <span class="token comment">#工程名字</span><span class="token comment"># 配置编译选项，这里是在CMAKE_CXX_FLAGS基础上后面再加个 -g</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS</span><span class="token punctuation">&#125;</span> -g<span class="token punctuation">)</span><span class="token comment"># 配置头文件搜索路径</span><span class="token comment">#　include_directories()</span><span class="token comment"># 配置库文件搜索路径</span><span class="token comment"># link_directories()</span><span class="token comment"># 设置需要编译的源文件列表</span><span class="token keyword">set</span> <span class="token punctuation">(</span>SRC_LIST muduo_server.cpp<span class="token punctuation">)</span><span class="token comment"># 把指定路径（这里.指当前目录）下的所有源文件名字加入到变量SRC_LIST中</span><span class="token comment"># aux_source_directory(. SRC_LIST)</span><span class="token comment"># 表示生成可执行文件server，由变量SRC_LIST源文件编译而来</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>server <span class="token punctuation">$&#123;</span>SRC_LIST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 链接库，表示server程序由后面几个库链接（相比直接g++命令不用加-l）</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>server muduo_net muduo_base pthread<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写好后在当前目录下运行指令即可构建项目：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cmake .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面这种方式会生成出来一大堆东西，其中就包括Makefile，之后我们通过<code>make</code>指令执行生成命令就好了</p><p>我们还可以改善一下，默认执行<code>cmake .</code>指令后，CMake生成了一大堆东西，我们可以将其分类放好，比如指定生成的程序放在哪个文件夹等等</p><p>在上面<code>CMakeLists.txt</code>添加一行代码即可：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 设置可执行文件最终的存储目录在 当前目录/bin 下</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/bin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时别忘了要创建一个<code>bin</code>目录</p><p>弄好这两个事情后，<code>make</code>所生成的可执行文件就会在<code>./bin</code>目录下了</p><h2 id="以小见大-—-一个项目合适的目录："><a href="#以小见大-—-一个项目合适的目录：" class="headerlink" title="以小见大 — 一个项目合适的目录："></a>以小见大 — 一个项目合适的目录：</h2><p>通常在github上看到别人的项目是有很多个文件夹分好类的，通常由以下几部分组成</p><ul><li>bin：放可执行文件</li><li>lib：放程序生成的链接库</li><li>include：放项目的头文件</li><li>src：放项目的源代码文件</li><li>build：放编译的中间文件</li><li>example：放项目的实例文件</li><li>thirdparty：放第三方库，比如JSON库<code>json.hpp</code></li><li>CMakeLists.txt</li><li>autobuild.sh：自己编写的自动生成项目的shell脚本</li></ul><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>该项目也需要用到数据库，这里选择的依然是MySQL，要创建总共5个表，代码如下</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 专门给聊天室的数据库chatcreate database if not exists chat;use chat;# 用户表# drop table if exists &#96;user&#96;;create table if not exists &#96;user&#96;(&#96;id&#96; int auto_increment comment &#39;用户id&#39;,    &#96;name&#96; varchar(50) not null unique comment &#39;用户名&#39;,    &#96;password&#96; varchar(50) not null comment &#39;用户密码&#39;,    &#96;state&#96; enum(&#39;online&#39;,&#39;offline&#39;) default &#39;offline&#39; comment &#39;当前登录状态&#39;,    primary key(&#96;id&#96;))engine&#x3D;InnoDB default charset&#x3D;gbk;desc &#96;user&#96;;# 好友表# drop table if exists &#96;friend&#96;;create table if not exists &#96;friend&#96;(&#96;userid&#96; int not null comment &#39;用户id&#39;,    &#96;friendid&#96; int not null comment &#39;好友id&#39;,    primary key(&#96;userid&#96;,&#96;friendid&#96;))engine&#x3D;InnoDB default charset&#x3D;gbk;desc &#96;friend&#96;;# 群组表create table if not exists &#96;allgroup&#96;(&#96;id&#96; int auto_increment comment &#39;群组id&#39;,    &#96;groupname&#96; varchar(50) not null unique comment &#39;群组名称&#39;,    &#96;groupdesc&#96; varchar(200) default &#39;&#39; comment &#39;群组功能描述&#39;,    primary key(&#96;id&#96;))engine&#x3D;InnoDB default charset&#x3D;gbk;desc &#96;allgroup&#96;;# 群组成员表create table if not exists &#96;groupuser&#96;(&#96;groupid&#96; int not null comment &#39;群组id&#39;,    &#96;userid&#96; int not null comment &#39;组员id&#39;,    &#96;grouprole&#96; enum(&#39;creator&#39;,&#39;normal&#39;) default &#39;normal&#39; comment &#39;组内角色&#39;,    primary key(&#96;groupid&#96;,&#96;userid&#96;))engine&#x3D;InnoDB default charset&#x3D;gbk;desc &#96;groupuser&#96;;# 离线信息表create table if not exists &#96;offlinemessage&#96;(&#96;userid&#96; int not null comment &#39;用户id&#39;,    &#96;message&#96; varchar(500) not null comment &#39;离线信息（存储Json字符串）&#39;)engine&#x3D;InnoDB default charset&#x3D;gbk;desc &#96;offlinemessage&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 本C++集群聊天服务器项目于2022/7/16开始开发，为一个暑期项目&lt;/p&gt;
&lt;p&gt;相比于之前的WebServer，本项目用到了&lt;strong&gt;JSON&lt;/strong&gt;、&lt;strong&gt;muduo&lt;/strong&gt;、&lt;strong&gt;nginx负载均衡&lt;/strong&gt;</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="集群聊天服务器" scheme="http://sakura-pub.top/tags/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2022-07-13T16:15:46.000Z</published>
    <updated>2022-07-17T09:41:05.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程间通信种类"><a href="#进程间通信种类" class="headerlink" title="进程间通信种类"></a>进程间通信种类</h1><p>进程间通信方式通常有6种：</p><ol><li>管道</li><li>消息队列</li><li>共享内存</li><li>信号量</li><li>信号</li><li>Socket</li></ol><p>这些都需要牢牢记住，并且知道他们各自的优缺点以及使用场景</p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>管道分为匿名管道和有名管道</p><p>匿名管道代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//进程间通信之 --- 管道</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pipe_arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"create pipe error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pid_t pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//子进程</span>                <span class="token function">close</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> message<span class="token operator">=</span><span class="token string">"hello father , this is child!"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">write</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//父进程</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork ok! pid is %d\n"</span><span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is Father, I read: %s\n"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father read over!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"father read error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h1><p>共享内存又有两种方式，一个是mmap，一个是shm，这里先放shm的先</p><h2 id="shm"><a href="#shm" class="headerlink" title="shm"></a>shm</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//进程间通信之 --- 共享内存</span><span class="token comment">//共享内存有两种方式：mmap、shm</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_NAME</span> <span class="token string">"./shm.txt"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROJ_ID</span> <span class="token expression"><span class="token number">6</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    key_t key<span class="token operator">=</span><span class="token function">ftok</span><span class="token punctuation">(</span>FILE_NAME<span class="token punctuation">,</span>PROJ_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ftok error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token operator">&lt;&lt;</span>key<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> shm_id<span class="token operator">=</span><span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span>IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到一个共享内存标识符或创建一个共享内存对象并返回共享内存标识符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shm_id<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"shm_id error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"shm_id: "</span><span class="token operator">&lt;&lt;</span>shm_id<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buff<span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//子进程</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            buff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shm_id<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//映射共享内存，得到虚拟地址</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Message%d]: %s"</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">shmdt</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解除共享内存</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//父进程</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            buff<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shm_id<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"hello son, this is father!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">shmdt</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解除共享内存</span>        <span class="token punctuation">&#125;</span>                        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">shmctl</span><span class="token punctuation">(</span>shm_id<span class="token punctuation">,</span>IPC_RMID<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除这片共享内存</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//进程间通信之 --- 共享内存（mmap）</span><span class="token comment">//共享内存有两种方式：mmap、shm</span><span class="token comment">//函数原型</span><span class="token comment">//void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);</span><span class="token comment">/** 参数：*  addr: 指定映射区的首地址。通常传NULL，让内核自动分配*  length: 映射区的长度，小于等于文件实际长度*  port: 共享映射区的读写属性。PORT_READ(只读)、PORT_WRITE (只写)、PORT_READ | PORT_WRITE（读写）*  flags: 共享内存的共享属性。MAP_SHARED、MAP_PRIVATE、MAP_ANONYMOUS (MAP_ANON)*  fd: 用于创建共享映射区文件的文件描述符*  offes: 偏移位置，4K的整数倍** 返回值：* 成功，返回映射区的首地址*  失败：MAP_FILED, 这个宏展开后是：(void *)(-1) ，同时设置errno*/</span><span class="token comment">//int munmap(void *addr, size_t length);   //释放共享内存映射区</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_NAME</span> <span class="token string">"./mmap.txt"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFSIZE</span> <span class="token expression"><span class="token number">512</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"mmap.txt"</span><span class="token punctuation">,</span>O_RDWR <span class="token operator">|</span> O_CREAT <span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open() error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open ok!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buff<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>BUFFSIZE<span class="token punctuation">,</span>PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立mmap</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>buff<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭fd不影响内存映射</span>    <span class="token comment">//测试用例，子进程写，父进程读</span>    <span class="token keyword">int</span> pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//子进程</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string <span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"[Message"</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]: this is son, hello father!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO.%d Message push.\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//父进程</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>buff<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">munmap</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>BUFFSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>消息队列也有分两种情况，一个是System V的消息队列msg（需要头文件&lt;sys/msg.h&gt;），另个是POSIX的mq（需要头文件&lt;mqueue.h&gt;）</p><p>这里只展示msg，需要注意的是msg一定要有个消息结构体（下面代码为<code>struct msg</code>），该结构体还必须有个long类型成员，表示传输类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//进程间通信之 --- 消息队列</span><span class="token comment">//这里用的是 System V的消息队列，还有POSIX的消息队列需要头文件 &lt;mqueue.h></span><span class="token comment">/** * int msgget(key_t key, int msgflg);//创建或打开msgget() * int msgctl(int msqid, int cmd, struct msqid_ds *buf);//控制(删除)msgctl() *  * *发送消息 * int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); *  * *接收 * ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_NAME</span> <span class="token string">"./msg.txt"</span></span><span class="token keyword">struct</span> <span class="token class-name">msg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> type<span class="token punctuation">;</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//定义key</span>    key_t key<span class="token operator">=</span><span class="token function">ftok</span><span class="token punctuation">(</span>FILE_NAME<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> msgid<span class="token operator">=</span><span class="token function">msgget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>IPC_CREAT<span class="token operator">|</span><span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msgid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"msgget error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">msg</span> msgs<span class="token punctuation">;</span>    <span class="token comment">//测试用例，父进程读取消息，子进程发送消息</span>    <span class="token keyword">int</span> pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//子进程</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            msgs<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            string <span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"NO."</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" this is son , hello father!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span>message<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ret_value <span class="token operator">=</span> <span class="token function">msgsnd</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msgs<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子进程发送消息</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret_value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"son send error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span>message<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//发送over让父进程结束循环</span>        msgs<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span>message<span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret_value<span class="token operator">=</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msgs<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret_value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"son send over error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//父进程</span>        <span class="token keyword">int</span> ret_value<span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//保底计数器，防止死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">/*接收消息队列 msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);            * msgtyp：从消息队列内读取的消息形态。如果值为零，            * 则表示消息队列中的所有消息都会被读取            * msgflg : 0 表示阻塞等待，IPC_NOWAIT不等待            */</span>              ret_value<span class="token operator">=</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msgs<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret_value<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"father msgrcv error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father read[ret:%d type:%ld]: %s\n"</span><span class="token punctuation">,</span>ret_value<span class="token punctuation">,</span>msgs<span class="token punctuation">.</span>type<span class="token punctuation">,</span>msgs<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span>message<span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">--</span>count<span class="token punctuation">;</span>            <span class="token comment">//sleep(1);</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father break loop!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">msgctl</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span>IPC_RMID<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程间通信种类&quot;&gt;&lt;a href=&quot;#进程间通信种类&quot; class=&quot;headerlink&quot; title=&quot;进程间通信种类&quot;&gt;&lt;/a&gt;进程间通信种类&lt;/h1&gt;&lt;p&gt;进程间通信方式通常有6种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;管道&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>跳表项目总结</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E8%B7%B3%E8%A1%A8%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E8%B7%B3%E8%A1%A8%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2022-07-01T13:54:40.000Z</published>
    <updated>2022-07-01T16:53:28.587Z</updated>
    
    <content type="html"><![CDATA[<p> 跳表项目相对于WebServer比较简单，实际上就是实现了跳表这一个数据结构，其中每个节点存放的数据是一个<code>Node&lt;K,V&gt;</code>的结构，和哈希表有点类似</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>该跳表主要功能有：</p><ul><li>插入元素</li><li>删除元素</li><li>显示列表</li><li>将数据存放为文件类型</li><li>加载文件数据到内存中</li></ul><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>跳表插入数据是先从第一列数组最上方开始，即左上角位置开始寻找插入位置，这个位置的层也是跳表的当前最高层</p><p>假设目前跳表层数为h，如果遇到当前层<code>h</code>没有合适位置插入，则需要往下一层<code>h-1</code>查找，逐渐查找到第<code>0</code>层的位置便是插入位置</p><p>而在每次从当前层往下层转换时，都会有个<code>Node&lt;K,V&gt;* update[_max_level+1]</code>节点数组来记录当前层的转换位置，例如在下列图示中，我们要插入50的值，而<code>update</code>数组则会记录：第四层的1、第三层的10、第二层和第一层的30</p><p>这是为了在最底层插入50后，随机判断上面的层是否要添加50这个数（提高查找效率），而这个随机判断法概率为1/2</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** *                            +------------+*                            |  insert 50 |*                            +------------+* level 4     +-->1+                                                      100*                  |*                  |                      insert +----+* level 3         1+-------->10+---------------> | 50 |          70       100*                                                |    |*                                                |    |* level 2         1          10         30       | 50 |          70       100*                                                |    |*                                                |    |* level 1         1    4     10         30       | 50 |          70       100*                                                |    |*                                                |    |* level 0         1    4   9 10         30   40  | 50 |  60      70       100*                                                +----+**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随机判断法在代码中函数名为<code>int SkipList&lt;K,V&gt;::get_random_level()</code></p><p>代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//获取随机层数</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token keyword">typename</span> <span class="token class-name">V</span><span class="token operator">></span><span class="token keyword">int</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token operator">::</span><span class="token function">get_random_level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">++</span>k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>_max_level<span class="token punctuation">)</span><span class="token operator">?</span>k<span class="token operator">:</span>_max_level<span class="token punctuation">;</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><h2 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h2><p>注意：顺序插入为for循环从0开始到数据总数逐个数插入（ for(0 ~insertNum) ）</p><p>随机插入则是在插入数据总数范围间取随机数（ rand()%insertNum ）</p><p>在设定跳表最高层为<strong>10层</strong>时：</p><p>顺序插入<strong>十万条</strong>数据平均耗时：210毫秒；随机插入<strong>十万条</strong>数据平均耗时：92毫秒</p><p>顺序插入<strong>五十万条</strong>数据平均耗时：3850毫秒；随机插入<strong>五十万条</strong>数据平均耗时：380毫秒</p><p>顺序插入<strong>百万条</strong>数据平均耗时：21473毫秒；随机插入<strong>百万条</strong>数据平均耗时：744毫秒</p><p>而在设定跳表最高层为<strong>20层</strong>时：</p><p>顺序插入<strong>十万条</strong>数据平均耗时：132毫秒；随机插入<strong>十万条</strong>数据平均耗时：92毫秒</p><p>顺序插入<strong>五十万条</strong>数据平均耗时：683毫秒；随机插入<strong>五十万条</strong>数据平均耗时：305毫秒</p><p>顺序插入<strong>百万条</strong>数据平均耗时：1443毫秒；随机插入<strong>百万条</strong>数据平均耗时：600毫秒</p><h2 id="查找数据（还未完成）"><a href="#查找数据（还未完成）" class="headerlink" title="查找数据（还未完成）"></a>查找数据（还未完成）</h2><p>在设定跳表最高层为10层时（数据为随机生成）：</p><p>十万条数据中查找十条数据平均耗时</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 跳表项目相对于WebServer比较简单，实际上就是实现了跳表这一个数据结构，其中每个节点存放的数据是一个&lt;code&gt;Node&amp;lt;K,V&amp;gt;&lt;/code&gt;的结构，和哈希表有点类似&lt;/p&gt;
&lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>WebServer项目解析</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/WebServer%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/WebServer%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2022-06-15T05:43:43.000Z</published>
    <updated>2022-07-13T16:16:36.237Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是用来记录并复习之前写过的一个TinyWebServer项目，希望可以梳理一下思路，更进一步吸收里面的知识点，前面几个部分是网上找的知识点总结，后面也有自己对项目的分析</p><h1 id="WebServer总体概述"><a href="#WebServer总体概述" class="headerlink" title="WebServer总体概述"></a>WebServer总体概述</h1><ul><li>epoll 的 <code>ET</code>和<code>LT</code>模式</li><li>MySQL数据库</li><li>数据库连接池</li><li>线程池</li><li>日志系统</li><li>定时器</li><li>Reactor模式（设计模式：反应堆模式）</li><li>HTTP</li><li>大端序和小端序的互转</li><li>读写缓冲区</li></ul><h1 id="WebServer大概的工作流程"><a href="#WebServer大概的工作流程" class="headerlink" title="WebServer大概的工作流程"></a>WebServer大概的工作流程</h1><p>这里有张图可以概括整个Server的工作流程</p><p><img src="https://pic.rmb.bdstatic.com/bjh/0af1379f52f5a695800cfb33599035fa.jpeg" alt="v2-c16b9b3c7c2e279227204a88fc95d1bb_r.jpg"></p><p>分点来说如下：</p><ol><li>主线程监听连接</li><li>主线程让一个epoll监听活跃的文件描述符</li><li>处理完连接进来的文件描述符之后开工作线程</li><li>工作线程处理任务（读和写任务是分开的，不一定是同一个线程共同操作）</li><li>http_conn是一个负责HTTP请求的响应和处理的类，一个用户一个实例；同时在解析请求报文时有主从状态机，从状态机是负责读取报文的一行，主状态机是负责对该行数据进行解析</li></ol><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>对于服务器的效率，这里有几个方面可以来优化</p><h2 id="半同步半反应堆（半同步半异步）"><a href="#半同步半反应堆（半同步半异步）" class="headerlink" title="半同步半反应堆（半同步半异步）"></a>半同步半反应堆（半同步半异步）</h2><ul><li>半同步半反应堆是其中一种高效的并发模式实现方式，另一种并发模式为领导者/追随者模式</li><li>并发模式指的是I/O处理单元和多个逻辑单元之间协调完成任务的方法</li><li>半同步/半反应堆的内容：<ul><li>异步线程只有一个，由主线程充当。负责监听所有socket上的事件。如果有新连接请求，主线程接受得到新的连接socket，往epoll内核事件表中注册socket上的读写事件。如果连接上有读写事件，主线程将该连接socket插入请求队列。所有工作线程（同步线程）睡眠在请求队列上，当有任务到来，通过竞争的方式获得任务管理权。</li><li>上面的方式采用的事件处理模式为<strong>Reactor模式</strong>。要求工作线程自己从socket上读取客户请求和往socket上写入服务器应答。</li><li>也可以采用模拟的<strong>Proactor事件</strong>处理模式。要求主线程完成数据的读写，主线程将应用程序数据、任务类型等信息封装成一个任务对象，然后插入请求队列；工作线程从请求队列中取得任务对象后，直接处理即可，不需要读写操作。</li></ul></li><li>半同步/半反应堆的缺点：<ul><li>主线程和工作线程共享请求队列。主线程添加任务、工作线程取出任务，都需要对请求队列进行加锁保护，从而耗费cpu时间。</li><li>每个工作线程同一个时间只能处理一个客户请求</li></ul></li></ul><h2 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h2><ul><li>为每个客户端分配一个进程来处理请求。</li><li>服务器的主进程负责监听客户的连接，一旦与客户端连接完成，accept() 函数就会返回一个「已连接 Socket」，这时就通过 <code>fork()</code> 函数创建一个子进程，实际上就把父进程所有相关的东西都<strong>复制</strong>一份，包括文件描述符、内存地址空间、程序计数器、执行的代码等。<ul><li>根据返回值来区分是父进程还是子进程，如果返回值是 0，则是子进程；如果返回值是其他的整数，就是父进程。    <ul><li>因为子进程会<strong>复制父进程的文件描述符</strong>，于是就可以直接使用「已连接 Socket 」和客户端通信了。 </li><li>子进程不需要关心「监听 Socket」，只需要关心「已连接 Socket」；父进程则相反，将客户服务交给子进程来处理，因此父进程不需要关心「已连接 Socket」，只需要关心「监听 Socket」。 </li></ul></li></ul></li><li>可能出现的问题：<ul><li>当「子进程」退出时，实际上内核里还会保留该进程的一些信息，也是会占用内存的，如果不做好“回收”工作，就会变成僵尸进程，随着僵尸进程越多，会慢慢耗尽我们的系统资源。    <ul><li>父进程要“善后”好自己的孩子，怎么善后呢？那么有两种方式可以在子进程退出后回收资源，分别是调用 <code>wait()</code> 和 <code>waitpid()</code> 函数。 </li><li>进程的上下文切换不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。</li></ul></li></ul></li></ul><h2 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h2><ul><li>线程是运行在进程中的一个“逻辑流”，单进程中可以运行多个线程，同进程里的线程可以共享进程的部分资源的，比如<strong>文件描述符列表、进程空间、代码、全局数据、堆、共享库等，这些共享资源</strong>在上下文切换时是不需要切换，而只需要切换线程的<strong>私有数据、寄存器等不共享的数据</strong>，因此同一个进程下的线程上下文切换的开销要比进程小得多。 </li><li>当服务器与客户端 TCP 完成连接后，通过 <code>pthread_create()</code> 函数创建线程，然后将「已连接 Socket」的文件描述符传递给线程函数，接着在线程里和客户端进行通信，从而达到并发处理的目的。 </li><li>注意事项 ： <ul><li>父进程accept后会把socket放入一个队列。然后线程从这个队列中取socket做操作 </li><li>这个队列是全局的，每个线程都会操作，为了避免多线程竞争，线程在操作这个队列前要加锁。</li></ul></li></ul><h2 id="Proactor模式和Reactor模式"><a href="#Proactor模式和Reactor模式" class="headerlink" title="Proactor模式和Reactor模式"></a>Proactor模式和Reactor模式</h2><p>服务器程序通常需要处理三类事件：I/O事件，信号及定时事件。有两种事件处理模式即<strong>Proactor模式</strong>和<strong>Reactor模式</strong>：</p><ul><li>Reactor模式：要求主线程（I/O处理单元）只负责监听文件描述符上是否有事件发生（可读、可写），若有，则立即通知工作线程（逻辑单元），将socket可读可写事件放入请求队列，交给工作线程处理。</li><li>Proactor模式：将所有的I/O操作都交给主线程和内核来处理（进行读、写），工作线程仅负责处理逻辑，如主线程读完成后<code>users[sockfd].read()</code>，选择一个工作线程来处理客户请求<code>pool-&gt;append(users + sockfd)</code>。</li></ul><p>有关更详细的介绍，可以点<a href="https://www.zhihu.com/question/26943938">这里</a></p><p>下面为项目中运用了两个模式的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_with_thread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer<span class="token operator">*</span> timer<span class="token operator">=</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor模式</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_actormodel<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users<span class="token operator">+</span>sockfd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//while</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"deal with the client(%s)"</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>            m_pool<span class="token operator">-></span><span class="token function">append_p</span><span class="token punctuation">(</span>users<span class="token operator">+</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="大端序小端序"><a href="#大端序小端序" class="headerlink" title="大端序小端序"></a>大端序小端序</h1><p><strong>网络序是大端字节序</strong></p><p><strong>大端字节序</strong>是看着一样的，数据低位存在内存大位(高位)</p><p>小端字节序看着是反过来的，数据低位存在内存小位(低位)</p><p>字节序的单位应该是字节，所以string(char为组织结构)是没有大小端之分的。</p><p>但是看int和short是能看出来是大端字节序还是小端字节序，借助union。</p><p>有现成的转换函数。BSD Socket提供了封装好的转换接口，方便程序员使用。包括从主机字节序到网络字节序的转换函数： htons、htonl；从网络字节序到主机字节序的转换函数：ntohs、ntohl。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** h   - host 主机，主机字节序* to  - 转换成什么* n   - network  网络字节序* s   - short  unsigned short * l   - long  unsigned int**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="HTTP相关"><a href="#HTTP相关" class="headerlink" title="HTTP相关"></a>HTTP相关</h1><h2 id="一次HTTP请求响应的流程"><a href="#一次HTTP请求响应的流程" class="headerlink" title="一次HTTP请求响应的流程"></a>一次HTTP请求响应的流程</h2><ul><li>域名解析 </li><li>发起TCP的3次握手 </li><li>建立TCP连接后发起http请求 </li><li>服务器响应http请求，浏览器得到html代码 </li><li>浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） </li><li>浏览器对页面进行渲染呈现给用户 </li></ul><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><ul><li>GET：用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器 </li><li>POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。 </li><li>PUT：传输文件，报文主体中包含文件内容，保存到对应URI位置。 </li><li>HEAD：获得豹纹不，与GET类似，只是不返回报文主体，一般用于验证URI是否有效。 </li><li>DELETE：删除文件，与PUT相反，删除对应URI位置文件。 </li><li>OPTIONS：查询相应URI支持的HTTP方法。 </li></ul><h2 id="GET、POST区别"><a href="#GET、POST区别" class="headerlink" title="GET、POST区别"></a>GET、POST区别</h2><ul><li><p>get重点在从服务器上获取资源；</p></li><li><p>post重点在向服务器发送数据；</p></li><li><p>get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用”?”连接，多个请求数据间用”&amp;”连接，如<code>http://127.0.0.1/Test/login.action?name=admin&amp;password=admin</code>，这个过程用户是可见的； </p></li><li><p>post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的； </p></li><li><p>Get传输的数据量小，因为受URL长度限制，但效率较高； </p></li><li><p>Post可以传输大量数据，所以上传文件时只能用Post方式； </p></li><li><p>get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等； </p></li><li><p>post较get安全性较高； </p></li><li><p>get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码。 </p></li><li><p>post支持标准字符集，可以正确传递中文字符。 </p></li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><ul><li><p>1xx：指示信息–表示请求已接收，继续处理 </p></li><li><p>2xx：成功–表示请求已被成功接收、理解、接受   </p><ul><li><strong>200</strong>：请求被正常处理 </li><li>204：请求被受理但没有资源可以返回 </li><li>206：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。 </li></ul></li><li><p>3xx：重定向–要完成请求必须进行更进一步的操作   </p><ul><li><strong>301</strong>：永久性重定向 </li><li><strong>302</strong>：临时重定向 </li><li>303：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上 </li><li>304：发送附带条件的请求时，条件不满足时返回，与重定向无关 </li><li>307：临时重定向，与302类似，只是强制要求使用POST方法 </li></ul></li><li><p>4xx：客户端错误–请求有语法错误或请求无法实现   </p><ul><li><strong>400：</strong>请求报文语法有误，服务器无法识别 </li><li>401：请求需要认证 </li><li><strong>403</strong>：请求的对应资源禁止被访问 </li><li><strong>404</strong>：服务器无法找到对应资源 </li></ul></li><li><p>5xx：服务器端错误–服务器未能实现合法的请求  </p><ul><li><strong>500：</strong>服务器内部错误 </li><li><strong>503：</strong>服务器正忙 </li></ul></li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><h3 id="HTTP-与-HTTPS-有哪些区别？"><a href="#HTTP-与-HTTPS-有哪些区别？" class="headerlink" title="HTTP 与 HTTPS 有哪些区别？"></a>HTTP 与 HTTPS 有哪些区别？</h3><ol><li>HTTP 是超⽂本传输协议，信息是明⽂传输，存在安全⻛险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP ⽹络层之间加⼊了 SSL/TLS 安全协议，使得报⽂能够加密传输。 </li><li>HTTP 连接建⽴相对简单， TCP 三次握⼿之后便可进⾏ HTTP 的报⽂传输。⽽ HTTPS 在 TCP 三次握⼿之后，还需进⾏ SSL/TLS 的握⼿过程，才可进⼊加密报⽂传输。 </li><li>HTTP 的端⼝号是 80，HTTPS 的端⼝号是 443。 </li><li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。 </li></ol><h3 id="HTTPS-采⽤的是对称加密和⾮对称加密结合的「混合加密」⽅式："><a href="#HTTPS-采⽤的是对称加密和⾮对称加密结合的「混合加密」⽅式：" class="headerlink" title="HTTPS 采⽤的是对称加密和⾮对称加密结合的「混合加密」⽅式："></a>HTTPS 采⽤的是对称加密和⾮对称加密结合的「混合加密」⽅式：</h3><ul><li>在通信建⽴前采⽤⾮对称加密的⽅式交换「会话秘钥」，后续就不再使⽤⾮对称加密。 </li><li>在通信过程中全部使⽤对称加密的「会话秘钥」的⽅式加密明⽂数据。 </li></ul><p>采⽤「混合加密」的⽅式的原因：</p><ul><li>对称加密只使⽤⼀个密钥，运算速度快，密钥必须保密，⽆法做到安全的密钥交换。 </li><li>⾮对称加密使⽤两个密钥：公钥和私钥，公钥可以任意分发⽽私钥保密，解决了密钥交换问题但速度慢。 </li></ul><h3 id="介绍一下HTTP-1-HTTP-2-HTTP-3的发展吧"><a href="#介绍一下HTTP-1-HTTP-2-HTTP-3的发展吧" class="headerlink" title="介绍一下HTTP/1 HTTP/2 HTTP/3的发展吧"></a>介绍一下HTTP/1 HTTP/2 HTTP/3的发展吧</h3><ul><li><p>技术的发展都是为了解决某些问题 </p></li><li><p>HTTP/1的问题是<strong>短链接每次都需要三握四挥</strong>、<strong>不安全</strong>（HTTPs）、无状态（Cookie）、<strong>服务端不能主动发送</strong>。(核心，1.0短连接 1.1可以长连接 不安全) </p></li><li><p>HTTP/2默认了长连接（Keep-Alive）、<strong>引入TLS/SSL</strong>、Cookie、服务端主动发送、头部压缩、多路复用。但是还有<strong>队头阻塞</strong>的问题（因为虽然进行了长连接，但是还有一种情况会出现队头阻塞，那就是 丢失重传）。(核心 队头阻塞 ssl cookie) </p></li><li><p>HTTP/3使用<strong>UDP解决了丢失重传导致的队头阻塞</strong>，并且使用了TLS/SSL1.3减少了建立HTTPs连接的时间到1.5-2个RTT（往返时间），还引入了二进制编码，其他细节忘记了。 </p></li><li><p>提前将资源推送到浏览器 </p></li><li><p>推送可以基于已发送的请求，例如客户端请求 <code>html</code>，服务端可以主动推送 <code>js</code>、<code>css</code> 文件</p></li></ul><h1 id="自己对项目的解析"><a href="#自己对项目的解析" class="headerlink" title="自己对项目的解析"></a>自己对项目的解析</h1><p>这里是自己再次对项目的解析，也当做一个复习作用。按照模块来解析</p><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><p>在主函数中，先是解析启动服务器时附加的参数，并将参数行解析，接着在创建服务器对象以及服务器初始化，启动各个模块</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"runed."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//Log::get_instance()->write_log(1,"%s","server is running");</span>    <span class="token comment">//需要修改的数据库信息,登录名,密码,库名</span>    string user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    string passwd <span class="token operator">=</span> <span class="token string">"61053208"</span><span class="token punctuation">;</span>    string databasename <span class="token operator">=</span> <span class="token string">"yourdb"</span><span class="token punctuation">;</span>    <span class="token comment">//命令行解析</span>    Config config<span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">parse_arg</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    WebServer server<span class="token punctuation">;</span>    <span class="token comment">//初始化</span>    server<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>PORT<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">,</span> databasename<span class="token punctuation">,</span> config<span class="token punctuation">.</span>LOGWrite<span class="token punctuation">,</span>                 config<span class="token punctuation">.</span>OPT_LINGER<span class="token punctuation">,</span> config<span class="token punctuation">.</span>TRIGMode<span class="token punctuation">,</span>  config<span class="token punctuation">.</span>sql_num<span class="token punctuation">,</span>  config<span class="token punctuation">.</span>thread_num<span class="token punctuation">,</span>                 config<span class="token punctuation">.</span>close_log<span class="token punctuation">,</span> config<span class="token punctuation">.</span>actor_model<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"init\n"</span><span class="token punctuation">;</span>    <span class="token comment">//日志</span>    server<span class="token punctuation">.</span><span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"log_write\n"</span><span class="token punctuation">;</span>    <span class="token comment">//数据库</span>    server<span class="token punctuation">.</span><span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"sql_pool\n"</span><span class="token punctuation">;</span>    <span class="token comment">//线程池</span>    server<span class="token punctuation">.</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"thread_pool\n"</span><span class="token punctuation">;</span>    <span class="token comment">//触发模式</span>    server<span class="token punctuation">.</span><span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"trig_mode\n"</span><span class="token punctuation">;</span>    <span class="token comment">//监听</span>    server<span class="token punctuation">.</span><span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"eventlisten\n"</span><span class="token punctuation">;</span>    <span class="token comment">//运行</span>    server<span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebServer类"><a href="#WebServer类" class="headerlink" title="WebServer类"></a>WebServer类</h2><p>一个webserver对象包含着</p><ol><li>数据库连接池指针、数据库名称、登录数据库的账号密码等信息，数据库连接数量</li><li>线程池指针<code>threadpool&lt;http_conn&gt;* m_pool</code>，线程数量</li><li><code>epoll_event</code>数组，数组大小为<code>MAX_EVENT_NUMBER</code>、套接字fd<code>m_listenfd</code>以及一些模式设置的参数</li><li>定时器相关的<code>client_data*</code>指针，这是连接资源的结构体，定时器在这个结构体里面；还有一个应该是操作类<code>Utils</code></li><li>基础数据中则包含<code>http_conn* users</code>连接数组、管道、epollfd、端口号、root文件目录地址、日志开关、actor模式记录等数据</li></ol><p>工作流程：</p><ol><li>初始化</li><li>开启日志</li><li>开启数据库连接池</li><li>开启线程池</li><li>设置触发模式</li><li>传统网络编程步骤创建监听epoll：eventListen()，其中包含了设置信号步骤</li><li>主循环，每次循环判断是新用户加入事件、客户端断开连接事件、定时器事件、客户请求报文事件以及发送报文事件中的哪一个</li></ol><h3 id="WebServer-h"><a href="#WebServer-h" class="headerlink" title="WebServer.h"></a>WebServer.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">WebServer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//服务器初始化函数</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span>string user<span class="token punctuation">,</span>string passWord<span class="token punctuation">,</span>string databaseName<span class="token punctuation">,</span>            <span class="token keyword">int</span> log_write<span class="token punctuation">,</span><span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span><span class="token keyword">int</span> trigmode<span class="token punctuation">,</span><span class="token keyword">int</span> sql_num<span class="token punctuation">,</span>            <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span><span class="token keyword">int</span> close_log<span class="token punctuation">,</span><span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调整定时器</span>    <span class="token keyword">void</span> <span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">,</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理定时器</span>    <span class="token keyword">bool</span> <span class="token function">deal_clinet_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理客户端数据</span>    <span class="token keyword">bool</span> <span class="token function">deal_with_signal</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> timeout<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理信号</span>    <span class="token keyword">void</span> <span class="token function">deal_with_thread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理线程</span>    <span class="token keyword">void</span> <span class="token function">deal_with_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//基础数据</span>    <span class="token keyword">int</span> m_port<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> m_root<span class="token punctuation">;</span><span class="token comment">//记录root文件目录</span>    <span class="token keyword">int</span> m_log_write<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_actormodel<span class="token punctuation">;</span>        <span class="token keyword">int</span> m_pipefd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    http_conn<span class="token operator">*</span> users<span class="token punctuation">;</span>    <span class="token comment">//数据库相关</span>    connection_pool<span class="token operator">*</span> m_connPool<span class="token punctuation">;</span><span class="token comment">//数据库连接池</span>    string m_user<span class="token punctuation">;</span><span class="token comment">//登录数据库账号</span>    string m_passWord<span class="token punctuation">;</span><span class="token comment">//登录数据库密码</span>    string m_databaseName<span class="token punctuation">;</span><span class="token comment">//数据库名称</span>    <span class="token keyword">int</span> m_sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池相关</span>    threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span><span class="token operator">*</span> m_pool<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_thread_num<span class="token punctuation">;</span>    <span class="token comment">//epoll_event相关</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_listenfd<span class="token punctuation">;</span><span class="token comment">//套接字fd</span>    <span class="token keyword">int</span> m_OPT_LINGER<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_LISTENTrigmode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//定时器相关</span>    client_data<span class="token operator">*</span> users_timer<span class="token punctuation">;</span>    Utils utils<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//class WebServer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebServer-cpp"><a href="#WebServer-cpp" class="headerlink" title="WebServer.cpp"></a>WebServer.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//http_conn类对象</span>    users<span class="token operator">=</span><span class="token keyword">new</span> http_conn<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//root文件夹路径</span>    <span class="token keyword">char</span> server_path<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//* getcwd() -> 获取当前工作目录</span>    <span class="token function">getcwd</span><span class="token punctuation">(</span>server_path<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> root<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/root"</span><span class="token punctuation">;</span>    m_root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>server_path<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//记录root文件夹路径到m_root</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span>server_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定时器</span>    users_timer<span class="token operator">=</span><span class="token keyword">new</span> client_data<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users_timer<span class="token punctuation">;</span>    <span class="token keyword">delete</span> m_pool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span>string user<span class="token punctuation">,</span>string passWord<span class="token punctuation">,</span>string databaseName<span class="token punctuation">,</span>            <span class="token keyword">int</span> log_write<span class="token punctuation">,</span><span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span><span class="token keyword">int</span> trigmode<span class="token punctuation">,</span><span class="token keyword">int</span> sql_num<span class="token punctuation">,</span>            <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span><span class="token keyword">int</span> close_log<span class="token punctuation">,</span><span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_port<span class="token operator">=</span>port<span class="token punctuation">;</span>    m_user<span class="token operator">=</span>user<span class="token punctuation">;</span>    m_passWord<span class="token operator">=</span>passWord<span class="token punctuation">;</span>    m_databaseName<span class="token operator">=</span>databaseName<span class="token punctuation">;</span>    m_log_write<span class="token operator">=</span>log_write<span class="token punctuation">;</span>    m_OPT_LINGER<span class="token operator">=</span>opt_linger<span class="token punctuation">;</span>    m_TRIGMode<span class="token operator">=</span>trigmode<span class="token punctuation">;</span>    m_sql_num<span class="token operator">=</span>sql_num<span class="token punctuation">;</span>    m_thread_num<span class="token operator">=</span>thread_num<span class="token punctuation">;</span>    m_close_log<span class="token operator">=</span>close_log<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//LT+LT</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_TRIGMode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_LISTENTrigmode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//LT+ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m_TRIGMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_LISTENTrigmode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET+LT</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m_TRIGMode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_LISTENTrigmode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET+ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m_TRIGMode<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_LISTENTrigmode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_close_log<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//日志开启</span>        <span class="token comment">//初始化日志</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_log_write<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span>m_close_log<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">800000</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span>m_close_log<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">800000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化数据库连接池</span>    m_connPool<span class="token operator">=</span>connection_pool<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_connPool<span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>m_user<span class="token punctuation">,</span>m_passWord<span class="token punctuation">,</span>m_databaseName<span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">,</span>m_sql_num<span class="token punctuation">,</span>m_close_log<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始化数据库读取表，即将数据库中原有的账号密码导入到服务器内存的map中</span>    users<span class="token operator">-></span><span class="token function">initMysql_result</span><span class="token punctuation">(</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//线程池</span>    m_pool<span class="token operator">=</span><span class="token keyword">new</span> threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span><span class="token punctuation">(</span>m_actormodel<span class="token punctuation">,</span>m_connPool<span class="token punctuation">,</span>m_thread_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//?监听事件这个函数里面实现需要结合其它代码来研究</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//网络编程基础步骤</span>    m_listenfd<span class="token operator">=</span><span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_listenfd<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭连接</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_OPT_LINGER<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_LINGER<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m_OPT_LINGER<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_LINGER<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> address<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_family<span class="token operator">=</span>AF_INET<span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token operator">=</span><span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_port<span class="token operator">=</span><span class="token function">htons</span><span class="token punctuation">(</span>m_port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token operator">&amp;</span>flag<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token operator">=</span><span class="token function">bind</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定ip地址和端口</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token operator">=</span><span class="token function">listen</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许最多五个客户端与服务器同时保存连接</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用于存储epoll事件表中就绪事件的event数组</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//创建epoll</span>    m_epollfd<span class="token operator">=</span><span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_epollfd<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//往epoll内核事件中注册监听socket事件，当listen到新的客户连接时，listenfd变为就绪状态</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_listenfd<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>m_LISTENTrigmode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加epoll监听事件</span>    http_conn<span class="token operator">::</span>m_epollfd<span class="token operator">=</span>m_epollfd<span class="token punctuation">;</span>        <span class="token comment">//*socketpair() -> 用于创建一对无名的、相互连接的套接字，可以实现进程间的双向通信，也可以用于网络通信</span>    ret<span class="token operator">=</span><span class="token function">socketpair</span><span class="token punctuation">(</span>PF_UNIX<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m_pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">setnonblocking</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置非阻塞</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGPIPE<span class="token punctuation">,</span>SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span>utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGTERM<span class="token punctuation">,</span>utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//工具类，信号和描述符的基础操作</span>    Utils<span class="token operator">::</span>u_pipefd<span class="token operator">=</span>m_pipefd<span class="token punctuation">;</span>    Utils<span class="token operator">::</span>u_epollfd<span class="token operator">=</span>m_epollfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建定时器</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    users<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>client_address<span class="token punctuation">,</span>m_root<span class="token punctuation">,</span>m_CONNTrigmode<span class="token punctuation">,</span>m_close_log<span class="token punctuation">,</span>m_user<span class="token punctuation">,</span>m_passWord<span class="token punctuation">,</span>m_databaseName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化client_data数据</span>    <span class="token comment">//创建定时器，设置回调函数和超时时间，绑定用户数据，将定时器添加到链表当中</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>addreess<span class="token operator">=</span>client_address<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd<span class="token operator">=</span>connfd<span class="token punctuation">;</span>    util_timer<span class="token operator">*</span> timer<span class="token operator">=</span><span class="token keyword">new</span> util_timer<span class="token punctuation">;</span>    timer<span class="token operator">-></span>user_data<span class="token operator">=</span><span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>cb_func<span class="token operator">=</span>cb_func<span class="token punctuation">;</span>    time_t cur<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire<span class="token operator">=</span>cur<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>TIMESLOT<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token operator">=</span>timer<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//若有数据传输，则将定时器往后延迟3个单位</span><span class="token comment">//并对新的定时器在链表上的位置进行调整</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    time_t cur<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire<span class="token operator">=</span>cur<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>TIMESLOT<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"adjust timer once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除定时器以及在epoll中移除sockfd</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">,</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    timer<span class="token operator">-></span><span class="token function">cb_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">del_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"close fd %d"</span><span class="token punctuation">,</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//有新连接进来</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_clinet_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>    socklen_t client_addrlength<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_LISTENTrigmode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//LT</span>        <span class="token comment">//* accept() -> 返回值是一个新的套接字描述符，它代表的是和客户端的新的连接，</span>        <span class="token comment">//*             可以把它理解成是一个客户端的socket,这个socket包含的是客户端的ip和port信息 </span>        <span class="token comment">//*             并且用client_address来接收客户端实际的地址</span>        <span class="token keyword">int</span> connfd<span class="token operator">=</span><span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span><span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connfd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%s"</span><span class="token punctuation">,</span><span class="token string">"accept error"</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果到达最大可允许的fd数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count<span class="token operator">>=</span>MAX_FD<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span><span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建定时器</span>        <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//ET</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> connfd<span class="token operator">=</span><span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span><span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connfd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span><span class="token string">"accept error"</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count<span class="token operator">>=</span>MAX_FD<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span><span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_with_signal</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> timeout<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sig<span class="token punctuation">;</span>    <span class="token keyword">char</span> signals<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ret<span class="token operator">=</span><span class="token function">recv</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>signals<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>signals<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从pipefd读取数据，返回ret为读到数据长度</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ret<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>signals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">case</span> SIGALRM<span class="token operator">:</span>                timeout<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SIGTERM<span class="token operator">:</span>                stop_server<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//switch</span>        <span class="token punctuation">&#125;</span><span class="token comment">//for</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_with_thread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer<span class="token operator">*</span> timer<span class="token operator">=</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor模式</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_actormodel<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users<span class="token operator">+</span>sockfd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//while</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"deal with the client(%s)"</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>            m_pool<span class="token operator">-></span><span class="token function">append_p</span><span class="token punctuation">(</span>users<span class="token operator">+</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_with_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"send data to the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> stop_server <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop_server<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENT_NUMBER<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"epoll failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sockfd <span class="token operator">=</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token comment">//处理新到的客户连接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_listenfd<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">deal_clinet_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>EPOLLRDHUP <span class="token operator">|</span> EPOLLHUP <span class="token operator">|</span> EPOLLERR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//服务器端关闭连接，移除对应的定时器</span>                util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>                <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理信号</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">deal_with_signal</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"dealclientdata failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理客户连接上接收到的数据</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">deal_with_thread</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">deal_with_write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">timer_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"timer tick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志类"><a href="#日志类" class="headerlink" title="日志类"></a>日志类</h2><p>日志里面依赖一个容器，这个容器是循环数组实现的阻塞队列，最后在输出时则会判断是否异步操作（通过变量<code>m_is_async</code>来记录），如果是异步操作，则将日志体打入阻塞队列中，由一个线程异步输出日志；若不是异步则直接输出<code>fputs()</code>，阻塞队列采用FIFO原则；有条件变量，有锁用到</p><ol><li>如果设置了<code>max_queue_size</code>，即<code>max_queue_size&gt;0</code>则为异步，循环数组作为缓冲区队列，通过<code>push</code>存放日志消息体（实际类型为<code>string</code>）</li><li>阻塞队列的<code>pop</code>是出队，并返回最前面的消息体，若队列为空，则条件变量会进行阻塞等待唤醒</li><li>有个专门的异步写日志方法==&gt;<code>void* async_write_log()</code>；这个方法实现在 log.h 头文件中，它不断循环并pop出阻塞队列，提取一个string类型的消息体并打印输出，直到阻塞队列为空</li></ol><p>代码如下：</p><h3 id="log-h"><a href="#log-h" class="headerlink" title="log.h"></a>log.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * log.h头文件 * * !同步/异步日志系统头文件===============同步/异步日志系统主要涉及了两个模块，一个是日志模块，一个是阻塞队列模块,其中加入阻塞队列模块主要是解决异步写入日志做准备.阻塞队列见：block_queue.h> * 自定义阻塞队列> * 单例模式创建日志> * 同步日志> * 异步日志> * 实现按天、超行分类 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LOG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../log/block_queue.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Log</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">/**获取单例     *      * 由于C++11及以后的版本中要求编译器保证内部静态变量的线程安全性     * 故这里使用的局部变量懒汉模式是线程安全的，并且不用加锁     */</span>    <span class="token keyword">static</span> Log<span class="token operator">*</span> <span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> Log instance<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//异步写日志公有方法，调用私有方法async_write_log</span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">flush_log_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">async_write_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//可选择的参数有日志文件、日志缓冲区大小、最大行数以及日志最长日志条队列</span>    <span class="token keyword">bool</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file_name<span class="token punctuation">,</span><span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> log_buf_size <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token keyword">int</span> split_lines <span class="token operator">=</span> <span class="token number">5000000</span><span class="token punctuation">,</span> <span class="token keyword">int</span> max_queue_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将输出内容按照标准格式整理</span>    <span class="token keyword">void</span> <span class="token function">write_log</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//强制刷新缓冲区</span>    <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//异步写日志方法</span>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">async_write_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        std<span class="token operator">::</span>string single_log<span class="token punctuation">;</span>        <span class="token comment">//从阻塞队列中取出一个日志string，写入文件</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m_log_queue<span class="token operator">-></span><span class="token function">pop</span><span class="token punctuation">(</span>single_log<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fputs</span><span class="token punctuation">(</span>single_log<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span> dir_name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//路径名</span>    <span class="token keyword">char</span> log_name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//log文件名</span>    <span class="token keyword">int</span> m_split_lines<span class="token punctuation">;</span><span class="token comment">//日志最大行数</span>    <span class="token keyword">int</span> m_log_buf_size<span class="token punctuation">;</span><span class="token comment">//日志缓冲区大小</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m_count<span class="token punctuation">;</span><span class="token comment">//日志行数记录</span>    <span class="token keyword">int</span> m_today<span class="token punctuation">;</span><span class="token comment">//由于日志是按天分类的，这个就记录当前时间是哪一天</span>    FILE <span class="token operator">*</span>m_fp<span class="token punctuation">;</span><span class="token comment">//打开log文件的文件指针</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_buf<span class="token punctuation">;</span><span class="token comment">//当前指向log内容的字符指针，即要输出的内容</span>    block_queue<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token operator">*</span>m_log_queue<span class="token punctuation">;</span><span class="token comment">//阻塞队列</span>    <span class="token keyword">bool</span> m_is_async<span class="token punctuation">;</span><span class="token comment">//记录是否同步标志</span>    locker m_mutex<span class="token punctuation">;</span><span class="token comment">//同步类</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span> <span class="token comment">//是否关闭日志</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//调试信息相关</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_DEBUG</span><span class="token expression"><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">write_log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_INFO</span><span class="token expression"><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">write_log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_WARN</span><span class="token expression"><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">write_log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG_ERROR</span><span class="token expression"><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">write_log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//LOG_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="log-cpp"><a href="#log-cpp" class="headerlink" title="log.cpp"></a>log.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//log.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdarg></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../log/log.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_is_async<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Log</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_fp<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>m_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//异步需要设置阻塞队列的长度，同步不需要</span><span class="token keyword">bool</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file_name<span class="token punctuation">,</span><span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> log_buf_size <span class="token punctuation">,</span> <span class="token keyword">int</span> split_lines <span class="token punctuation">,</span> <span class="token keyword">int</span> max_queue_size <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果设置了max_queue_size，则设为异步</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max_queue_size<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//设置写入方式flag</span>        m_is_async<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//创建并设置阻塞队列</span>        m_log_queue <span class="token operator">=</span> <span class="token keyword">new</span> block_queue<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span>max_queue_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                pthread_t tid<span class="token punctuation">;</span>        <span class="token comment">//flush_log_thread为回调函数，表示创建线程异步写日志</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>flush_log_thread<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//输出内容长度</span>    m_close_log<span class="token operator">=</span>close_log<span class="token punctuation">;</span>    m_log_buf_size<span class="token operator">=</span>log_buf_size<span class="token punctuation">;</span>    m_buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>m_log_buf_size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_buf<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span>m_log_buf_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化缓冲区</span>    m_split_lines<span class="token operator">=</span>split_lines<span class="token punctuation">;</span><span class="token comment">//日志的最大行数</span>    <span class="token comment">//初始化时间相关变量</span>    time_t t<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> sys_tm<span class="token operator">=</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span> my_tm<span class="token operator">=</span><span class="token operator">*</span>sys_tm<span class="token punctuation">;</span>    <span class="token comment">//从后往前找第一个‘/‘的位置</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token operator">=</span><span class="token function">strrchr</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该函数返回 str 中最后一次出现字符 c 的位置。如果未找到该值，则函数返回一个空指针。</span>    <span class="token keyword">char</span> log_full_name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//相当于自定义日志名</span>    <span class="token comment">//若输入的文件名没有‘/’，则直接将事件+文件名作为日志名</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//* %02d中的0为填空元素，即如果不满2个字符则用'0'填上剩余的</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>log_full_name<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token string">"%d_%02d_%02d_%s"</span><span class="token punctuation">,</span> my_tm<span class="token punctuation">.</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">,</span> my_tm<span class="token punctuation">.</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//? 将‘/’的位置向后移动一个位置，然后复制到logname中</span>        <span class="token comment">//? p-file_name+1时文件所在路径文件夹的长度</span>        <span class="token comment">//* dir_name相当于‘./’</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>log_name<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>dir_name<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> p <span class="token operator">-</span> file_name <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">snprintf</span><span class="token punctuation">(</span>log_full_name<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token string">"%s%d_%02d_%02d_%s"</span><span class="token punctuation">,</span> dir_name<span class="token punctuation">,</span> my_tm<span class="token punctuation">.</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">,</span> my_tm<span class="token punctuation">.</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">,</span> log_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_today<span class="token operator">=</span>my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">;</span>    <span class="token comment">//*打开文件，以附加的方式打开只写文件。若文件不存在，则会创建该文件；如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（EOF 符保留）</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>log_full_name<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 写入日志函数： * 日志写入前会判断当前day是否为创建日志的时间，行数是否超过最大行限制 *      *若为创建日志时间，写入日志，否则按当前时间创建新log，更新创建时间和行数 *      *若行数超过最大行限制，在当前日志的末尾加count/max_lines为后缀创建新的log */</span><span class="token keyword">void</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">write_log</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> now<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当天是几号 </span>    time_t t<span class="token operator">=</span>now<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> sys_tm<span class="token operator">=</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span> my_tm<span class="token operator">=</span><span class="token operator">*</span>sys_tm<span class="token punctuation">;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 日志分级处理：     *      *Debug，调试代码时输出     *      *Warn，调试时发出警告     *      *Info，报告系统当前的状态，当前执行的流程或接受到的信息等     *      *Error和Fatal，输出系统的错误信息     */</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"[debug]:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"[info]:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"[warn]:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"[error]:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"[info]:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//写一个log，对m_count++，m_split_lines最大行数</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//更新现有行数</span>        <span class="token comment">//日志不是今天或写入的行数时最大行的倍数</span>    <span class="token comment">//m_split_lines 是最大行数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_today<span class="token operator">!=</span>my_tm<span class="token punctuation">.</span>tm_mday<span class="token operator">||</span><span class="token keyword">this</span><span class="token operator">-></span>m_count<span class="token operator">%</span><span class="token keyword">this</span><span class="token operator">-></span>m_split_lines<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> new_log<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> tail<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token comment">//格式化日志名中的部分</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"%d_%02d_%02d_"</span><span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果时间不是今天，则创建当天的日志，并更新m_today和m_count</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_today<span class="token operator">!=</span>my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">snprintf</span><span class="token punctuation">(</span>new_log<span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token string">"%s%s%s"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-></span>dir_name<span class="token punctuation">,</span>tail<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-></span>log_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-></span>m_today<span class="token operator">=</span>my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-></span>m_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//超过了最大行，在之前的日志名基础上加上后缀count/max_lines</span>            <span class="token function">snprintf</span><span class="token punctuation">(</span>new_log<span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token string">"%s%s%s.%lld"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-></span>dir_name<span class="token punctuation">,</span>tail<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-></span>log_name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-></span>m_count<span class="token operator">/</span><span class="token keyword">this</span><span class="token operator">-></span>m_split_lines<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>new_log<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end if</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//VA_LIST 是在C语言中解决变参问题的一组宏，所在头文件：#include &lt;stdarg.h>，用于获取不确定个数的参数。</span>    va_list valst<span class="token punctuation">;</span>    <span class="token comment">//将传入的format参数赋值给alst，便于格式化输出</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>valst<span class="token punctuation">,</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>string log_str<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入内容格式：时间+内容</span>    <span class="token comment">//时间格式化，snprintf()成功返回写字符的总数，其中不包括结尾的null字符</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">snprintf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_buf<span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">"%d-%02d-%02d %02d:%02d:%02d.%06ld %s "</span><span class="token punctuation">,</span>                    my_tm<span class="token punctuation">.</span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_mday<span class="token punctuation">,</span>                    my_tm<span class="token punctuation">.</span>tm_hour<span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_min<span class="token punctuation">,</span>my_tm<span class="token punctuation">.</span>tm_sec<span class="token punctuation">,</span>now<span class="token punctuation">.</span>tv_usec<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//内容格式化，用于字符串打印数据、数据格式用户自定义，返回写入到字符数组中的字符个数（不包含终止符）</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">vsnprintf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_buf<span class="token operator">+</span>n<span class="token punctuation">,</span>m_log_buf_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>format<span class="token punctuation">,</span>valst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_buf<span class="token punctuation">[</span>n<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_buf<span class="token punctuation">[</span>n<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>    log_str<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span>m_buf<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//* 同步异步检测</span>    <span class="token comment">//如果m_is_async为true表示为异步，否则默认为同步</span>    <span class="token comment">//若为异步，则将日志信息加入到阻塞队列，同步则加锁向文件中写</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_is_async <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">-></span>m_log_queue<span class="token operator">-></span><span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//异步且队列不为空</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_log_queue<span class="token operator">-></span><span class="token function">push</span><span class="token punctuation">(</span>log_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>log_str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>valst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="block-queue-h"><a href="#block-queue-h" class="headerlink" title="block_queue.h"></a>block_queue.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**************************************************************循环数组实现的阻塞队列，m_back = (m_back + 1) % m_max_size;  *线程安全，每个操作前都要先加互斥锁，操作完后，再解锁**************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BLOCK_QUEUE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_QUEUE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../lock/locker.h"</span></span><span class="token comment">/**用循环数组实现的阻塞队列封装类 */</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">block_queue</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">block_queue</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>max_size<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常值</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"阻塞队列初始大小参数小于等于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_array <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>max_size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//动态分配数组</span><span class="token comment">//私有属性初始化</span>m_max_size <span class="token operator">=</span> max_size<span class="token punctuation">;</span>m_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m_front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m_back <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//?清除队内元素</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上锁</span>m_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m_front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m_back <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">block_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁数组</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_array<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_array<span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断队列是否满了</span><span class="token keyword">bool</span> <span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">>=</span><span class="token keyword">this</span><span class="token operator">-></span>m_max_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断队列是否为空</span><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**获取队列内的队首元素： * 接受一个引用参数value * 如果获取队首元素成功，则返回true，并且value会被修改为队首元素 * 否则返回false */</span><span class="token keyword">bool</span> <span class="token function">front</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//队列为空，false</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>value <span class="token operator">=</span> m_array<span class="token punctuation">[</span>m_front<span class="token punctuation">]</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**获取队列内的队尾元素： * 接受一个引用参数value * 如果获取队尾元素成功，则返回true，并且value会被修改为队尾元素 * 否则返回false */</span><span class="token keyword">bool</span> <span class="token function">back</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>value <span class="token operator">=</span> m_array<span class="token punctuation">[</span>m_back<span class="token punctuation">]</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回队列现有元素个数</span><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> m_size<span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> m_max_size<span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**往队列添加元素，需要将所有使用队列的线程先唤醒 * 当有元素push进队列时，相当于生产者生产了一个元素 * 若当前没有线程等待条件变量，则唤醒无意义 */</span><span class="token keyword">bool</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//?作用还是有些不懂</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">>=</span>m_max_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_cond<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_back <span class="token operator">=</span> <span class="token punctuation">(</span>m_back <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m_max_size<span class="token punctuation">;</span><span class="token comment">//队尾元素往后移动</span>m_array<span class="token punctuation">[</span>m_back<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>m_size<span class="token operator">++</span><span class="token punctuation">;</span>m_cond<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//pop时，如果当前队列没有元素，则进入等待条件变量</span>    <span class="token comment">//同时遵循队列的FIFO原则，出来的是队头元素，并会把该元素赋值给引用参数item</span><span class="token keyword">bool</span> <span class="token function">pop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m_size<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//队列元素为空</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>m_mutex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>m_front <span class="token operator">=</span> <span class="token punctuation">(</span>m_front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m_max_size<span class="token punctuation">;</span>item <span class="token operator">=</span> m_array<span class="token punctuation">[</span>m_front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>m_size<span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重载pop，增加了超时处理</span><span class="token comment">//第二个参数输入最长等待毫秒</span><span class="token keyword">bool</span> <span class="token function">pop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> item<span class="token punctuation">,</span><span class="token keyword">int</span> ms_timeout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> now <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> now<span class="token punctuation">.</span>tv_sec <span class="token operator">+</span> ms_timeout <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//秒</span>t<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> <span class="token punctuation">(</span>ms_timeout <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//微秒</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_cond<span class="token punctuation">.</span><span class="token function">timewait</span><span class="token punctuation">(</span>m_mutex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_size<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m_front <span class="token operator">=</span> <span class="token punctuation">(</span>m_front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m_max_size<span class="token punctuation">;</span>item <span class="token operator">=</span> m_array<span class="token punctuation">[</span>m_front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>m_size<span class="token punctuation">;</span>m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>locker m_mutex<span class="token punctuation">;</span><span class="token comment">//互斥锁</span>cond m_cond<span class="token punctuation">;</span><span class="token comment">//条件变量</span>T <span class="token operator">*</span>m_array<span class="token punctuation">;</span><span class="token comment">//队列</span><span class="token keyword">int</span> m_size<span class="token punctuation">;</span><span class="token comment">//当前队列元素个数</span><span class="token keyword">int</span> m_max_size<span class="token punctuation">;</span><span class="token comment">//队列最大容量</span><span class="token keyword">int</span> m_front<span class="token punctuation">;</span><span class="token comment">//队头元素</span><span class="token keyword">int</span> m_back<span class="token punctuation">;</span><span class="token comment">//队尾元素</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//BLOCK_QUEUE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池采用了单例模式，整个连接池也是遵循FIFO原则</p><ol><li>数据库连接池可以在程序初始化的时候，集中创建多个数据库连接<code>MYSQL*</code>，并放入连接池当中集中管理</li><li>数据库连接池的操作优化了一般访问数据库的操作（频繁创建连接==&gt;操作数据库==&gt;断开连接）</li><li>连接池的容器类为：标准库中的链表<code>list</code>，其声明为<code>list&lt;MYSQL*&gt; connList;</code></li><li>有个信号量<code>sem reserve</code>在连接池初始化完毕时会将自身的值设置为最大连接数：this-&gt;reserve=sem(this-&gt;m_FreeConn);</li><li>初始化时，会创建自定义数目的<strong>MYSQL*</strong>在链表中，并逐个MYSQL*进行初始化连接，即：<code>con=mysql_init(con);</code>和<code>con=mysql_real_connect(con,url.c_str(),User.c_str(),PassWord.c_str(),DatabaseName.c_str(),Port,NULL,0);</code></li><li>取出连接操作<code>MYSQL* GetConnection(); //获取数据库连接</code>：实际是对链表进行<code>pop_front()</code>，同时该函数会返回一个MYSQL*；若连接池无空闲连接，则会因为信号量代码reserve.wait()而等待阻塞，等待有空闲连接时再唤醒</li><li>释放之前取出的连接<code>bool ReleaseConnection(MYSQL* con); //释放连接</code>：会要求<strong>把前面获取连接得到的MYSQ*作为参数传入</strong>该函数中，并进行再次push添加到链表尾部（连接重复利用）</li><li>亮点之一：运用了RAII类机制，在构造RAII类对象时会自动获取数据库连接，在析构RAII类对象时会自动将连接归还，代码如下👇</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">connectionRAII<span class="token operator">::</span><span class="token function">connectionRAII</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span><span class="token operator">*</span> SQL<span class="token punctuation">,</span>connection_pool<span class="token operator">*</span> connPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>SQL<span class="token operator">=</span>connPool<span class="token operator">-></span><span class="token function">GetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>conRAII<span class="token operator">=</span><span class="token operator">*</span>SQL<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>poolRAII<span class="token operator">=</span>connPool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">connectionRAII</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">connectionRAII</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>poolRAII<span class="token operator">-></span><span class="token function">ReleaseConnection</span><span class="token punctuation">(</span>conRAII<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细代码如下：</p><h3 id="sql-connection-pool-h"><a href="#sql-connection-pool-h" class="headerlink" title="sql_connection_pool.h"></a>sql_connection_pool.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_CONNECTION_POOL_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CONNECTION_POOL_</span></span><span class="token comment">//*该头文件是数据库连接池的头文件</span><span class="token comment">//!头文件完成但还未检查</span><span class="token comment">//?👇数据库连接池是什么？👇</span><span class="token comment">//?数据库连接池可以在程序初始化的时候，集中创建多个数据库连接，并把他们集中管理，供程序使用</span><span class="token comment">//?优化了一般访问数据库的（频繁创建连接--操作数据库--断开连接）模式</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;error.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../lock/locker.h"</span> <span class="token comment">//互斥锁</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../log/log.h"</span> <span class="token comment">//日志</span></span><span class="token keyword">using</span> std<span class="token operator">::</span>string<span class="token punctuation">;</span><span class="token comment">//数据库连接池</span><span class="token keyword">class</span> <span class="token class-name">connection_pool</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>string url<span class="token punctuation">,</span>string User<span class="token punctuation">,</span>string PassWord<span class="token punctuation">,</span>string DataBaseName<span class="token punctuation">,</span><span class="token keyword">int</span> Port<span class="token punctuation">,</span><span class="token keyword">int</span> MaxConn<span class="token punctuation">,</span><span class="token keyword">int</span> close_log<span class="token punctuation">)</span><span class="token punctuation">;</span>    MYSQL<span class="token operator">*</span> <span class="token function">GetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取数据库连接</span>    <span class="token keyword">bool</span> <span class="token function">ReleaseConnection</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> con<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放连接</span>    <span class="token keyword">int</span> <span class="token function">GetFreeConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取连接</span>    <span class="token keyword">void</span> <span class="token function">DestroyPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//销毁所有连接</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//单例模式</span>    <span class="token keyword">static</span> connection_pool<span class="token operator">*</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_MaxConn<span class="token punctuation">;</span> <span class="token comment">//最大连接数</span>    <span class="token keyword">int</span> m_CurConn<span class="token punctuation">;</span> <span class="token comment">//当前已使用的连接数</span>    <span class="token keyword">int</span> m_FreeConn<span class="token punctuation">;</span> <span class="token comment">//当前空闲的连接数</span>    locker lock<span class="token punctuation">;</span>    std<span class="token operator">::</span>list<span class="token operator">&lt;</span>MYSQL<span class="token operator">*</span><span class="token operator">></span> connList<span class="token punctuation">;</span>    sem reserve<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    string m_url<span class="token punctuation">;</span> <span class="token comment">//主机地址</span>    string m_Port<span class="token punctuation">;</span> <span class="token comment">//数据库端口号</span>    string m_User<span class="token punctuation">;</span> <span class="token comment">//登录数据库的用户名</span>    string m_PassWord<span class="token punctuation">;</span> <span class="token comment">//登录数据库的密码</span>    string m_DatabaseName<span class="token punctuation">;</span> <span class="token comment">//使用的数据库名</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span> <span class="token comment">//日志开关</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//class connection_pool</span><span class="token comment">//*RAII机制类</span><span class="token keyword">class</span> <span class="token class-name">connectionRAII</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">connectionRAII</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span><span class="token operator">*</span> con<span class="token punctuation">,</span>connection_pool<span class="token operator">*</span> connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">connectionRAII</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    MYSQL<span class="token operator">*</span> conRAII<span class="token punctuation">;</span>    connection_pool<span class="token operator">*</span> poolRAII<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//_CONNECTION_POOL_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sql-connection-pool-cpp"><a href="#sql-connection-pool-cpp" class="headerlink" title="sql_connection_pool.cpp"></a>sql_connection_pool.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../CGImysql/sql_connection_pool.h"</span></span><span class="token keyword">using</span> std<span class="token operator">::</span>string<span class="token punctuation">;</span>connection_pool<span class="token operator">::</span><span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_CurConn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">connection_pool</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">connection_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">DestroyPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>connection_pool<span class="token operator">*</span> connection_pool<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//* 单例模式</span>    <span class="token keyword">static</span> connection_pool connPool<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>connPool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造初始化</span><span class="token keyword">void</span> connection_pool<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>string url<span class="token punctuation">,</span>string User<span class="token punctuation">,</span>string PassWord<span class="token punctuation">,</span>string DatabaseName<span class="token punctuation">,</span><span class="token keyword">int</span> Port<span class="token punctuation">,</span><span class="token keyword">int</span> MaxConn<span class="token punctuation">,</span><span class="token keyword">int</span> close_log<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化信息</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_url<span class="token operator">=</span>url<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_Port<span class="token operator">=</span>Port<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_User<span class="token operator">=</span>User<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_PassWord<span class="token operator">=</span>PassWord<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_DatabaseName<span class="token operator">=</span>DatabaseName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_close_log<span class="token operator">=</span>close_log<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_MaxConn<span class="token operator">=</span>MaxConn<span class="token punctuation">;</span>        <span class="token comment">//创建m_MaxConn条数据库连接</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_MaxConn<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                MYSQL<span class="token operator">*</span> con<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        con<span class="token operator">=</span><span class="token function">mysql_init</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Error:"</span><span class="token operator">&lt;&lt;</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        con<span class="token operator">=</span><span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>url<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PassWord<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>DatabaseName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Port<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Error:"</span><span class="token operator">&lt;&lt;</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//更新连接池和空闲连接数</span>        <span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">//将信号量初始化为最大连接次数</span>    <span class="token keyword">this</span><span class="token operator">-></span>reserve<span class="token operator">=</span><span class="token function">sem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_MaxConn<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取空闲连接的数据库</span><span class="token comment">//* 当有请求时，从数据库连接池中返回一个可用的连接，更新和使用空闲连接数</span>MYSQL<span class="token operator">*</span> connection_pool<span class="token operator">::</span><span class="token function">GetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MYSQL<span class="token operator">*</span> con<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//取出连接，信号量原子减1，为0则等待</span>    reserve<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上锁</span>    con<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>m_CurConn<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 开锁</span>    <span class="token keyword">return</span> con<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//释放当前使用的连接</span><span class="token keyword">bool</span> connection_pool<span class="token operator">::</span><span class="token function">ReleaseConnection</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> con<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token punctuation">;</span>    <span class="token operator">--</span><span class="token keyword">this</span><span class="token operator">-></span>m_CurConn<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放连接原子加1</span>    reserve<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//销毁数据库连接池</span><span class="token keyword">void</span> connection_pool<span class="token operator">::</span><span class="token function">DestroyPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过迭代器遍历，关闭数据库连接</span>        std<span class="token operator">::</span>list<span class="token operator">&lt;</span>MYSQL<span class="token operator">*</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>connList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>connList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            MYSQL<span class="token operator">*</span> con<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span>            <span class="token function">mysql_close</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_CurConn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_FreeConn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>connList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*connectionRAII::connectionRAII(MYSQL** SQL,connection_pool* connPool)&#123;    *SQL=connPool->GetConnection();        this->conRAII=*SQL;    this->poolRAII=connPool;&#125;connectionRAII::~connectionRAII()&#123;    this->poolRAII->ReleaseConnection(conRAII);&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>❗❗❗线程池中有存放线程的数组，数组中的线程是用来处理请求队列中的请求任务❗❗❗</p><ol><li><p>成员变量包含了：数据库连接池指针<code>connection_pool* m_connPool;</code>、描述线程池的数组<code>pthread_t* m_threads</code>、请求队列<code>std::list&lt;T*&gt; m_workqueue;（存放http_conn*）</code></p></li><li><p>初始化时，线程指针会构建数组==&gt;<code>m_threads=new pthread_t[m_thread_number];</code>，再进入for循环中逐个对数组成员用<code>pthread_create(pthread_t *tidp,const pthread_attr_t *attr,void *(*start_rtn)(void*),void *arg);</code>初始化，每个线程的运行函数都是<code>worker()</code>函数，传入参数<code>arg</code>为该线程池类对象指针<strong>this</strong></p></li><li><p>每个<code>pthread_create()</code>完毕后，又会将这个线程进行分离，即<code>pthread_detach()</code>，使得不用单独对工作线程进行回收</p></li><li><p>worker()函数内部则是将传入参数<code>void* arg</code>进行类型转换回<code>threadpool*</code>（线程池指针），接着调用指针的<code>run()</code>函数，所以<code>threadpool::run()</code>才是真正的<strong>执行任务函数</strong>👇</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//线程处理函数</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">worker</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将参数强制转换为线程池类，调用函数方法</span>    threadpool<span class="token operator">*</span> pool<span class="token operator">=</span><span class="token punctuation">(</span>threadpool<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    pool<span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>run函数会判断<strong>actor模式</strong>，判断<strong>m_state</strong>以及判断**read_once()**，这几个都是在http_conn类里面，那么就可以推断出线程池的链表存放的数据是http_conn连接对象</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//run()</span><span class="token comment">//run执行任务</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">-></span>m_stop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//信号量等待</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_queuestat<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被唤醒后先加上互斥锁</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_queuelocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_workqueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//从请求队列中取出第一个任务</span>        <span class="token comment">//将任务i从请求队列中删除</span>        T<span class="token operator">*</span> request<span class="token operator">=</span>m_workqueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_workqueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_actor_model<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断actor模式，</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">-></span>m_state<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//0为读，1为写</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">-></span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request<span class="token operator">-></span>mysql<span class="token punctuation">,</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>                    request<span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    request<span class="token operator">-></span>timer_flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    request<span class="token operator">-></span>timer_flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//m_actor_model!=1</span>            connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request<span class="token operator">-></span>mysql<span class="token punctuation">,</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//actor_model</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>详细代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">THREADPOOL_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">THREADPOOL_H</span></span><span class="token comment">//!该类是线程池类</span><span class="token comment">/** * !模板类的成员函数实现应该放在头文件中 * !因为模板类本质上不是类，只有实例化之后才会编译生成.o文件 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;exception></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../lock/locker.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../CGImysql/sql_connection_pool.h"</span></span><span class="token comment">//!该线程池头文件已完成，但还没有检查</span><span class="token comment">//*线程池类</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">threadpool</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">/**     * connPool是数据库连接池指针     * max_requests是请求队列中最多允许的、等待处理的请求数量     * thread_number是线程池中线程的数量     */</span>    <span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token keyword">int</span> actor_model<span class="token punctuation">,</span>connection_pool<span class="token operator">*</span> connPool<span class="token punctuation">,</span><span class="token keyword">int</span> thread_number<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">int</span> max_request<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向请求队列中插入任务请求</span>    <span class="token keyword">bool</span> <span class="token function">append_p</span><span class="token punctuation">(</span>T<span class="token operator">*</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">append</span><span class="token punctuation">(</span>T<span class="token operator">*</span> request<span class="token punctuation">,</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//工作线程运行函数</span>    <span class="token comment">//它不断从工作队列中取出任务并执行</span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//模型切换</span>    <span class="token keyword">int</span> m_actor_model<span class="token punctuation">;</span>    <span class="token comment">//线程池中的线程数</span>    <span class="token keyword">int</span> m_thread_number<span class="token punctuation">;</span>    <span class="token comment">//请求队列中允许的最大请求数</span>    <span class="token keyword">int</span> m_max_requests<span class="token punctuation">;</span>    <span class="token comment">//描述线程池的数组，大小为 m_thread_number</span>    pthread_t<span class="token operator">*</span> m_threads<span class="token punctuation">;</span>    <span class="token comment">//请求队列</span>    std<span class="token operator">::</span>list<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">></span> m_workqueue<span class="token punctuation">;</span>    <span class="token comment">//保护请求队列的互斥锁</span>    locker m_queuelocker<span class="token punctuation">;</span>    <span class="token comment">//是否有任务需要处理</span>    sem m_queuestat<span class="token punctuation">;</span>    <span class="token comment">//是否结束线程</span>    <span class="token keyword">bool</span> m_stop<span class="token punctuation">;</span>    <span class="token comment">//数据库连接池</span>    connection_pool<span class="token operator">*</span> m_connPool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token keyword">int</span> actor_model<span class="token punctuation">,</span>connection_pool<span class="token operator">*</span> connPool<span class="token punctuation">,</span><span class="token keyword">int</span> thread_number<span class="token punctuation">,</span><span class="token keyword">int</span> max_request<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">m_thread_number</span><span class="token punctuation">(</span>thread_number<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_max_requests</span><span class="token punctuation">(</span>max_request<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_connPool</span><span class="token punctuation">(</span>connPool<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_actor_model</span><span class="token punctuation">(</span>actor_model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//传入参数异常处理</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>thread_number<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>max_request<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> std<span class="token operator">::</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程id初始化</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_threads<span class="token operator">=</span><span class="token keyword">new</span> pthread_t<span class="token punctuation">[</span>m_thread_number<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_threads<span class="token punctuation">)</span>        <span class="token keyword">throw</span> std<span class="token operator">::</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>thread_number<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//循环创建线程，并将工作线程按照要求进行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span>m_threads<span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>worker<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_threads<span class="token punctuation">;</span>            <span class="token keyword">throw</span> std<span class="token operator">::</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将线程进行分离后，不用单独对工作线程进行回收</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_detach</span><span class="token punctuation">(</span>m_threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_threads<span class="token punctuation">;</span>            <span class="token keyword">throw</span> std<span class="token operator">::</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>threadpool<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-></span>m_threads<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//向请求队列中添加任务</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">append_p</span><span class="token punctuation">(</span>T<span class="token operator">*</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_queuelocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据硬件，预先设置请求队列的最大值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_workqueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>m_max_requests<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加任务</span>    m_workqueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//信号量提醒有任务要处理</span>    m_queuestat<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">append</span><span class="token punctuation">(</span>T <span class="token operator">*</span>request<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_queuelocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_workqueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> m_max_requests<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    request<span class="token operator">-></span>m_state <span class="token operator">=</span> state<span class="token punctuation">;</span>    m_workqueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_queuestat<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//线程处理函数</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">worker</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将参数强制转换为线程池类，调用函数方法</span>    threadpool<span class="token operator">*</span> pool<span class="token operator">=</span><span class="token punctuation">(</span>threadpool<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    pool<span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//run执行任务</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">threadpool</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">-></span>m_stop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//信号量等待</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_queuestat<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被唤醒后先加上互斥锁</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_queuelocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_workqueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//从请求队列中取出第一个任务</span>        <span class="token comment">//将任务i从请求队列中删除</span>        T<span class="token operator">*</span> request<span class="token operator">=</span>m_workqueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_workqueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_queuelocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_actor_model<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">-></span>m_state<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//读为0，写为1</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">-></span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request<span class="token operator">-></span>mysql<span class="token punctuation">,</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>                    request<span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    request<span class="token operator">-></span>timer_flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    request<span class="token operator">-></span>improv<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    request<span class="token operator">-></span>timer_flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//m_actor_model!=1</span>            connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request<span class="token operator">-></span>mysql<span class="token punctuation">,</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//actor_model</span>        <span class="token comment">/*         *上面是使用了RAII机制来实现下面代码，作用效果是一样的                //从连接池中取出一个数据库连接        request->mysql=m_connPool->GetConnection();        //process(模板类中的方法，这里是http类)进行处理        request->process();        //将数据库连接放回连接池        m_connPool->ReleaseConnection(request->mysql);         */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//THREADPOOL_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器<code>lst_timer.h</code>头文件中包含了四个东西，分别是：连接资源<code> struct client_data</code>、定时器容器类<code>sort_timer_lst</code>、定时器类<code>util_timer</code>以及工具类<code>Utils</code></p><p>定时器的调用代码在WebServer类的一些方法中，具体工作流程在网上看到了解释:point_down:</p><blockquote><p>（1） 首先使用socketpair创建管道–&gt;m_pipefd[2]<br>（2） 设置写端为非阻塞，是为了减少信号处理的时间，即使定时事件失效也没关系，并不严格。<br>（3） 设置读端为ET非阻塞，向epoll树上挂读管道事件。<br>（4） 执行信号函数addsig，把信号添加到信号集当中，并把信号默认处理方式改成sig_handler函数(函数内容是向管道写入信号值)<br>（5） 设置bool值timeout和stop_server，后面需要使用他们判断是否执行信号对应的处理逻辑。<br>（6） 开始alarm函数，设定时间。<br>（7） 监听文件描述符epoll_wait。<br>（8） 监听到以后读出信号。<br>（9） 执行处理逻辑，如果信号是SIGALRM，timeout=true;如果是SIGTERM（ctrl+c）stop_server=true;<br>（10） 在server.eventloop()（就是epoll树上监听到事件后的处理函数）中如果timeout==true,执行time_handler函数。<br>（11） time_handler函数(Util类中的)，首先执行tick()函数（定时器链表类中的），然后再次执行alarm()，相当于再次开始定时，一个alarm函数只能触发一次信号;<br>（12） tick()函数首先遍历定时器链表，找到到期的定时器（判断现在时间是否&gt;expire，expire是定时器节点类中设定的超时时间），就是每过一段时间检查是否超时。即利用alarm函数周期性地触发SIGALRM信号,该信号的信号处理函数利用管道通知主循环执行定时器链表上的定时任务.<br>（13） 如果超时了就执行cb_func函数，删除epoll树上对应的通信fd，关闭通信fd,http_conn连接数-1；<br>（14） 项目中TIMESLOT值为5，expire初始值设置为 现有时间+3*TIMESLOT，每有读写事件发生，该通信fd对应的expire就加3个TIMESLOT，同时调整定时器链表类中该节点的位置，通过util类对象使用adjust_timer函数。</p></blockquote><p>管道就是WebServer里面的m_pipefd[2]，写端就是m_pipefd[1]，读端为m_pipefd[0]</p><p>其实就是在webserver的循环中，如果收到了来自m_pipefd[0]的文件描述符活跃信息，就是代表收到了信号，此时就要去处理该信号，是连接资源超时了还是收到了服务器的关闭指令，再分别进行操作</p><p>这里如果收到资源超时信号，其实还是要循环定时器链表，找到超时的连接删掉，有点消耗性能</p><h3 id="连接资源—结构体client-date"><a href="#连接资源—结构体client-date" class="headerlink" title="连接资源—结构体client_date"></a>连接资源—结构体client_date</h3><p>连接资源包含了客户端socket地址、socket描述符然后附带一个定时器对象</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//连接资源</span><span class="token keyword">struct</span> <span class="token class-name">client_data</span><span class="token punctuation">&#123;</span>        <span class="token comment">//客户端socket地址</span>    sockaddr_in addreess<span class="token punctuation">;</span>    <span class="token comment">//socket文件描述符</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token comment">//定时器</span>    util_timer<span class="token operator">*</span> timer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器类—util-timer"><a href="#定时器类—util-timer" class="headerlink" title="定时器类—util_timer"></a>定时器类—util_timer</h3><p>虽然用的是类，但其实更像一个结构体，一个定时器包含了连接资源指针<code>client_data*</code>、前一个定时器<code>util_timer* prev</code>、后一个定时器<code>util_timer* next</code>、超时时间<code>time_t expire</code>和一个回调函数<code>void (*cb_func)(client_data*);</code></p><p>回调函数主要作用就是将已经到达超时时间的连接资源断开连接，并从epoll中删除，回调函数的代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">cb_func</span><span class="token punctuation">(</span>client_data<span class="token operator">*</span> user_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>Utils<span class="token operator">::</span>u_epollfd<span class="token punctuation">,</span>EPOLL_CTL_DEL<span class="token punctuation">,</span>              user_data<span class="token operator">-></span>sockfd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从epfd引用的epoll实例中删除（注销）目标文件描述符fd</span>    <span class="token function">assert</span><span class="token punctuation">(</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>user_data<span class="token operator">-></span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    http_conn<span class="token operator">::</span>m_user_count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器容器类—sort-timer-lst"><a href="#定时器容器类—sort-timer-lst" class="headerlink" title="定时器容器类—sort_timer_lst"></a>定时器容器类—sort_timer_lst</h3><p>其实说是定时器容器类，但本质上定时器类本身就包含了指向上个元素和下个元素的指针，因此定时器容器类只是提供了方法来方便构建删除定时器等维护操作</p><p>除了添加、删除、调整定时器的操作以外，还有一个定时任务处理函数<code>tick()</code>，这个函数作用是遍历定时器链表，找到超时的定时器，调用回调函数从内核事件表删除事件，关闭文件描述符，释放连接资源</p><p>随后再将该定时器从链表容器中删除，重置头结点，而tick是由Utils::timer_handler()来调用的</p><p>代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//析构函数</span><span class="token class-name">sort_timer_lst</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">sort_timer_lst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer<span class="token operator">*</span> tmp<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head<span class="token operator">=</span>tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">delete</span> tmp<span class="token punctuation">;</span>        tmp<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加定时器，内部调用私有成员函数add_timer</span><span class="token keyword">void</span> sort_timer_lst<span class="token operator">::</span><span class="token function">add_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>head<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span>tail<span class="token operator">=</span>timer<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果新的定时器超时间小于当前头部结点</span>    <span class="token comment">//直接将当前定时器节点作为头部结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>expire<span class="token operator">&lt;</span>head<span class="token operator">-></span>expire<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        timer<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        head<span class="token operator">-></span>prev<span class="token operator">=</span>timer<span class="token punctuation">;</span>        head<span class="token operator">=</span>timer<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//否则调用私有成员函数，调整内部结点</span>    <span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//私有成员函数的add_timer，用于一般情况添加调整结点</span><span class="token keyword">void</span> sort_timer_lst<span class="token operator">::</span><span class="token function">add_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">,</span>util_timer<span class="token operator">*</span> lst_head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer<span class="token operator">*</span> prev<span class="token operator">=</span>lst_head<span class="token punctuation">;</span>    util_timer<span class="token operator">*</span> tmp<span class="token operator">=</span>prev<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">//遍历当前结点之后的链表，按照超时间找到目标定时器对应的位置，常规双向链表的插入</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>expire<span class="token operator">&lt;</span>tmp<span class="token operator">-></span>expire<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            prev<span class="token operator">-></span>next<span class="token operator">=</span>timer<span class="token punctuation">;</span>            timer<span class="token operator">-></span>next<span class="token operator">=</span>tmp<span class="token punctuation">;</span>            tmp<span class="token operator">-></span>prev<span class="token operator">=</span>timer<span class="token punctuation">;</span>            timer<span class="token operator">-></span>prev<span class="token operator">=</span>prev<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        prev<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        tmp<span class="token operator">=</span>tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历完发现，目标定时器需要放到结尾结点处</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        prev<span class="token operator">-></span>next<span class="token operator">=</span>timer<span class="token punctuation">;</span>        timer<span class="token operator">-></span>prev<span class="token operator">=</span>prev<span class="token punctuation">;</span>        timer<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>tail<span class="token operator">=</span>timer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> sort_timer_lst<span class="token operator">::</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    util_timer<span class="token operator">*</span> tmp<span class="token operator">=</span>timer<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">//被调整的定时器在链表尾部</span>    <span class="token comment">//定时器超时值仍然小于下一个定时器的超时值，不用作出调整</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token operator">||</span>timer<span class="token operator">-></span>expire<span class="token operator">&lt;</span>tmp<span class="token operator">-></span>expire<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">//被调整定时器时链表头部节点，将定时器取出，重新插入</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>prev<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        timer<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//被调整的定时器在内部，将定时器取出，重新插入</span>        timer<span class="token operator">-></span>prev<span class="token operator">-></span>next<span class="token operator">=</span>timer<span class="token operator">-></span>next<span class="token punctuation">;</span>        timer<span class="token operator">-></span>next<span class="token operator">-></span>prev<span class="token operator">=</span>timer<span class="token operator">-></span>prev<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span>timer<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除定时器</span><span class="token keyword">void</span> sort_timer_lst<span class="token operator">::</span><span class="token function">del_timer</span><span class="token punctuation">(</span>util_timer<span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">//链表中只有一个定时器，删除的刚好是这个</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>head<span class="token operator">&amp;&amp;</span>timer<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> timer<span class="token punctuation">;</span>        head<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        tail<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//被删除的定时器为结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>prev<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> timer<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//被删除的定时器为尾结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tail<span class="token operator">=</span>tail<span class="token operator">-></span>prev<span class="token punctuation">;</span>        tail<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> timer<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//被删除的链表内部，常规链表删除结点</span>    timer<span class="token operator">-></span>prev<span class="token operator">-></span>next<span class="token operator">=</span>timer<span class="token operator">-></span>next<span class="token punctuation">;</span>    timer<span class="token operator">-></span>next<span class="token operator">-></span>prev<span class="token operator">=</span>timer<span class="token operator">-></span>prev<span class="token punctuation">;</span>    <span class="token keyword">delete</span> timer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定时任务处理函数</span><span class="token keyword">void</span> sort_timer_lst<span class="token operator">::</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前时间</span>    time_t cur<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    util_timer<span class="token operator">*</span> tmp<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token comment">//遍历定时器链表</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//链表容器为升序排列</span>        <span class="token comment">//当前时间小于定时器的超时时间，后面定时器也没有到期</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">&lt;</span>tmp<span class="token operator">-></span>expire<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment">//当前定时器到期，则调用回调函数，执行定时事件</span>        <span class="token comment">//*回调函数传入的参数类型为 (client_data*)</span>        <span class="token function">cb_func</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将处理后的定时器从链表容器中删除，并重置头结点</span>        <span class="token keyword">this</span><span class="token operator">-></span>head<span class="token operator">=</span>tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            head<span class="token operator">-></span>prev<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> tmp<span class="token punctuation">;</span>        tmp<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// end while</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工具类Utils"><a href="#工具类Utils" class="headerlink" title="工具类Utils"></a>工具类Utils</h3><p>Utils是给外部使用的功能的类（具体也是在WebServer类中调用，利用管道通知主循环执行定时器链表上的定时任务），这个类可以用来对定时器进行设置</p><p>逻辑顺序，设置信号后，触发时调用信号处理函数，信号处理函数通过管道将sig发送到主循环<br>主循环通过管道接收sig，得知有定时器超时，再调用定时器处理任务函数timer_handler()处理，并且再此设定ALARM信号触发，形成循环</p><p>详细代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> Utils<span class="token operator">::</span>u_pipefd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> Utils<span class="token operator">::</span>u_epollfd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定时处理任务，重新定时以不断触发SIGALRM</span><span class="token keyword">void</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">timer_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_timer_lst<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span>m_TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//m_TIMESLOT初始化</span><span class="token keyword">void</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeslot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>m_TIMESLOT<span class="token operator">=</span>timeslot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * EPOLLIN - 当关联的文件可以执行 read ()操作时。 * EPOLLOUT - 当关联的文件可以执行 write ()操作时。 *? EPOLLRDHUP - 代表对端断开连接 ?不懂的事件 * EPOLLET - 设置指定的文件描述符模式为边缘触发，默认的模式是水平触发。 */</span><span class="token comment">//将内核事件表注册读事件，ET模式，选择开启EPOLLONESHOT，开启后同一时间只会有一个线程处理同一个socket</span><span class="token comment">//LT（level trigger水平模式）  ET（edge trigger边缘模式）</span><span class="token keyword">void</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">addfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">bool</span> one_shot<span class="token punctuation">,</span><span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token operator">=</span>fd<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>TRIGMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events<span class="token operator">=</span>EPOLLIN<span class="token operator">|</span>EPOLLET<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events<span class="token operator">=</span>EPOLLIN<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>one_shot<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events<span class="token operator">|=</span>EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span>EPOLL_CTL_ADD<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">setnonblocking</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对文件描述符设置非阻塞，返回fd原来的设置</span><span class="token keyword">int</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">setnonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old_option<span class="token operator">=</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取fd原来的设置</span>    <span class="token keyword">int</span> new_option<span class="token operator">=</span>old_option<span class="token operator">|</span>O_NONBLOCK<span class="token punctuation">;</span><span class="token comment">//添加非阻塞设置</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>F_SETFL<span class="token punctuation">,</span>new_option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为fd应用新设置</span>    <span class="token keyword">return</span> old_option<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//信号处理函数</span><span class="token keyword">void</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">sig_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//为保证函数的可重入性，保留原来的errno</span>    <span class="token comment">//可重入性表示中断后再次进入该函数，环境变量与之前相同，不会丢失数据</span>    <span class="token keyword">int</span> save_errno<span class="token operator">=</span>errno<span class="token punctuation">;</span>    <span class="token keyword">int</span> msg<span class="token operator">=</span>sig<span class="token punctuation">;</span>    <span class="token comment">//将信号从管道写端写入，传输字符类型，而非整型</span>    <span class="token function">send</span><span class="token punctuation">(</span>u_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errno<span class="token operator">=</span>save_errno<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置信号函数</span><span class="token keyword">void</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">addsig</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">bool</span> restart<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//创建sigaction结构体变量</span>    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> sa<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sa<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>    <span class="token comment">//信号处理函数中仅仅发送信号值，不做对应逻辑处理</span>    sa<span class="token punctuation">.</span>sa_handler<span class="token operator">=</span>handler<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>restart<span class="token punctuation">)</span>        sa<span class="token punctuation">.</span>sa_flags<span class="token operator">|=</span>SA_RESTART<span class="token punctuation">;</span>    <span class="token comment">//将所有信号添加到信号集中</span>    <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sa<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//执行sigaction函数</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">sigaction</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span><span class="token operator">&amp;</span>sa<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Utils</span><span class="token operator">::</span><span class="token function">show_error</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> info<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">send</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>info<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http-conn类"><a href="#http-conn类" class="headerlink" title="http_conn类"></a>http_conn类</h2><p>http_conn类主要功能就是处理报文的读取和发送，同时这里还涉及到了主从状态机，从状态机负责读取报文的一行，主状态机负责对该行数据进行解析（主状态机内部调用了从状态机），由于这个类比较大，这里分类来记录</p><p>http_conn的调用是在WebServer类中的，在WebServer类有个成员变量http_conn* 指针，代表http_conn数组。在WebServer类构造函数中，这个指针会进行new：<code>users=new http_conn[MAX_FD];//http_conn类对象，MAX_FD=65536</code>，</p><p>问题：这里有两个成员变量不知道是什么<code>int timer_flag;</code>和<code>int improv;</code>。还有两个结构体也不知道是啥<code>struct stat m_file_stat;</code>和<code>struct iovec m_iv[2];//io向量机制iovec</code></p><p>1、在http_conn.h头文件中，成员变量有两个缓冲区，分别是读缓冲区<code>char m_read_buf[READ_BUFFER_SIZE];</code>，他是用来存储读取的请求报文的数据；另外一个是写缓冲区<code>char m_write_buf[WRITE_BUFFER_SIZE];</code>他是用来存储即将要发出的响应报文的数据</p><h3 id="四个不属于类成员函数"><a href="#四个不属于类成员函数" class="headerlink" title="四个不属于类成员函数"></a>四个不属于类成员函数</h3><p>2、在http_conn.cpp代码文件中有四个不是属于类成员的函数，这四个函数是对epoll相关设置的封装，作为功能性函数代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//将文件描述符设置为非阻塞</span><span class="token keyword">int</span> <span class="token function">set_no_blocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old_option<span class="token operator">=</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> new_option<span class="token operator">=</span>old_option<span class="token operator">|</span>O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>F_SETFL<span class="token punctuation">,</span>new_option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> old_option<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将内核事件注册读事件，ET模式，选择开启EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">add_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">bool</span> one_shot<span class="token punctuation">,</span><span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token operator">=</span>fd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>TRIGMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events<span class="token operator">=</span>EPOLLIN<span class="token operator">|</span>EPOLLET<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events<span class="token operator">=</span>EPOLLIN<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>one_shot<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events<span class="token operator">|=</span>EPOLLONESHOT<span class="token punctuation">;</span>        <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span>EPOLL_CTL_ADD<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_no_blocking</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将fd设置为非阻塞模式</span><span class="token punctuation">&#125;</span><span class="token comment">//从内核事件表中删除描述符，例如：取消对某个客户端的监听</span><span class="token keyword">void</span> <span class="token function">remove_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span>EPOLL_CTL_DEL<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将事件重置为EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">modfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> ev<span class="token punctuation">,</span><span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token operator">=</span>fd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>TRIGMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events<span class="token operator">=</span>ev<span class="token operator">|</span>EPOLLET<span class="token operator">|</span>EPOLLONESHOT<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events<span class="token operator">=</span>ev<span class="token operator">|</span>EPOLLONESHOT<span class="token operator">|</span>EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span>EPOLL_CTL_MOD<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两个初始化init"><a href="#两个初始化init" class="headerlink" title="两个初始化init()"></a>两个初始化init()</h3><p>3、有两个初始化函数，其中一个是外界调用的带参数的初始化方法，实现主要是将外界传进来的参数赋值给当前的连接对象，并将sockfd添加到epoll监听列表中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//初始化连接，外部调用初始化套接字地址</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> sockaddr_in<span class="token operator">&amp;</span> addr<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> TRIGMode<span class="token punctuation">,</span>    <span class="token keyword">int</span> close_log<span class="token punctuation">,</span>string user<span class="token punctuation">,</span>string passwd<span class="token punctuation">,</span>string sql_name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_sockfd<span class="token operator">=</span>sockfd<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_address<span class="token operator">=</span>addr<span class="token punctuation">;</span>        <span class="token comment">//向epollfd中添加一个sockfd，默认开启EPOLLONESHOT模式</span>    <span class="token function">add_fd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>sockfd<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>m_user_count<span class="token punctuation">;</span>        <span class="token comment">//当浏览器出现连接重置时，可能时网站根目录出错或http响应格式出错或者访问的文件中内容完全为空</span>    doc_root<span class="token operator">=</span>root<span class="token punctuation">;</span>    m_TRIGMode<span class="token operator">=</span>TRIGMode<span class="token punctuation">;</span>    m_close_log<span class="token operator">=</span>close_log<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sql_user<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sql_passwd<span class="token punctuation">,</span>passwd<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sql_name<span class="token punctuation">,</span>sql_name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个则是在上面带参数init初始化完成后，再调用无参的init()，需要注意的是这个无参init是私有成员（private）函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//私有init函数，初始化新接受的连接</span><span class="token comment">//check_state默认为分析请求状态</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>mysql<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>bytes_have_send<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>bytes_to_send<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m_check_state<span class="token operator">=</span>CHECK_STATE<span class="token operator">::</span>REQUESTLINE<span class="token punctuation">;</span>m_linger<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//是否长连接</span>m_method<span class="token operator">=</span>METHOD<span class="token operator">::</span>GET<span class="token punctuation">;</span>m_url<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>m_version<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>m_content_length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m_host<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>m_start_line<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m_checked_idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m_read_idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m_write_idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cgi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//?下面两个是什么？</span>timer_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>improv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_read_buf<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span>READ_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_write_buf<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span>WRITE_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">,</span>FILENAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从数据库中导入账户密码到哈希表中"><a href="#从数据库中导入账户密码到哈希表中" class="headerlink" title="从数据库中导入账户密码到哈希表中"></a>从数据库中导入账户密码到哈希表中</h3><p><code>void http_conn::initMysql_result(connection_pool* connPool)</code>这个函数是用于将数据库中的账户密码加载在内存的unordered_map中，思路则是从MySQL连接池中取出一个空闲连接，进行查询语句后将结果集中每一行结果往哈希表变量<code>unordered_map&lt;string,string&gt; m_users</code>中写数据，键为用户名，值为密码（！可改进地方为对密码进行加密处理）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//将数据库中的用户名和密码载入到服务器中的map中</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">initMysql_result</span><span class="token punctuation">(</span>connection_pool<span class="token operator">*</span> connPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//先从连接池中取一个连接</span>    MYSQL <span class="token operator">*</span>mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在user表中检索username，passwd数据，浏览器端输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> <span class="token string">"SELECT username,passwd FROM user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"SELECT error:%s\n"</span><span class="token punctuation">,</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//从表中检索完整的结果集</span>    MYSQL_RES <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回结果集中的列数</span>    <span class="token keyword">int</span> num_fields <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回所有字段结构的数组</span>    MYSQL_FIELD <span class="token operator">*</span>fields <span class="token operator">=</span> <span class="token function">mysql_fetch_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从结果集中获取下一行，将对应的用户名和密码，存入map中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>MYSQL_ROW row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string <span class="token function">temp1</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">temp2</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_users<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> temp2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="read-once-函数"><a href="#read-once-函数" class="headerlink" title="read_once()函数"></a>read_once()函数</h3><p>在WebServer中的<code>deal_with_thread()</code>给调用，用于epoll检测到连接有新的请求进来时，提供proactor模式读取请求</p><p>read_once()函数中又提供了ET和LT读取，在ET读取用的是个while</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//循环读取客户数据，直到无数据可读或对方关闭连接</span><span class="token comment">//在非阻塞ET工作模式下，需要一次性将数据读完</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_read_idx<span class="token operator">>=</span>READ_BUFFER_SIZE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bytes_read<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//*LT读取数据</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_TRIGMode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//recv是接收数据函数，返回的是实际copy到缓冲区的数据字节数</span>        bytes_read<span class="token operator">=</span><span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span>m_read_buf<span class="token operator">+</span>m_read_idx<span class="token punctuation">,</span>READ_BUFFER_SIZE<span class="token operator">-</span>m_read_idx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_read_idx<span class="token operator">+=</span>bytes_read<span class="token punctuation">;</span>        <span class="token comment">//error</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//*ET读取数据，需要一次性将数据读完，所以有个while</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            bytes_read<span class="token operator">=</span><span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span>m_read_buf<span class="token operator">+</span>m_read_idx<span class="token punctuation">,</span>READ_BUFFER_SIZE<span class="token operator">-</span>m_read_idx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//error</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//下面两个错误码在大多数系统下是指同一个东西，指在非阻塞对象下执行了一个阻塞操作</span>                <span class="token comment">//详细可见下面网址：</span>                <span class="token comment">//https://www.dyxmq.cn/program/code/c-cpp/how-to-handle-eagin-and-ewouldblock-error-in-linux-c.html</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>errno<span class="token operator">==</span>EAGAIN<span class="token operator">||</span>errno<span class="token operator">==</span>EWOULDBLOCK<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        m_read_idx<span class="token operator">+=</span>bytes_read<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//end while</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="warning-处理http报文请求与报文响应—-gt-process"><a href="#warning-处理http报文请求与报文响应—-gt-process" class="headerlink" title=":warning:处理http报文请求与报文响应—&gt;process()"></a>:warning:处理http报文请求与报文响应—&gt;process()</h3><p>这个函数是对<strong>报文读取</strong>以及<strong>报文响应</strong>两个大功能，同时也是<strong>线程池中要给调用的process()<strong>，这里在读取请求报文后会将socket在epoll中的事件修改成</strong>EPOLLOUT</strong>事件以便下次WebServer主循环中发送报文</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//子线程从任务队列抽出任务进行处理的函数</span><span class="token comment">//从而完成报文解析工作和报文响应</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HTTP_CODE read_ret<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从缓冲区读取报文，解析</span>    <span class="token comment">//NO_REQUEST，表示请求报文不完整，需要继续接收请求数据</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>read_ret<span class="token operator">==</span>HTTP_CODE<span class="token operator">::</span>NO_REQUEST<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注册并监听读事件</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_sockfd<span class="token punctuation">,</span>EPOLLIN<span class="token punctuation">,</span>m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//调用process_write完成报文的响应工作</span>    <span class="token keyword">bool</span> write_ret<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">process_write</span><span class="token punctuation">(</span>read_ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>write_ret<span class="token punctuation">)</span>        <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注册并监听写事件</span>    <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_sockfd<span class="token punctuation">,</span>EPOLLOUT<span class="token punctuation">,</span>m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主状态机—process-read-以及解析头部、解析请求行、解析消息体"><a href="#主状态机—process-read-以及解析头部、解析请求行、解析消息体" class="headerlink" title="主状态机—process_read()以及解析头部、解析请求行、解析消息体"></a>主状态机—process_read()以及解析头部、解析请求行、解析消息体</h3><p>在主状态机中，每次while循环都会先调用从状态机读取并解析<code>parse_line()</code>当前一行的数据，从解析的结果<code>CHECK_STATE</code>判断是<strong>请求头</strong>、<strong>请求行</strong>和<strong>请求消息体</strong>三个中的哪一个，再进行进一步解析。直到遇到一个空行，表明得到了一个正确的http请求。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//有限状态机处理请求报文</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化从状态机状态，HTTP请求解析结果</span>    LINE_STATUS line_statue<span class="token operator">=</span>LINE_STATUS<span class="token operator">::</span>LINE_OK<span class="token punctuation">;</span>    HTTP_CODE ret<span class="token operator">=</span>HTTP_CODE<span class="token operator">::</span>NO_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> text<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">//?这里的两个判断条件为什么这么写，具体在主状态机逻辑中会讲到</span>    <span class="token comment">//parse_line为从状态机的具体实现</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m_check_state<span class="token operator">==</span>CHECK_STATE<span class="token operator">::</span>CONTENT<span class="token operator">&amp;&amp;</span>line_statue<span class="token operator">==</span>LINE_STATUS<span class="token operator">::</span>LINE_OK<span class="token punctuation">)</span><span class="token operator">||</span>            <span class="token punctuation">(</span>line_statue<span class="token operator">=</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>LINE_STATUS<span class="token operator">::</span>LINE_OK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"get line is ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//m_start_line是每一个数据行在m_read_buf中的起始位置</span>        <span class="token comment">//m_checked_idx表示从状态机在m_read_buf中的读取位置</span>        m_start_line<span class="token operator">=</span>m_checked_idx<span class="token punctuation">;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出调试信息</span>        <span class="token comment">//主状态机三种状态转移逻辑实现</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>m_check_state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> CHECK_STATE<span class="token operator">::</span>REQUESTLINE<span class="token operator">:</span>            <span class="token comment">//解析请求行</span>            ret<span class="token operator">=</span><span class="token function">parse_request_line</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span>HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>            <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"parse_request_line is ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> CHECK_STATE<span class="token operator">::</span>HEADER<span class="token operator">:</span>            <span class="token comment">//解析请求头</span>            ret<span class="token operator">=</span><span class="token function">parse_headers</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span>HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span>HTTP_CODE<span class="token operator">::</span>GET_REQUEST<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//完整的解析GET请求后，跳转到报文响应函数</span>                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"parse_headers is ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> CHECK_STATE<span class="token operator">::</span>CONTENT<span class="token operator">:</span>            <span class="token comment">//解析消息体</span>            ret<span class="token operator">=</span><span class="token function">parse_content</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//完整解析POST请求后，跳转到报文响应函数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span>HTTP_CODE<span class="token operator">::</span>GET_REQUEST<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">LOG_DEBUG</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"parse_content is ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//解析完消息体即完成报文解析，避免再次进入循环，更新line_status</span>            line_statue<span class="token operator">=</span>LINE_STATUS<span class="token operator">::</span>LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>INTERNAL_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//end switch</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end while</span>    <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求行，获得请求方法、目标url、以及http版本号等</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在http报文中，请求行用来说明请求类型、要访问的资源以及所使用的http版本</span>    <span class="token comment">//其中各个部分之间通过\t或空格来分隔</span>        <span class="token comment">//   为了方便以后的阅读了解运作原理，这里举一个请求行用例</span>    <span class="token comment">//   GET /562f25980001b1b106000338.jpg HTTP/1.1</span>    <span class="token comment">//请求行中最先含有空格和\t任意一个字符的位置并返回</span>    <span class="token comment">//*strpbrk -> 依次检验字符串 str1 中的字符，当被检验字符在字符串 str2 中也包含时，则停止检验，并返回该字符位置</span>    m_url<span class="token operator">=</span><span class="token function">strpbrk</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span><span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果没有空格或\t，则报文格式有误</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_url<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将该位置改为\0，用于将前面的数据取出</span>    <span class="token operator">*</span>m_url<span class="token operator">++</span> <span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment">//取出数据，并通过与GET和POST比较判断是哪种请求类型</span>    <span class="token keyword">char</span><span class="token operator">*</span> method<span class="token operator">=</span>text<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        m_method<span class="token operator">=</span>METHOD<span class="token operator">::</span>GET<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_method<span class="token operator">=</span>METHOD<span class="token operator">::</span>POST<span class="token punctuation">;</span>        cgi<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token comment">//错误情况</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>        <span class="token comment">//m_url此时跳过了第一个空格或\t字符，但不知道之后是否还有</span>    <span class="token comment">//将m_url向后偏移，通过查找以继续跳过空格或\t字符，从而指向请求资源的第一个字符</span>    <span class="token comment">//*strcspn -> 检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标</span>    m_url<span class="token operator">+=</span><span class="token function">strspn</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用与判断请求方式相同的逻辑，判断http版本号</span>    m_version<span class="token operator">=</span><span class="token function">strpbrk</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_version<span class="token punctuation">)</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>    <span class="token operator">*</span>m_version<span class="token operator">++</span> <span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>    m_version<span class="token operator">+=</span><span class="token function">strspn</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span><span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 仅支持HTTP/1.1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>    <span class="token comment">//对请求资源前7个字符进行判断</span>    <span class="token comment">//这里只要是有些报文的请求资源中会带有"http://"，这里需要对这种情况单独处理</span>    <span class="token comment">//*strchr -> 在参数 str 所指向的字符串中搜索第一次出现字符 c（一个无符号字符）的位置。</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"http://"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_url<span class="token operator">+=</span><span class="token number">7</span><span class="token punctuation">;</span>        m_url<span class="token operator">=</span><span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//同样增加https情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"https://"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m_url<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">;</span>        m_url<span class="token operator">=</span><span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//一般的不会带有上述两种符号，直接是单独的/或/后面带访问资源</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_url<span class="token operator">||</span>m_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>    <span class="token comment">//当url为/时，显示欢迎界面</span>    <span class="token comment">//*strcat -> 把 src 所指向的字符串追加到 dest 所指向的字符串的结尾</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"judge.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//请求行处理完毕后，将主机状态转移处理请求头</span>    m_check_state<span class="token operator">=</span>CHECK_STATE<span class="token operator">::</span>HEADER<span class="token punctuation">;</span>    <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求的一个头部信息</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断是空行还是请求头</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是GET还是POST请求</span>        <span class="token comment">//!0 is POST</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//POST需要跳转到消息体处理状态</span>            m_check_state <span class="token operator">=</span> CHECK_STATE_CONTENT<span class="token punctuation">;</span>            <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//==0 is GET</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//解析请求头部connection字段</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Connection:"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token comment">//跳过空格和\t字符</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是长连接，则将linger标志设置为true</span>            m_linger <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//解析请求头部Content-length字段</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Content-length:"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">15</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_content_length <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//解析请求头部Host字段</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Host:"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_host <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"oop!unknow header: %s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析消息体</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断buffer中是否读取了消息体</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_read_idx<span class="token operator">>=</span><span class="token punctuation">(</span>m_content_length<span class="token operator">+</span>m_checked_idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        text<span class="token punctuation">[</span>m_content_length<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment">//POST请求中最后为输入的用户名和密码</span>        m_string<span class="token operator">=</span>text<span class="token punctuation">;</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从状态机—parse-line"><a href="#从状态机—parse-line" class="headerlink" title="从状态机—parse_line()"></a>从状态机—parse_line()</h3><p>从状态机用于分析报文中一行的内容</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//从状态机，用于分析出一行内容</span><span class="token comment">//返回值为行的读取状态，有LINE_OK,LINE_BAD,LINE_OPEN</span>http_conn<span class="token operator">::</span>LINE_STATUS http_conn<span class="token operator">::</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token comment">//m_read_idx指向缓冲区m_read_buf的数据末尾的下一个字节</span>    <span class="token comment">//m_checked_idx指向从状态机当前正在分析的字节</span>    <span class="token comment">//!报文以'\r\n'结尾的，这里是要判断该数据行是否完整状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>m_checked_idx<span class="token operator">&lt;</span>m_read_idx<span class="token punctuation">;</span><span class="token operator">++</span>m_checked_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp<span class="token operator">=</span>m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前要分析的字节</span>                <span class="token comment">//如果为'\r'字符，则可能读到完整行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//下一个字符到达了buffer结尾，则接收不完整</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m_checked_idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>m_read_idx<span class="token punctuation">)</span>                <span class="token keyword">return</span> LINE_STATUS<span class="token operator">::</span>LINE_OPEN<span class="token punctuation">;</span>            <span class="token comment">//下一个字符为\n则将\r\n改为\0\0</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_STATUS<span class="token operator">::</span>LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_STATUS<span class="token operator">::</span>LINE_BAD<span class="token punctuation">;</span><span class="token comment">//都不符合则返回语法错误</span>            <span class="token comment">//如果是\n也可能读取得到完整行</span>            <span class="token comment">//一般会出现上一次读取到了\r就到了buf末尾了，这种是没有接收完整的情况</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//前一个字符是\r则接收完整</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m_checked_idx<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_STATUS<span class="token operator">::</span>LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_STATUS<span class="token operator">::</span>LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end for</span>    <span class="token comment">//没有找到\r\n代表接收不完整，要继续接收</span>    <span class="token keyword">return</span> LINE_STATUS<span class="token operator">::</span>LINE_OPEN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do-request-函数"><a href="#do-request-函数" class="headerlink" title="do_request()函数"></a>do_request()函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将初始化的m_real_file赋值为网站根目录</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span>doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"m_url:%s\n"</span><span class="token punctuation">,</span> m_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//找到m_url中/的位置</span>    <span class="token comment">//* strrchr -> 在参数 str 所指向的字符串中搜索最后一次出现字符 c（一个无符号字符）的位置</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token operator">=</span><span class="token function">strrchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理cgi</span>    <span class="token comment">//实现登录和注册校验（在POST请求报文中，这里定义/2为登录，/3为注册）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cgi<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token operator">||</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//根据标志判断是登录检测还是注册检测</span>        <span class="token keyword">char</span> flag<span class="token operator">=</span>m_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the flag is:%c\n"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span>m_url<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span>FILENAME_LEN<span class="token operator">-</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>        <span class="token comment">//将用户名和密码提取出来</span>        <span class="token comment">//user=123&amp;&amp;passwd=123</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            name<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        name<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        password<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//注册</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用户打开注册界面\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果是注册，先检测数据库中是否有重名的</span>            <span class="token comment">//没有重名的，进行增加数据</span>            <span class="token keyword">char</span> <span class="token operator">*</span>sql_insert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"INSERT INTO user(username, passwd) VALUES("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"', '"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//没有重名的，则加进</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m_users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">==</span>m_users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                m_lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span>sql_insert<span class="token punctuation">)</span><span class="token punctuation">;</span>                m_users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token operator">::</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m_lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//有重名</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//如果是登录，直接判断</span>        <span class="token comment">//若浏览器端输入的用户名和密码表可以查找到，返回1，否则返回0</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m_users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">!=</span>m_users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>m_users<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">==</span>password<span class="token punctuation">)</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"/welcome.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span><span class="token string">"/logError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//同步线程登录校验</span>        <span class="token comment">//CGI多进程登录校验</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end 登录注册校验</span>    <span class="token comment">//如果请求资源为/0，表示跳转注册界面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/register.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将网站目录和/register.html进行拼接，更新到m_real_file中</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//如果请求资源为/1，表示跳转登录界面</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将网站目录和log.html进行拼接，更新到m_real_file中</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//如果请求资源为/5，表示跳转到图片请求界面</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/picture.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//如果请求资源/6，表示视频请求界面</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/video.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//如果请求资源为/7，表示跳转关注界面</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/fans.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//如果以上均不符合，则直接将url与网站目录拼接</span>    <span class="token comment">//这里情况是welcome界面，请求服务器上的一个图片</span>    <span class="token keyword">else</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url<span class="token punctuation">,</span>FILENAME_LEN<span class="token operator">-</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过stat获取请求资源文件信息，成功则将信息更新到m_file_stat结构体</span>    <span class="token comment">//失败返回NO_RESOURCE状态，表示资源不存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span><span class="token operator">&amp;</span>m_file_stat<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>NO_RESOURCE<span class="token punctuation">;</span>    <span class="token comment">//判断文件权限，是否可读，不可读则返回FORBIDDEN_REQUEST状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode<span class="token operator">&amp;</span>S_IROTH<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>FORBIDDEN_REQUEST<span class="token punctuation">;</span>        <span class="token comment">//判断文件类型，如果是目录，则返回BAD_REQUEST，表示请求报文有误</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token punctuation">;</span>    <span class="token comment">//以只读方式获取文件描述符，通过mmap将该文件映射到内存中</span>    <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_file_address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span>PROT_READ<span class="token punctuation">,</span>MAP_PRIVATE<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//避免文件描述符的浪费和占用</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//表示请求文件存在，且可以访问</span>    <span class="token keyword">return</span> HTTP_CODE<span class="token operator">::</span>FILE_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//取消mmap映射</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_file_address<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">munmap</span><span class="token punctuation">(</span>m_file_address<span class="token punctuation">,</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用系统函数</span>        m_file_address<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成响应报文—用了IO向量机制"><a href="#生成响应报文—用了IO向量机制" class="headerlink" title="生成响应报文—用了IO向量机制"></a>生成响应报文—用了IO向量机制</h3><p>前面解析完成一个请求报文后，会调用do_request()函数，根据请求报文的解析结果，判断请求资源是否存在、请求动作是否正确等，将相关文件映射到内存，以便后续直接从内存中读取，填充到响应报文返回给浏览器，浏览器解析响应报文后，就生成了我们所看到的网页界面。<br>这里使用了IO向量机制，IO向量即struct iovec，iovec结构体中可以存放多个buffer，使用对应的readv和writev读写文件，可以按顺序读到多个buffer中，以及将多个buffer的内容写到文件描述符。<br>此处m_iv[0]指向m_write_buf（存放响应报文头部内容），m_iv[1]指向m_file_address（使用mmap将请求资源映射到的内存），然后可以使用writev按顺序将其写到socket中。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="添加响应报文函数"><a href="#添加响应报文函数" class="headerlink" title="添加响应报文函数"></a>添加响应报文函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//添加响应报文的公共函数</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果写入内容超出m_write_buf大小则报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_write_idx <span class="token operator">>=</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//定义可变参数列表</span>    va_list arg_list<span class="token punctuation">;</span>    <span class="token comment">//将变量arg_list初始化为传入参数</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将数据format从可变参数列表写入缓冲区写，返回写入数据的长度</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>m_write_buf <span class="token operator">+</span> m_write_idx<span class="token punctuation">,</span> WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">,</span> format<span class="token punctuation">,</span> arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果写入的数据长度超过缓冲区剩余空间，则报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token punctuation">(</span>WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更新m_write_idx位置</span>    m_write_idx <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token comment">//清空可变参列表</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"request:%s"</span><span class="token punctuation">,</span> m_write_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加状态行</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s %d %s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加消息报头，具体的添加文本长度、连接状态和空行</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span>content_len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加Content-Length，表示响应报文的长度</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Length:%d\r\n"</span><span class="token punctuation">,</span> content_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加文本类型，这里是html</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Type:%s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加连接状态，通知浏览器端是保持连接还是关闭</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Connection:%s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m_linger <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"keep-alive"</span> <span class="token operator">:</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加空行</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加文本content</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//向m_write_buf准备好响应报文</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//内部错误，500</span>    <span class="token keyword">case</span> HTTP_CODE<span class="token operator">::</span>INTERNAL_ERROR<span class="token operator">:</span>        <span class="token comment">//状态行</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span>error_500_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消息报头</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">//报文语法有误，404</span>    <span class="token keyword">case</span> HTTP_CODE<span class="token operator">::</span>BAD_REQUEST<span class="token operator">:</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span>error_404_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">//资源没有访问权限，403</span>    <span class="token keyword">case</span> HTTP_CODE<span class="token operator">::</span>FORBIDDEN_REQUEST<span class="token operator">:</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span>error_403_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">//文件存在，200</span>    <span class="token keyword">case</span> HTTP_CODE<span class="token operator">::</span>FILE_REQUEST<span class="token operator">:</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>ok_200_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果请求的资源存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第一个iovec指针指向响应报文缓冲区，长度指向m_write_idx</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token operator">=</span>m_write_buf<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">=</span>m_write_idx<span class="token punctuation">;</span>            <span class="token comment">//第二个iovec指针指向mmap返回的文件指针，长度指向文件的大小</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token operator">=</span>m_file_address<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">=</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            m_iv_count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//发送的全部数据为响应报文头部信息和文件大小</span>            bytes_to_send<span class="token operator">=</span>m_write_idx<span class="token operator">+</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果请求资源大小为0，则返回空白html文件</span>            <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ok_string<span class="token operator">=</span><span class="token string">"&lt;html>&lt;body>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//?return true;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//除了FILE——REQUEST状态外，其余状态只申请一个iovec，指向响应报文缓冲区</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token operator">=</span>m_write_buf<span class="token punctuation">;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">=</span>m_write_idx<span class="token punctuation">;</span>    m_iv_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送响应报文—http-conn-write"><a href="#发送响应报文—http-conn-write" class="headerlink" title="发送响应报文—http_conn::write()"></a>发送响应报文—http_conn::write()</h3><p>在生成响应报文后，epoll事件就会在线程池的<code>process()</code>方法最后修改成EPOLLOUT，随后也是通过WebServer主循环检测，通过<code>deal_with_write()</code>来调用http_conn::write()进行报文发送，由此整个传输过程完毕</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 服务器调用process_write完成响应报文，随后注册epollout事件，服务器主线程检测写事件， * 同时调用http_conn::write()函数将响应报文发送给浏览器端 *  * 在生成响应报文时初始化byte_to_send，包括头部信息和文件数据大小。 * 通过writev()函数循环发送响应报文数据 * 根据返回值更新byte_have_send和iovec结构体的指针和长度，并判断响应报文整体是否发送成功 */</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//若要发送的数据长度为0，表示响应报文为空，一般不会出现这种情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_to_send<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_sockfd<span class="token punctuation">,</span>EPOLLIN<span class="token punctuation">,</span>m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将响应报文的状态行、消息头、空行和响应正文发送给浏览器端</span>        temp<span class="token operator">=</span><span class="token function">writev</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span>m_iv<span class="token punctuation">,</span>m_iv_count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errno<span class="token operator">==</span>EAGAIN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//判断写缓冲区是否满了</span>                <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_sockfd<span class="token punctuation">,</span>EPOLLOUT<span class="token punctuation">,</span>m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果不是缓冲区问题，则取消映射，断开连接</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//更新发送字节的长度</span>        bytes_have_send<span class="token operator">+=</span>temp<span class="token punctuation">;</span>        bytes_to_send<span class="token operator">-=</span>temp<span class="token punctuation">;</span>        <span class="token comment">//如果第一个iovec头部信息发送完成，发送第二个iovec数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_have_send<span class="token operator">>=</span>m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token operator">=</span>m_file_address<span class="token operator">+</span><span class="token punctuation">(</span>bytes_have_send<span class="token operator">-</span>m_write_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">=</span>bytes_to_send<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//否则继续发送第一个iovec头部信息数据</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token operator">=</span>m_write_buf<span class="token operator">+</span>bytes_have_send<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">=</span>m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token operator">-</span>bytes_have_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//剩余发送字节为0时（数据全部发送完毕）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_to_send<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在epoll树上重置EPOLLONESHOT事件</span>            <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span>m_sockfd<span class="token punctuation">,</span>EPOLLIN<span class="token punctuation">,</span>m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断浏览器请求是否为长连接</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m_linger<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//重新初始化HTTP对象</span>                <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//?默认返回false</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="有待查询的问题"><a href="#有待查询的问题" class="headerlink" title="有待查询的问题"></a>有待查询的问题</h1><ol><li>条件变量和信号量的区别以及各自的使用环境</li><li>如何改进对数据库的账户和密码加密</li><li>如果收到资源超时信号，其实还是要循环定时器链表，找到超时的连接删掉，有点消耗性能，如何改进？</li></ol><h1 id="自己的问题"><a href="#自己的问题" class="headerlink" title="自己的问题"></a>自己的问题</h1><p>这里的问题是自己在复习过程中发现的问题，记录下来方便自己梳理</p><h2 id="谁把请求放入了线程池中"><a href="#谁把请求放入了线程池中" class="headerlink" title="谁把请求放入了线程池中"></a>谁把请求放入了线程池中</h2><p>在WebServer.cpp中主循环中描述了，如果epoll收到请求读事件，则会跳转到<code>deal_with_thread()</code>函数，其中会判断actor模式而用不同的添加请求到请求队列方式（reactor用m_pool-&gt;append()；proactor用m_pool-&gt;append_p()）</p><p><strong>注意：append进去的参数类型是http_conn*类型</strong></p><h2 id="谁调用了worker"><a href="#谁调用了worker" class="headerlink" title="谁调用了worker()"></a>谁调用了worker()</h2><p>当然是在线程池初始化时创建的线程啦</p><p>这些线程被创建后用pthread_detach实现线程分离，则会运行<code>worker()</code>，而<code>worker()</code>里面又调用着<code>threadpool&lt;&gt;::run()</code>，此时如果请求队列里面有请求则线程会因为信号量响应从而处理请求，否则的话线程会阻塞等待</p><h2 id="为什么又要有client-data数组users-timer，又要有http-conn数组users，它们各自作用是啥"><a href="#为什么又要有client-data数组users-timer，又要有http-conn数组users，它们各自作用是啥" class="headerlink" title="为什么又要有client_data数组users_timer，又要有http_conn数组users，它们各自作用是啥"></a>为什么又要有client_data数组users_timer，又要有http_conn数组users，它们各自作用是啥</h2><p>先来解释下这个问题，当时在分析WebServer.cpp代码时候发现有两个下标都是通过fd来访问的数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_FD<span class="token operator">=</span><span class="token number">65536</span><span class="token punctuation">;</span><span class="token comment">//最大文件描述符</span>client_data<span class="token operator">*</span> users_timer<span class="token operator">=</span><span class="token keyword">new</span> client_data<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span>http_conn<span class="token operator">*</span> users<span class="token operator">=</span><span class="token keyword">new</span> http_conn<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而问题就是为什么要有这两个东西，换个意思是他们各自的作用是啥呢？</p><p>首先对于http_conn来说，它是描述每个客户端fd的连接对象，每个对象又包括当前客户端请求状态（如请求报文数据，读还是写等），因此需要开个http_conn类型的数组来存储多个连接对象</p><p>再看到client_data数组，它本身是一个结构体，结构如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//连接资源</span><span class="token keyword">struct</span> <span class="token class-name">client_data</span><span class="token punctuation">&#123;</span>        <span class="token comment">//客户端socket地址</span>    sockaddr_in addreess<span class="token punctuation">;</span>    <span class="token comment">//socket文件描述符</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token comment">//定时器</span>    util_timer<span class="token operator">*</span> timer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个连接资源可以记录一个定时器，所以这个client_data数组就是记录给连接进来的客户端附加一个定时器的作用</p><h2 id="接受到请求时怎么知道用户访问网页的哪个界面"><a href="#接受到请求时怎么知道用户访问网页的哪个界面" class="headerlink" title="接受到请求时怎么知道用户访问网页的哪个界面"></a>接受到请求时怎么知道用户访问网页的哪个界面</h2><p>在http_conn.cpp中的<code>do_request()</code>就有判断，是通过判断浏览器发送过来的报文中<code>&lt;form action=0&gt;</code>这个action值来确定的，在这个服务器中3是注册操作，2是登录操作、0是注册界面、1是登录界面、5、6、7分别是图片、视频、关注界面</p><p>下面拿注册界面为例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//如果请求资源为/0，表示跳转注册界面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token operator">*</span> m_url_real<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span><span class="token string">"/register.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将网站目录和/register.html进行拼接，更新到m_real_file中</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file<span class="token operator">+</span>len<span class="token punctuation">,</span>m_url_real<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_url_real<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务器是怎么将静态资源文件传输给客户端的"><a href="#服务器是怎么将静态资源文件传输给客户端的" class="headerlink" title="服务器是怎么将静态资源文件传输给客户端的"></a>服务器是怎么将静态资源文件传输给客户端的</h2><p>其实访问静态资源也是和上面访问网页那样，如果识别的标志action都不是服务器中给定的标志，那就是访问静态资源请求，也是通过io向量然后writev()给客户端实现静态资源传输</p><p>需要注意：必须将静态资源文件属性中的<code>其它</code>设为：<code>只读</code>或<code>读写</code>权限，否则客户端时访问不了的</p><h2 id="项目中的Reactor和Proactor模式如何体现"><a href="#项目中的Reactor和Proactor模式如何体现" class="headerlink" title="项目中的Reactor和Proactor模式如何体现"></a>项目中的Reactor和Proactor模式如何体现</h2><p>Reactor：epoll检测到读和写事件时候都会把请求添加到请求队列，让工作线程来完成读写数据、接受新连接等操作</p><p>Proactor：主线程从当异步线程，处理好读写事件后再添加到请求队列让工作线程发送数据</p><p>下面是知乎上大神给出的答案</p><blockquote><p>以Proactor模式为例的工作流程即是：主线程充当异步线程，负责监听所有socket上的事件</p><p>若有新请求到来，主线程接收之以得到新的连接socket，然后往epoll内核事件表中注册该socket上的读写事件</p><p>如果连接socket上有读写事件发生，主线程从socket上接收数据，并将数据封装成请求对象插入到请求队列中</p><p>所有工作线程睡眠在请求队列上，当有任务到来时，通过竞争（如互斥锁）获得任务的接管权</p><p><strong>Reactor、Proactor模型的区别？</strong></p><p><strong>Reactor模式</strong>：要求主线程（I/O处理单元）只负责监听文件描述符上是否有事件发生（可读、可写），若有，则立即通知工作线程，将socket可读可写事件放入请求队列，<strong>读写数据、接受新连接及处理客户请求均在工作线程中完成。(需要区别读和写事件)</strong></p><p><strong>Proactor模式</strong>：主线程和内核负责处理读写数据、接受新连接等<strong>I/O操作</strong>，<strong>工作线程仅负责业务逻辑（给予相应的返回URL）</strong>，如处理客户请求。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章是用来记录并复习之前写过的一个TinyWebServer项目，希望可以梳理一下思路，更进一步吸收里面的知识点，前面几个部分是网上找的知识点总结，后面也有自己对项目的分析&lt;/p&gt;
&lt;h1 id=&quot;WebServer总体概述&quot;&gt;&lt;a href=&quot;#WebServer总体</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="WebServer" scheme="http://sakura-pub.top/tags/WebServer/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>C++知识点总结</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-11T01:22:33.000Z</published>
    <updated>2022-06-23T05:26:13.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 在写这个文章的时候已经是大三的寒假了，因此也要开始为实习的工作做准备了，这里就专门开了个文章来记录我在网上找到的一些<strong>C++面经</strong>，文章也是不断进行更新的，希望到时候能够找到一个满意的Offer📝</p><h1 id="C-语言问答题"><a href="#C-语言问答题" class="headerlink" title="C++语言问答题"></a>C++语言问答题</h1><p>首先是C++的语言特性问题，有许多问题都是经常问到的，这里逐个记录下来</p><h2 id="strcpy-函数有什么缺陷，如何优化"><a href="#strcpy-函数有什么缺陷，如何优化" class="headerlink" title="strcpy 函数有什么缺陷，如何优化"></a>strcpy 函数有什么缺陷，如何优化</h2><p><code>strcpy</code>是c语言头文件中的<code>&lt;string.h&gt;</code>的库函数，是用来复制字符串，它的函数原型为<code>char * strcpy( char * dst, const char * src )</code>，这个函数把字符串src复制到一分配好的字符串空间dst中，复制的时候包括标志字符串结尾的空字符一起复制。操作成功，返回dst，否则返回NULL</p><p>它的<strong>缺陷</strong>则是没有字符串长度的判断，当复制进去的字符串<code>src</code>长度大于了原来分配好空间的字符串<code>dst</code>长度时，函数会把字符串后面的空间也覆盖掉，造成<strong>缓冲溢出</strong>情况</p><p>想要优化这个缺陷其实很简单，只需要自己加一个判断长度语句就行了</p><h2 id="指针和引用区别"><a href="#指针和引用区别" class="headerlink" title="指针和引用区别"></a>指针和引用区别</h2><p>这里指针和引用区别有四个点</p><ol><li>指针所指向的内存可以在程序运行期间改变，而引用所绑定的对象一旦绑定之后不允许改变（是否可变）</li><li>指针本身在内存中是占空间的（32位系统指针占4字节，64位系统指针占8字节），引用相当于变量别名，在内存中不占空间（是否占空间）</li><li>指针可以为空，引用则必须绑定对象（是否可为空）</li><li>指针可以有多级，引用只能有一级（是否能为多级）</li></ol><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p>这里的堆和栈是指内存中的堆栈，堆栈是一个特定的存储区或寄存器</p><ol><li>申请方式：栈是系统自动分配的，而堆则是程序员主动申请的</li><li>申请后系统的响应方式：分配栈空间，如果剩余空间大于申请空间，则分配成功，否则分配失败栈溢出；分配堆空间，堆在内存中呈现的方式类似于链表（每个节点记录着空闲的空间），在链表中寻求第一个大于申请空间的节点分配给程序，并将该节点删除；值得注意的是，大多数系统中该块空间的首地址存放的是本次的是本次分配空间的大小，便于释放时将该块空间重新添加到链表上。</li><li>栈在内存中是一块连续的空间（向低地址扩展），最大的容量是系统预定好的；堆是不连续的空间（向高地址扩展）</li><li>申请效率：栈是系统自动分配的，申请效率高，但是程序员无法控制；堆是由程序员自主申请分配的，效率较低，并且容易产生碎片空间</li><li>存放的内容：栈中存放的是局部变量，函数的参数；堆存放的内容由程序员控制</li></ol><h2 id="new和delete是怎么实现的，new和malloc有什么区别"><a href="#new和delete是怎么实现的，new和malloc有什么区别" class="headerlink" title="new和delete是怎么实现的，new和malloc有什么区别"></a>new和delete是怎么实现的，new和malloc有什么区别</h2><p>new/delete和malloc/free都是很熟悉的，经常要用到</p><ol><li>属性：malloc和free是库函数，需要头文件的支持；new和delete是关键字，要编译器的支持</li><li>参数：使用new分配空间时，无需指定分配空间的大小，编译器会根据数据类型自动计算；而使用malloc申请分配空间时，则需确定所要分配空间的大小</li><li>返回值：new所分配后返回的是一个对应数据类型的指针，无需强制类型转换，符合类型安全的操作符；而malloc申请空间时，返回的是void*类型的指针，需要进行强制类型转换，转换为对象类型指针</li><li>分配失败情况：new分配失败会抛出<code>bad_alloc</code>异常，malloc分配失败则返回空指针</li><li>重载：new/delete均可进行重载，而malloc/free不能</li><li>自定义类型实现：new 首先调用 operator new() 函数申请空间（底层通过 malloc 实现），然后调用构造函数进行初始化，最后返回自定义类型的指针；delete 首先调用析构函数，然后调用 operator delete() 释放空间（底层通过 free 实现）。malloc/free 无法进行自定义类型的对象的构造和析构</li><li>内存区域：new操作符从<strong>自由存储区</strong>上为对象分配空间，而malloc则是在<strong>堆</strong>上分配空间。（<strong>自由存储区不等于堆</strong>）</li></ol><h2 id="C和C-的区别"><a href="#C和C-的区别" class="headerlink" title="C和C++的区别"></a>C和C++的区别</h2><ul><li><p>C 是面向过程的编程，特点是函数；C++ 是面向对象的编程，特点是类。（特性）</p></li><li><p>C 主要用在嵌入式开发、驱动开发和硬件直接打交道的领域；C++ 可以用于应用层的开发、用户界面开发等和操作系统直接打交道的领域。（应用领域）</p></li><li><p>C++ 继承了C的底层操作特性，增加了面向对象的机制，增加了泛型编程、异常处理、运算符重载，还增加了命名空间，避免了命名冲突。（相较于 C 的升级）</p></li></ul><h2 id="C-、Java-的联系与区别，包括语言特性、垃圾回收、应用场景等（java-的垃圾回收机制）"><a href="#C-、Java-的联系与区别，包括语言特性、垃圾回收、应用场景等（java-的垃圾回收机制）" class="headerlink" title="C++、Java 的联系与区别，包括语言特性、垃圾回收、应用场景等（java 的垃圾回收机制）"></a>C++、Java 的联系与区别，包括语言特性、垃圾回收、应用场景等（java 的垃圾回收机制）</h2><h3 id="二者在语言特性上有很大的区别："><a href="#二者在语言特性上有很大的区别：" class="headerlink" title="二者在语言特性上有很大的区别："></a>二者在语言特性上有很大的区别：</h3><ul><li>指针：C++ 可以直接操作指针，容易产生内存泄漏以及非法指针引用的问题；JAVA 并不是没有指针，虚拟机(JVM)内部还是使用了指针，只是编程人员不能直接使用指针，不能通过指针来直接访问内存，并且 JAVA 增加了内存管理机制</li><li>多重继承：C++ 支持多重继承，允许多个父类派生一个类，虽然功能很强大，但是如果使用的不当会造成很多问题，例如：菱形继承；JAVA 不支持多重继承，但允许一个类可以继承多个接口，可以实现 C++ 多重继承的功能，但又避免了多重继承带来的许多不便</li><li>数据类型和类：C++ 可以将变量或函数定义成全局，但是JAVA是完全面向对象的语言，除了基本的数据类型之外，其他的都作为类的对象，包括数组。</li></ul><h3 id="垃圾回收："><a href="#垃圾回收：" class="headerlink" title="垃圾回收："></a>垃圾回收：</h3><ul><li>JAVA 语言一个显著的特点就是垃圾回收机制，编程人员无需考虑内存管理的问题，可以有效的防止内存泄漏，有效的使用空闲的内存</li><li>JAVA 所有的对象都是用 new 操作符建立在内存堆栈上，类似于 C++ 中的 new 操作符，但是当要释放该申请的内存空间时，JAVA 自动进行内存回收操作，C++ 需要程序员自己释放内存空间，并且 JAVA 中的内存回收是以线程的方式在后台运行的，利用空闲时间。</li></ul><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul><li><p>java 运行在虚拟机上，和开发平台无关，C++ 直接编译成可执行文件，是否跨平台在于用到的编译器的特性是否有多平台的支持，</p></li><li><p>C++ 可以直接编译成可执行文件，运行效率比 JAVA 高</p></li><li><p>JAVA 主要用来开发 web 应用</p></li><li><p>C++ 主要用在嵌入式开发、网络、并发编程的方面</p></li></ul><h2 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h2><p>C++中的struct是对C中的struct进行了扩充，它可以包含成员函数、能够继承、也能够实现多态，而struct与class最本质的区别在于默认的访问控制：struct默认继承访问权限是<strong>public</strong>，class的默认继承访问权限是<strong>private</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//B是class，所以是private继承</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//C是struct，所以是public继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class A"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">&#123;</span><span class="token comment">//由于 B 是 struct，A的继承级别为 public(取决于B的默认继承级别)</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token comment">//由于 C 是 class，B的继承级别为 private(取决于C的默认继承级别)，所以无法访问基类B中的printB函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A ex1<span class="token punctuation">;</span>    ex1<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class A</span>    B ex2<span class="token punctuation">;</span>    ex2<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class A</span>    ex2<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class B</span>    C ex3<span class="token punctuation">;</span>    ex3<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: 'B' is not an accessible base of 'C'</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，class可以使用模板，而struct不能</p><h2 id="define和const的区别（编译阶段、安全性、内存占用等）"><a href="#define和const的区别（编译阶段、安全性、内存占用等）" class="headerlink" title="define和const的区别（编译阶段、安全性、内存占用等）"></a>define和const的区别（编译阶段、安全性、内存占用等）</h2><ul><li>编译阶段：define是在编译预处理阶段起作用，const是在编译阶段和程序运行阶段起作用</li><li>安全性：define定义的宏常量没有数据类型，只是进行简单的替换，不会进行类型安全的检测；const定义的只读变量是有类型的，会进行判断，可以避免低级错误</li><li>内存占用：define所定义的常量，在程序中使用多少次就会替换多少次，内存中有多个备份；const定义的只读变量在程序运行过程中只有一份</li><li>调试：define定义的常量不能进行调试，因为在预编译阶段就已经替换了；const定义的只读变量可以进行调试</li></ul><p>const的优点：</p><ul><li>有数据类型，在定义式可进行安全性检查</li><li>可调式</li><li>占用较少的空间</li></ul><h2 id="C-中的static"><a href="#C-中的static" class="headerlink" title="C++中的static"></a>C++中的static</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>静态变量存储在<strong>静态存储区</strong>（存储在静态存储区的变量，如果不显式地对其进行初始化，系统会将其初始化为0），在程序执行期间，<strong>对应的存储空间不会释放</strong>，一直到程序结束才会释放。</p><p> 对全局变量而言，存储方式没有什么改变，因为<strong>全局变量和全局静态变量都存储在静态存储区</strong>。</p><p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。    </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">/* 全局变量 */</span> <span class="token comment">// 函数定义</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 局部静态变量</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"变量 i 为 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" , 变量 count 为 "</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//static在类里面</span><span class="token keyword">class</span> <span class="token class-name">staticTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> staticTest<span class="token operator">::</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//必须在main前面先初始化staic变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    staticTest<span class="token operator">::</span>num<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span>staticTest<span class="token operator">::</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//num=6</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="左值和右值、左值引用和右值引用"><a href="#左值和右值、左值引用和右值引用" class="headerlink" title="左值和右值、左值引用和右值引用"></a>左值和右值、左值引用和右值引用</h2><h2 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h2><p>左值是存储单元内的值，即是有实际存储地址的；</p><p>右值则不是存储单元内的值，比如它可能是寄存器内的值也可能是<a href="https://www.zhihu.com/search?q=%E7%AB%8B%E5%8D%B3%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:102830868%7D">立即数</a>。</p><p>例如<code>int i=1</code>代码中，<code>i</code>是左值，<code>1</code>是右值</p><h2 id="左值引用和右值引用"><a href="#左值引用和右值引用" class="headerlink" title="左值引用和右值引用"></a>左值引用和右值引用</h2><h3 id="左值引用"><a href="#左值引用" class="headerlink" title="左值引用"></a>左值引用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token comment">// 定义一个左值引用变量</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>      <span class="token comment">// 通过左值引用修改引用内存的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>左值引用在汇编层面其实和普通的指针是一样的；</em>定义引用变量必须初始化，因为引用其实就是一个别名，需要告诉编译器定义的是谁的引用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span>var <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码是无法编译通过的，因为10无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中，可以通过下述方法解决：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>var <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用常引用来引用常量数字10，因为此刻内存上产生了临时变量保存了10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量，相当于下面的操作：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>var <span class="token operator">=</span> temp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据上述分析，得出如下结论：</p><ul><li>左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；<br>但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被const修饰成常量引用了。</li></ul><h3 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h3><p>C++11 引入了右值引用的概念，可以很好解决引用一个常数的问题，具体使用例子如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref_a_right <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// ok</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref_a_left <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 编译不过，右值引用不可以指向左值</span> ref_a_right <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 右值引用的用途：可以修改右值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么右值引用可以指向左值吗？答案是可以的，只要使用<code>std::move()</code>就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// a是个左值</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>ref_a_left <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 左值引用指向左值</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref_a_right <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过std::move将左值转化为右值，可以被右值引用指向</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span> <span class="token comment">// 打印结果：5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上边的代码里，看上去是左值a通过std::move移动到了右值ref_a_right中，那是不是a里边就没有值了？并不是，打印出a的值仍然是5。</p><p><code>std::move</code>是一个非常有迷惑性的函数，不理解左右值概念的人们往往以为它能把一个变量里的内容移动到另一个变量，<strong>但事实上std::move移动不了什么，唯一的功能是把左值强制转化为右值</strong>，让右值引用可以指向左值。其实现等同于一个类型转换：<code>static_cast&lt;T&amp;&amp;&gt;(lvalue)</code>。 所以，<strong>单纯的std::move(xxx)不会有性能提升</strong>，std::move的使用场景在第三章会讲。</p><p>同样的，右值引用能指向右值，本质上也是把右值提升为一个左值，并定义一个右值引用通过std::move指向该左值：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref_a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>ref_a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">//等同于以下代码：</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref_a <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>ref_a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-多态"><a href="#C-多态" class="headerlink" title="C++多态"></a>C++多态</h2><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><hr><h1 id="操作系统知识"><a href="#操作系统知识" class="headerlink" title="操作系统知识"></a>操作系统知识</h1><h2 id="线程的同步和互斥"><a href="#线程的同步和互斥" class="headerlink" title="线程的同步和互斥"></a>线程的同步和互斥</h2><p>线程的同步：指多线程通过特定的手段（如互斥量）来控制线程之间的执行顺序。</p><p>线程的互斥：实指对共享资源的约束访问。多线程环境中，某些资源只允许一个线程使用，这类资源成为临界资源，线程之间的关系就表现为互斥的。</p><p>线程之间的同步和互斥是通过操作系统的信号量和 PV 操作原语来实现的。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>POSIX信号量是操作系统中所用到的PV原子操作，它广泛用于进程或线程间的同步与互斥。<br> 信号量本质上是一个非负的整数计数器，它被用来控制对公共资源的访问。</p><ul><li>PV原子操作是对非负整数信号量sem的操作<ul><li>P操作<br> 判断sem是否大于0<br> 如果是就执行sem=sem-1;访问资源<br> 否则就阻塞线程，直到sem大于0为止</li><li>V操作<br> 判断在该信号量队列中是否有被阻塞的线程<br> 如果有就唤醒排在第一的阻塞线程，sem=sem+1<br> 否则就只执行sem=sem+1;</li></ul></li></ul><p><strong>信号量</strong>具体函数原型如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//用于创建一个信号量，并初始化它的值。</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//和sem_trywait()都相当于P操作，在信号量大于零时它们都能将信号量的值减一，两者的区别在于若信号量等于零时sem_wait()将会阻塞进程，而sem_trywait()//则会立即返回。</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//相当于V操作，它将信号量的值加一同时发出信号来唤醒等待的进程。</span><span class="token function">sem_getvalue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//用于得到信号量的值。</span><span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//用于删除信号量。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.rmb.bdstatic.com/bjh/651f351873bdca8bc50b4125d52868a0.png" alt="24464153-930a226a5fb88edb.png"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/757c00d008d7423d50835a92a917d68a.png" alt="24464153-6443a6caaa02bce4.png"></p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ul><li>互斥锁是用一种简单的加锁方法来控制对共享资源的原子操作。</li><li>互斥锁只有两种状态：上锁和解锁。</li><li>在同一时刻只能有一个线程掌握某个互斥锁，拥有上锁状态的线程能够对共享资源进行操作。若其他线程希望上锁一个已经被上锁的互斥锁，则该线程就会挂起，直到上锁的线程释放掉互斥锁为止。</li><li>这把互斥锁保证让每个线程对共享资源按顺序进行原子操作。</li><li>互斥锁机制主要包括下面的基本函数。</li></ul><p>互斥锁具体的函数原型如下：</p><p><img src="https://i0.hdslb.com/bfs/album/f5497ff37325869457dc0afc87b33ff881021a37.png"></p><p><img src="https://i0.hdslb.com/bfs/album/377e0f4fd75656ce169dc8661d8b08753834d5d3.png"></p><p>函数<code>pthread_mutex_trylock</code>是<code>pthread_mutex_lock</code>的非阻塞版本，表示尝试加锁，如果该互斥锁已经锁定，则返回一个不为0的错误值，如果该互斥锁没有锁定，则返回0，表示尝试加锁成功</p><ul><li>互斥锁可以分为快速互斥锁、递归互斥锁和检错互斥锁。<br> 1.快速锁是指调用线程会阻塞直至拥有互斥锁的线程解锁为止。<br> 2.递归互斥锁能够成功地返回，并且增加调用线程在互斥上加锁的次数。<br> 3.检错互斥锁则为快速互斥锁的非阻塞版本，它会立即返回并返回一个错误信息。<br> 默认属性为快速互斥锁。</li><li>这三种锁的区别主要在于其他未占有互斥锁的线程在希望得到互斥锁时是否需要阻塞等待。</li></ul><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>什么是条件变量？</p><p>当一个线程互斥地访问某个变量时，它可能发现在其它线程改变状态之前，它什么也做不了。此时若该线程非阻塞轮询检测条件是否满足不合理，引入条件变量，可以在条件满足唤醒该线程。</p><p>条件变量是实现同步的工具</p><p>原生线程库提供描述临界资源状态的一个对象。之前在不断申请锁，检测锁，正是因为不知道临界资源的状态，这是一种轮询的方式，也是十分消耗cpu资源的，所以我们需要通过某种手段直到临界资源的状态–条件变量。</p><p>即通过一种机制提醒在条件变量下等的是否有资源了。有资源就将在条件变量下的线程唤醒即可。相当于一个铃铛。</p><p>条件变量为何要搭配互斥量使用？</p><ul><li>条件等待是线程间同步的一种手段，如果只有一个线程，条件不满足，一直等下去都不会满足，所以必须要有一个线程通过某些操作，改变共享变量，使原先不满足的条件变得满足，并且友好的通知等待在条件变量上的线程。</li><li>条件不会无缘无故的突然变得满足了，必然会牵扯到共享数据的变化。所以一定要用互斥锁来保护。没有互斥锁就无法安全的获取和修改共享数据。</li><li>pthread_cond_wait进入该函数后，会去看条件变量等于0不？等于，就把互斥量变成1，直到cond_ wait返回，把条件量改成1，把互斥量恢复成原样。说白就是条件不满足会主动释放锁，在条件变量下等待，直到条件满足并且重新获取锁！！</li></ul><p>条件变量的函数原型如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 初始化一个条件变量</span><span class="token keyword">int</span> <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span>    <span class="token keyword">const</span> pthread_condattr_t <span class="token operator">*</span>restrict attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放一个条件变量</span><span class="token keyword">int</span> <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待条件满足</span><span class="token keyword">int</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>restrict cond<span class="token punctuation">,</span>    pthread_mutex_t <span class="token operator">*</span>restrict mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 唤醒至少一个等待条件的线程</span><span class="token keyword">int</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 唤醒所有等待条件的线程</span><span class="token keyword">int</span> <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生产者消费者模型（使用了互斥锁和条件变量来完成）"><a href="#生产者消费者模型（使用了互斥锁和条件变量来完成）" class="headerlink" title="生产者消费者模型（使用了互斥锁和条件变量来完成）"></a>生产者消费者模型（使用了互斥锁和条件变量来完成）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token comment">// 消息结构</span><span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>       <span class="token comment">// 消息数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>queue<span class="token punctuation">;</span>  <span class="token comment">// 消息队列</span>pthread_cond_t qcond <span class="token operator">=</span> PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span>    <span class="token comment">// 简化初始化条件变量和互斥体</span>pthread_mutex_t qlock <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span class="token comment">// 随机数范围[mi, ma]</span><span class="token keyword">int</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token keyword">int</span> mi<span class="token punctuation">,</span> <span class="token keyword">int</span> ma<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>RAND_MAX <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">*=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ma <span class="token operator">-</span> mi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>r <span class="token operator">+</span> mi<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印消息</span><span class="token keyword">void</span> <span class="token function">print_msg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">>>>msg: %d\n"</span><span class="token punctuation">,</span> m<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 压入消息</span><span class="token keyword">void</span> <span class="token function">push_msg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">-></span>next <span class="token operator">=</span> queue<span class="token punctuation">;</span>    queue <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通知条件满足</span>    <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qcond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 生产者线程：</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_msg</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 弹出消息</span><span class="token keyword">struct</span> <span class="token class-name">msg</span><span class="token operator">*</span> <span class="token function">pop_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>m<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 等待条件满足</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qcond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>qlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> queue<span class="token punctuation">;</span>    queue <span class="token operator">=</span> m<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qlock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 消费者线程</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">consum</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">whlie</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">msg</span> <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token function">pop_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print_msg</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRO_NUM</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CON_NUM</span> <span class="token expression"><span class="token number">3</span></span></span>    pthread_t tid_p<span class="token punctuation">[</span>PRO_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    pthread_t tid_c<span class="token punctuation">[</span>CON_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PRO_NUM<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> product<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CON_NUM<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> consum<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PRO_NUM<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CON_NUM<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="设计模式问题"><a href="#设计模式问题" class="headerlink" title="设计模式问题"></a>设计模式问题</h1><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p><p><strong>意图：</strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>如何解决：</strong>使用面向对象技术，可以将这种依赖关系弱化。</p><p><strong>应用实例：</strong> 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p><p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p><p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p><strong>使用场景：</strong></p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//观察者模式</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Subject</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Attach</span><span class="token punctuation">(</span>Observer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Detach</span><span class="token punctuation">(</span>Observer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">newSubject</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Subject</span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    list<span class="token operator">&lt;</span>Observer<span class="token operator">*</span><span class="token operator">></span> ObserverList<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_state<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">newSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_state</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Attach</span><span class="token punctuation">(</span>Observer<span class="token operator">*</span> obs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ObserverList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Detach</span><span class="token punctuation">(</span>Observer<span class="token operator">*</span> obs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ObserverList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iter<span class="token operator">:</span>ObserverList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            iter<span class="token operator">-></span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"发送通知完成！（%d）\n"</span><span class="token punctuation">,</span>m_state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">SetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_state<span class="token operator">=</span>newState<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">newObserver</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Observer</span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string m_name<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_state<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">newObserver</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_state</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>m_state<span class="token operator">=</span>state<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_state<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：收到了通知！（%d）\n"</span><span class="token punctuation">,</span>m_name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m_state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    newObserver<span class="token operator">*</span> zhangsan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">newObserver</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newObserver<span class="token operator">*</span> lisi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">newObserver</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newObserver<span class="token operator">*</span> wangwu<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">newObserver</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newObserver<span class="token operator">*</span> zhaoliu<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">newObserver</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newSubject<span class="token operator">*</span> Alibaba<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">newSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">Attach</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">Attach</span><span class="token punctuation">(</span>lisi<span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">Attach</span><span class="token punctuation">(</span>wangwu<span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">Attach</span><span class="token punctuation">(</span>zhaoliu<span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">SetState</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">SetState</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Alibaba<span class="token operator">-></span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> zhangsan<span class="token punctuation">;</span>    <span class="token keyword">delete</span> lisi<span class="token punctuation">;</span>    <span class="token keyword">delete</span> wangwu<span class="token punctuation">;</span>    <span class="token keyword">delete</span> zhaoliu<span class="token punctuation">;</span>    <span class="token keyword">delete</span> Alibaba<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong>构造函数是私有的。</p><p><strong>应用实例：</strong></p><ul><li>1、一个班级只有一个班主任。</li><li>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li><li>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li></ul><p><strong>优点：</strong></p><ul><li>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>2、避免对资源的多重占用（比如写文件操作）。</li></ul><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p>单例模式一般常用的有两种方式来实现，分别是<strong>懒汉模式</strong>和<strong>饿汉模式</strong></p><ul><li>懒汉模式：在真正使用对象时才将对象进行初始化，<strong>非线程安全</strong></li><li>饿汉模式：指在类加载时就已经创建好了该单例对象，等待被程序使用，是<strong>线程安全</strong>的</li></ul><h3 id="饿汉模式代码"><a href="#饿汉模式代码" class="headerlink" title="饿汉模式代码"></a>饿汉模式代码</h3><p>饿汉模式的实现比起懒汉模式实现简单很多</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//单例模式--饿汉模式</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止拷贝</span>    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止赋值</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> m_instance<span class="token punctuation">;</span><span class="token comment">//单例对象</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Singleton<span class="token operator">*</span> Singleton<span class="token operator">::</span>m_instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Singleton<span class="token operator">*</span> object<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取实例</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉模式代码"><a href="#懒汉模式代码" class="headerlink" title="懒汉模式代码"></a>懒汉模式代码</h3><p>懒汉模式的代码需要注意线程安全的问题，这里总共有三个版本，需要层层递进式的修改</p><p><strong>版本一：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//饿汉模式</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止拷贝</span>    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止赋值</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> m_instance<span class="token punctuation">;</span><span class="token comment">//单例对象</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//有缺陷</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_instance<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            m_instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可能多个线程同时new</span>                <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Singleton<span class="token operator">*</span> object<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取实例</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码缺陷在于如果多个线程同时判断<code>m_instance</code>为空，就会导致申请了多个实例，对于这种情况，我们可以通过加锁来解决，这样就有了版本二</p><p><strong>版本二：</strong></p><p>下面代码改进地方在加了个锁，防止多个线程都创建了对象实例，但是仍然有改进地方</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//饿汉模式</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止拷贝</span>    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止赋值</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> m_instance<span class="token punctuation">;</span><span class="token comment">//单例对象</span>    <span class="token keyword">static</span> mutex m_mutex<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//单单只加锁还是会有缺陷</span>        m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上锁</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_instance<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            m_instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span>        <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Singleton<span class="token operator">*</span> object<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取实例</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　<strong>版本三：</strong></p><p>这里改进的地方有两个，一个是加了双重<code>if</code>检测防止多个线程阻塞在抢夺锁，耗费系统资源；</p><p>另一个改进地方是使用了临时变量temp，防止线程A在实例化new过程但还没结束时，线程B通过外层if判断，直接返回了还未实例化完成的单例对象，由此导致成员变量数据可能还未赋值完成等情况</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//饿汉模式</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止拷贝</span>    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//禁止赋值</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> m_instance<span class="token punctuation">;</span><span class="token comment">//单例对象</span>    <span class="token keyword">static</span> mutex m_mutex<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//最终修改版，双重检测+临时变量赋值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_instance<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双重检测</span>            m_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上锁</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m_instance<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                Singleton<span class="token operator">*</span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时变量防止线程A刚new完</span>                m_instance<span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Singleton<span class="token operator">*</span> object<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取实例</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Redis知识点"><a href="#Redis知识点" class="headerlink" title="Redis知识点"></a>Redis知识点</h1><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><p><strong>Redis 优势</strong></p><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="在线Redis代码环境"><a href="#在线Redis代码环境" class="headerlink" title="在线Redis代码环境"></a>在线Redis代码环境</h2><p>可以通过该网址来练习Redis操作：<a href="https://try.redis.io/">https://try.redis.io/</a></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Redis常用的数据类型有五种：<strong>String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）</strong>。</p><p>随着 Redis 版本的更新，后面又支持了四种数据类型： <strong>BitMap（2.2 版新增）、HyperLogLog（2.8 版新增）、GEO（3.2 版新增）、Stream（5.0 版新增）</strong>。</p><h2 id="AOF和RDB持久化"><a href="#AOF和RDB持久化" class="headerlink" title="AOF和RDB持久化"></a>AOF和RDB持久化</h2><h2 id="什么是缓存雪崩、击穿、穿透？"><a href="#什么是缓存雪崩、击穿、穿透？" class="headerlink" title="什么是缓存雪崩、击穿、穿透？"></a>什么是缓存雪崩、击穿、穿透？</h2><hr><h1 id="数据结构问题"><a href="#数据结构问题" class="headerlink" title="数据结构问题"></a>数据结构问题</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>常见的排序算法如选择、插入、冒泡、快速、归并等都是面试经常问的问题，这里也将它们代码写一下</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序<strong>O(n^2)、不稳定</strong></p><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，以此类推</p><p>不稳定原因：如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。</p><p>举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//选择排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> alen<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录本轮中最小数的下标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>                minIndex<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minIndex<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果最小数不是标兵数本身</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序(InsertionSort)，一般也被称为直接插入排序。时间复杂度为：<strong>O(N^2)</strong></p><p>对于少量元素的排序，它是一个有效的算法。插入排序是一种最简单的排序方法，它的基本思想是将一个记录插入到已经排好序的有序表中，从而一个新的、记录数增 1 的有序表</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/InsertSort-03.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> insertValue<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>insertValue<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效、<strong>稳定</strong>的排序算法，该算法是采用分治法(Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p>时间复杂度为 <strong>O(nlogn)</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/MergeSort-01.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">temp</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1<span class="token operator">=</span>start<span class="token punctuation">;</span>    <span class="token keyword">int</span> p2<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>start<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法，在平均状况下，排序 n 个项目要 <strong>Ο(nlogn)</strong> 次比较。在最坏状况下则需要 <strong>Ο(n^2)</strong> 次比较，但这种状况并不常见。</p><p><em>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序</em></p><p>算法步骤：</p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">>=</span>end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token operator">=</span>end<span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token operator">=</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">>=</span>key<span class="token punctuation">)</span>            <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key<span class="token punctuation">)</span>            <span class="token operator">++</span>l<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt; 在写这个文章的时候已经是大三的寒假了，因此也要开始为实习的工作做准备了，这里就专门开了个文章来记录我在网上找到的一些&lt;strong&gt;C++</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛268场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B268%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B268%E5%9C%BA/</id>
    <published>2021-11-26T05:49:01.000Z</published>
    <updated>2021-11-26T09:04:20.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛268场"><a href="#LeetCode周赛268场" class="headerlink" title="LeetCode周赛268场"></a>LeetCode周赛268场</h1><p>这周的周赛题都比较简单，前两题可以直接暴力和模拟，而第三题也是可以稍微想一下就做出来，简直不要太舒服</p><h2 id="2078-两栋颜色不同且距离最远的房子"><a href="#2078-两栋颜色不同且距离最远的房子" class="headerlink" title="2078. 两栋颜色不同且距离最远的房子"></a><a href="https://leetcode-cn.com/problems/two-furthest-houses-with-different-colors/">2078. 两栋颜色不同且距离最远的房子</a></h2><img src="https://i.loli.net/2021/11/26/oTdO5KVy9SRCjJA.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/eSAYdFw7fWrxtKg.png" style="zoom:80%;" /><p>这题的暴力解法可以直接写出来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> clen<span class="token operator">=</span>colors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>clen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>clen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时还有一个稍微贪心的做法，分三种情况</p><ol><li>如果最左边和最右边房子颜色不一样，则直接返回<code>(n-1)-0</code></li><li>固定下标为<code>0</code>位置，向后面找与它最大距离的不同颜色房子</li><li>固定下标为<code>n-1</code>位置，向前找最大距离的不同颜色房子，并与第二步的数值作比较，得出最大距离</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 如果首位颜色不同直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> colors<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 获取左边第一个不相同的位置</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取右边第一个不相同的位置</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 0～right 的长度 和 left～length-1 的长度取最大值</span>        <span class="token comment">// 因为要最大，所以不可能在中间，要么就是左边，要么就是右边</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2079-给植物浇水"><a href="#2079-给植物浇水" class="headerlink" title="2079. 给植物浇水"></a><a href="https://leetcode-cn.com/problems/watering-plants/">2079. 给植物浇水</a></h2><img src="https://i.loli.net/2021/11/26/v8UbFT4hyziVG7P.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/k9UMTJw5QI7jAx6.png" style="zoom:80%;" /><p>这道题是一个模拟题，直接按照题意做就好了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">wateringPlants</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> plants<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> plen<span class="token operator">=</span>plants<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>plen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fullWater<span class="token operator">=</span>capacity<span class="token punctuation">;</span><span class="token comment">//水池</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                capacity<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//不够水</span>                res<span class="token operator">+=</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                capacity<span class="token operator">=</span>fullWater<span class="token punctuation">;</span>                capacity<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2080-区间内查询数字的频率"><a href="#2080-区间内查询数字的频率" class="headerlink" title="2080. 区间内查询数字的频率"></a><a href="https://leetcode-cn.com/problems/range-frequency-queries/">2080. 区间内查询数字的频率</a></h2><img src="https://i.loli.net/2021/11/26/qM9VxosD2Zf7caS.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/uSXRqy7Mb9lhnYx.png" style="zoom:80%;" /><p>这道题需要提前处理一下，存放的容器有两种方案<code>vector</code>和<code>unordered_map</code></p><p>预处理是为了记录每个数在哪些位置出现过</p><p>两个版本在<code>query()</code>函数查找都运用了C++算法的内置函数<code>lower_bound()</code>和<code>upper_bound()</code>，这里可以了解一下它们的作用，它们都是运用了二分查找方法，需要用在有特定顺序的容器中</p><p>这里举个栗子，在数组<code>vector&lt;int&gt; arr=[10 10 10 20 20 20 30 30]</code>，然后分别调用两个函数，并且第三个参数<code>val</code>填入<code>20</code>，最后输出迭代器的位置<code>iter-arr.begin()</code></p><ul><li><code>lower_bound()</code>：找出容器中第一个大于等于<code>val</code>的数的位置，在这个例子中我们输出迭代器的位置为<code>3</code></li><li><code>upper_bound()</code>：找出容器中第一个大于<code>val</code>的数的位置，在这个例子中输出的迭代器位置为<code>6</code></li></ul><p><code>unordered_map</code>版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//unordered_map</span><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> map<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>arr<span class="token operator">=</span>vec<span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//预处理</span>            <span class="token keyword">int</span> cur<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录每个数字分别出现的位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> curArr<span class="token operator">=</span>map<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>curArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>alen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">auto</span> l<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>curArr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curArr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> r<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>curArr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curArr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token operator">-</span>l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your RangeFreqQuery object will be instantiated and called as such: * RangeFreqQuery* obj = new RangeFreqQuery(arr); * int param_1 = obj->query(left,right,value); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector&lt;vector&lt;int&gt;&gt;</code>版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span>  vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> data<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">upper_bound</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛268场&quot;&gt;&lt;a href=&quot;#LeetCode周赛268场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛268场&quot;&gt;&lt;/a&gt;LeetCode周赛268场&lt;/h1&gt;&lt;p&gt;这周的周赛题都比较简单，前两题可以直接暴力和</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛266场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B266%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B266%E5%9C%BA/</id>
    <published>2021-11-09T05:10:50.000Z</published>
    <updated>2021-11-09T10:57:56.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛266场"><a href="#LeetCode周赛266场" class="headerlink" title="LeetCode周赛266场"></a>LeetCode周赛266场</h1><p>本周的周赛题目看上去挺难的，但赛后看了一下别人的解答发现其实也并不复杂，终究还是得多做题多思考💦</p><h2 id="2062-统计字符串中的元音子字符串"><a href="#2062-统计字符串中的元音子字符串" class="headerlink" title="2062. 统计字符串中的元音子字符串"></a><a href="https://leetcode-cn.com/problems/count-vowel-substrings-of-a-string/">2062. 统计字符串中的元音子字符串</a></h2><img src="https://i.loli.net/2021/11/09/ng5oS9MrtU3XKDJ.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/QAnk9YMCWuNGDc3.png" style="zoom:80%;" /><p>第一题经典可以暴力解法，但需要注意看清题目，我在做的时候第一次看题跳着看导致看错了题意，所以简单题更应该小心，不能太着急</p><p>下面是我的暴力解法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countVowelSubstrings</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> w<span class="token operator">=</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">bool</span> sig<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    w<span class="token operator">=</span>word<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>temp<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>sig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2063-所有子字符串中的元音"><a href="#2063-所有子字符串中的元音" class="headerlink" title="2063. 所有子字符串中的元音"></a><a href="https://leetcode-cn.com/problems/vowels-of-all-substrings/">2063. 所有子字符串中的元音</a></h2><img src="https://i.loli.net/2021/11/09/ojNTOd4J9l2VuFz.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/GbS93UM7IRAd4Kt.png" style="zoom:80%;" /><p>这道题在竞赛做的时候觉得挺复杂挺难的，但看了题解之后其实并不难，只是一道dp问题，只可惜当时做的时候没有想到</p><p>这里的dp转移条件可以直接当成返回条件，即<code>res</code>，但是要注意它是一个<code>long long</code>类型的</p><p>随后是状态转移方程，我们在遍历字符串的时候，设当前遍历到的字符为<code>cur</code>，如果<code>cur</code>是元音字符，则到此字符为止的<code>res</code>状态是由前一个字符的<code>res</code>状态再加上当前包含<code>cur</code>的子字符串个数，即<code>if(cur==元音) -&gt; res=res+包含cur子串个数</code></p><p>那么现在问题来到了怎么求包含<code>cur</code>子串个数问题，我们可以将<code>cur</code>在字符串中位置视为中点，例如它的位置为<code>i</code></p><p>则在它左边可以选择第<em>0,1,2,3…i-1,i</em>个字符与<code>cur</code>构成一个子串，这里一共有<code>i+1</code>种情况</p><p>在它右边可以选择<em>i,i+1,i+2….n-2,n-1</em>，一共<code>n-i</code>种情况</p><p>总共加起来的子字符串个数就是<code>(i+1)(n-i)</code>，这里为什么要用乘法呢，是因为字符<code>cur</code>两边可以互相连接，例如在<em>a b c d e</em>字符串中，以<em>b</em>为中心，可以构成以下子串 <em>a b c</em> 或  <em>b c d</em> 等，两边选择一些字符然后构成其中一个子串，所以这是数学中排列组合的 <strong>组合问题</strong></p><p>了解了这些就可以很轻易写出代码来了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">countVowels</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> vowels<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> cur<span class="token operator">=</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>vowels<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//遍历到的字母是元音字母</span>                    res<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>wlen<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2064-分配给商店的最多商品的最小值"><a href="#2064-分配给商店的最多商品的最小值" class="headerlink" title="2064. 分配给商店的最多商品的最小值"></a><a href="https://leetcode-cn.com/problems/minimized-maximum-of-products-distributed-to-any-store/">2064. 分配给商店的最多商品的最小值</a></h2><img src="https://i.loli.net/2021/11/09/L8MljnYs4i1cRdp.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/k3mcabiyPAlSfzv.png" style="zoom:80%;" /><p>这道题也是当时做不出来的，觉得题目似懂非懂的样子，导致也没有思路</p><p>其实这道题本质是一个二分题，要找出可以满足分配店铺情况下，每家店最大可以分配的商品数</p><p>我们就可以通过循环不断寻找这个值，这里设每一回合分配<code>mid</code>个商品时，最后需要的店铺数为<code>cnt</code>，在一轮分配结束后，判断<code>cnt</code>与题目所给的<code>n</code>的关系</p><p>如果：</p><ul><li><code>cnt</code>&gt;<code>n</code>，则一定不合法，因为店铺数量过多证明商品分配太少了，可以再进一步压缩店铺数</li><li><code>cnt</code>=<code>n</code>，刚好满足分配店铺数要求，但是要注意商品数不能有剩余，即<code>mod=0</code></li><li><code>cnt</code>&lt;<code>n</code>，说明不能对每个商店都分配 mid 商品，但剩余的商品种类必须满足未能分配的商店 即 mod &lt;= n - cnt。我们可以把所有剩下的商品分配到剩余的商店中，若仍有商店剩余就不分配商品，则每种剩余的商品数量一定小于mid</li></ul><p>下面是我后来自己写的代码，要注意的是二分的界限，如每次更新时的操作等，还有就是最后返回的是<code>l</code>，我也试过了若直接返回<code>mid</code>是不行的（❗这里不知道为什么）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//注意初始值条件</span>        <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>quantities<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>quantities<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>quantities<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> cur<span class="token operator">=</span>i<span class="token operator">/</span>mid<span class="token punctuation">;</span><span class="token comment">//求出当前商品按mid件一家店可以分多少店</span>                cnt<span class="token operator">+=</span>cur<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>mid<span class="token punctuation">)</span><span class="token comment">//如果还有剩余商品没有给分配，则分配的店铺量要加一</span>                    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>n<span class="token punctuation">)</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//返回条件要注意</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个简略一点的代码，别人写的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>quantities<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quantities<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">:</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> mid<span class="token punctuation">;</span><span class="token comment">//这里是向上取整操作，即分配剩余的商品再加一个商店来放它</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛266场&quot;&gt;&lt;a href=&quot;#LeetCode周赛266场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛266场&quot;&gt;&lt;/a&gt;LeetCode周赛266场&lt;/h1&gt;&lt;p&gt;本周的周赛题目看上去挺难的，但赛后看了一下别</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>WebServer项目代码</title>
    <link href="http://sakura-pub.top/WebServer/WebServer%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/"/>
    <id>http://sakura-pub.top/WebServer/WebServer%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/</id>
    <published>2021-11-02T11:21:52.000Z</published>
    <updated>2022-01-11T01:11:23.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebServer项目代码"><a href="#WebServer项目代码" class="headerlink" title="WebServer项目代码"></a>WebServer项目代码</h1><p>这里专门来存放一下我正在做的IO多路复用高并发服务器<code>WebServer</code>的代码，方便在平板上看</p><h1 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h1><h2 id="http-conn-h👇"><a href="#http-conn-h👇" class="headerlink" title="http_conn.h👇"></a>http_conn.h👇</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HTTPCONNECTION_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HTTPCONNECTION_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../lock/locker.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../CGImysql/sql_connection_pool.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../timer/lst_timer.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../log/log.h"</span></span><span class="token keyword">class</span> <span class="token class-name">http_conn</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> FILENAME_LEN <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> READ_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> WRITE_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">METHOD</span>    <span class="token punctuation">&#123;</span>        GET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        POST<span class="token punctuation">,</span>        HEAD<span class="token punctuation">,</span>        PUT<span class="token punctuation">,</span>        DELETE<span class="token punctuation">,</span>        TRACE<span class="token punctuation">,</span>        OPTIONS<span class="token punctuation">,</span>        CONNECT<span class="token punctuation">,</span>        PATH    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">CHECK_STATE</span>    <span class="token punctuation">&#123;</span>        CHECK_STATE_REQUESTLINE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        CHECK_STATE_HEADER<span class="token punctuation">,</span>        CHECK_STATE_CONTENT    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">HTTP_CODE</span>    <span class="token punctuation">&#123;</span>        NO_REQUEST<span class="token punctuation">,</span>        GET_REQUEST<span class="token punctuation">,</span>        BAD_REQUEST<span class="token punctuation">,</span>        NO_RESOURCE<span class="token punctuation">,</span>        FORBIDDEN_REQUEST<span class="token punctuation">,</span>        FILE_REQUEST<span class="token punctuation">,</span>        INTERNAL_ERROR<span class="token punctuation">,</span>        CLOSED_CONNECTION    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">LINE_STATUS</span>    <span class="token punctuation">&#123;</span>        LINE_OK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        LINE_BAD<span class="token punctuation">,</span>        LINE_OPEN    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">http_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">http_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> sockaddr_in <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passwd<span class="token punctuation">,</span> string sqlname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token keyword">bool</span> real_close <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sockaddr_in <span class="token operator">*</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>m_address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">initmysql_result</span><span class="token punctuation">(</span>connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timer_flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> improv<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> m_read_buf <span class="token operator">+</span> m_start_line<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    LINE_STATUS <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_user_count<span class="token punctuation">;</span>    MYSQL <span class="token operator">*</span>mysql<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_state<span class="token punctuation">;</span>  <span class="token comment">//读为0, 写为1</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_sockfd<span class="token punctuation">;</span>    sockaddr_in m_address<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_read_buf<span class="token punctuation">[</span>READ_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_read_idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_checked_idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_start_line<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_write_buf<span class="token punctuation">[</span>WRITE_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_write_idx<span class="token punctuation">;</span>    CHECK_STATE m_check_state<span class="token punctuation">;</span>    METHOD m_method<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_real_file<span class="token punctuation">[</span>FILENAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_url<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_version<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_host<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_content_length<span class="token punctuation">;</span>    <span class="token keyword">bool</span> m_linger<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_file_address<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stat</span> m_file_stat<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> m_iv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_iv_count<span class="token punctuation">;</span>    <span class="token keyword">int</span> cgi<span class="token punctuation">;</span>        <span class="token comment">//是否启用的POST</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_string<span class="token punctuation">;</span> <span class="token comment">//存储请求头数据</span>    <span class="token keyword">int</span> bytes_to_send<span class="token punctuation">;</span>    <span class="token keyword">int</span> bytes_have_send<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>doc_root<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> m_users<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_user<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_passwd<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http-conn-cpp👇"><a href="#http-conn-cpp👇" class="headerlink" title="http_conn.cpp👇"></a>http_conn.cpp👇</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"http_conn.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token comment">//定义http响应的一些状态信息</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ok_200_title <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_400_title <span class="token operator">=</span> <span class="token string">"Bad Request"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_400_form <span class="token operator">=</span> <span class="token string">"Your request has bad syntax or is inherently impossible to staisfy.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_403_title <span class="token operator">=</span> <span class="token string">"Forbidden"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_403_form <span class="token operator">=</span> <span class="token string">"You do not have permission to get file form this server.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_404_title <span class="token operator">=</span> <span class="token string">"Not Found"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_404_form <span class="token operator">=</span> <span class="token string">"The requested file was not found on this server.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_500_title <span class="token operator">=</span> <span class="token string">"Internal Error"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_500_form <span class="token operator">=</span> <span class="token string">"There was an unusual problem serving the request file.\n"</span><span class="token punctuation">;</span>locker m_lock<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> users<span class="token punctuation">;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">initmysql_result</span><span class="token punctuation">(</span>connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//先从连接池中取一个连接</span>    MYSQL <span class="token operator">*</span>mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在user表中检索username，passwd数据，浏览器端输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> <span class="token string">"SELECT username,passwd FROM user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"SELECT error:%s\n"</span><span class="token punctuation">,</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从表中检索完整的结果集</span>    MYSQL_RES <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回结果集中的列数</span>    <span class="token keyword">int</span> num_fields <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回所有字段结构的数组</span>    MYSQL_FIELD <span class="token operator">*</span>fields <span class="token operator">=</span> <span class="token function">mysql_fetch_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从结果集中获取下一行，将对应的用户名和密码，存入map中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>MYSQL_ROW row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string <span class="token function">temp1</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">temp2</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> temp2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//对文件描述符设置非阻塞</span><span class="token keyword">int</span> <span class="token function">setnonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old_option <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> new_option <span class="token operator">=</span> old_option <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> new_option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> old_option<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将内核事件表注册读事件，ET模式，选择开启EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">addfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">bool</span> one_shot<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> TRIGMode<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>one_shot<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">|=</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setnonblocking</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从内核时间表删除描述符</span><span class="token keyword">void</span> <span class="token function">removefd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_DEL<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将事件重置为EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">modfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> ev<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> TRIGMode<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> ev <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> ev <span class="token operator">|</span> EPOLLONESHOT <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_MOD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> http_conn<span class="token operator">::</span>m_user_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> http_conn<span class="token operator">::</span>m_epollfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//关闭连接，关闭一个连接，客户总量减一</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token keyword">bool</span> real_close<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>real_close <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m_sockfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"close %d\n"</span><span class="token punctuation">,</span> m_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removefd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_sockfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        m_user_count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化连接,外部调用初始化套接字地址</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> sockaddr_in <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">,</span>                     <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passwd<span class="token punctuation">,</span> string sqlname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_sockfd <span class="token operator">=</span> sockfd<span class="token punctuation">;</span>    m_address <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> sockfd<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_user_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//当浏览器出现连接重置时，可能是网站根目录出错或http响应格式出错或者访问的文件中内容完全为空</span>    doc_root <span class="token operator">=</span> root<span class="token punctuation">;</span>    m_TRIGMode <span class="token operator">=</span> TRIGMode<span class="token punctuation">;</span>    m_close_log <span class="token operator">=</span> close_log<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_user<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_passwd<span class="token punctuation">,</span> passwd<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_name<span class="token punctuation">,</span> sqlname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化新接受的连接</span><span class="token comment">//check_state默认为分析请求行状态</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    bytes_have_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_check_state <span class="token operator">=</span> CHECK_STATE_REQUESTLINE<span class="token punctuation">;</span>    m_linger <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    m_method <span class="token operator">=</span> GET<span class="token punctuation">;</span>    m_url <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_content_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_host <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_start_line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_checked_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_read_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_write_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cgi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_read_buf<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> READ_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_write_buf<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> FILENAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从状态机，用于分析出一行内容</span><span class="token comment">//返回值为行的读取状态，有LINE_OK,LINE_BAD,LINE_OPEN</span>http_conn<span class="token operator">::</span>LINE_STATUS http_conn<span class="token operator">::</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> m_checked_idx <span class="token operator">&lt;</span> m_read_idx<span class="token punctuation">;</span> <span class="token operator">++</span>m_checked_idx<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_checked_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> m_read_idx<span class="token punctuation">)</span>                <span class="token keyword">return</span> LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_checked_idx <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> LINE_OPEN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环读取客户数据，直到无数据可读或对方关闭连接</span><span class="token comment">//非阻塞ET工作模式下，需要一次性将数据读完</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_idx <span class="token operator">>=</span> READ_BUFFER_SIZE<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> bytes_read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//LT读取数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET读数据</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求行，获得请求方法，目标url及http版本号</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_url <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_url<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>m_url<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        m_method <span class="token operator">=</span> GET<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_method <span class="token operator">=</span> POST<span class="token punctuation">;</span>        cgi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    m_url <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_version <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_version<span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token operator">*</span>m_version<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    m_version <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"http://"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_url <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>        m_url <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_url <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>        m_url <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_url <span class="token operator">||</span> m_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token comment">//当url为/时，显示判断界面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"judge.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_check_state <span class="token operator">=</span> CHECK_STATE_HEADER<span class="token punctuation">;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求的一个头部信息</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_check_state <span class="token operator">=</span> CHECK_STATE_CONTENT<span class="token punctuation">;</span>            <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Connection:"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">11</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_linger <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Content-length:"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">15</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_content_length <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Host:"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_host <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"oop!unknow header: %s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断http请求是否被完整读入</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_idx <span class="token operator">>=</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">+</span> m_checked_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text<span class="token punctuation">[</span>m_content_length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment">//POST请求中最后为输入的用户名和密码</span>        m_string <span class="token operator">=</span> text<span class="token punctuation">;</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LINE_STATUS line_status <span class="token operator">=</span> LINE_OK<span class="token punctuation">;</span>    HTTP_CODE ret <span class="token operator">=</span> NO_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>text <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_check_state <span class="token operator">==</span> CHECK_STATE_CONTENT <span class="token operator">&amp;&amp;</span> line_status <span class="token operator">==</span> LINE_OK<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line_status <span class="token operator">=</span> <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> LINE_OK<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">=</span> <span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_start_line <span class="token operator">=</span> m_checked_idx<span class="token punctuation">;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>m_check_state<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> CHECK_STATE_REQUESTLINE<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_request_line</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> CHECK_STATE_HEADER<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_headers</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> GET_REQUEST<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> CHECK_STATE_CONTENT<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_content</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> GET_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            line_status <span class="token operator">=</span> LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> INTERNAL_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("m_url:%s\n", m_url);</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理cgi</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cgi <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//根据标志判断是登录检测还是注册检测</span>        <span class="token keyword">char</span> flag <span class="token operator">=</span> m_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> m_url <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> FILENAME_LEN <span class="token operator">-</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将用户名和密码提取出来</span>        <span class="token comment">//user=123&amp;passwd=123</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            name<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        name<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            password<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        password<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是注册，先检测数据库中是否有重名的</span>            <span class="token comment">//没有重名的，进行增加数据</span>            <span class="token keyword">char</span> <span class="token operator">*</span>sql_insert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"INSERT INTO user(username, passwd) VALUES("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"', '"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> sql_insert<span class="token punctuation">)</span><span class="token punctuation">;</span>                users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m_lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果是登录，直接判断</span>        <span class="token comment">//若浏览器端输入的用户名和密码在表中可以查找到，返回1，否则返回0</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> users<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">==</span> password<span class="token punctuation">)</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/welcome.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/logError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/register.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/picture.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/video.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'7'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/fans.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url<span class="token punctuation">,</span> FILENAME_LEN <span class="token operator">-</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_file_stat<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> NO_RESOURCE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IROTH<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> FORBIDDEN_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_file_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> FILE_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_file_address<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">munmap</span><span class="token punctuation">(</span>m_file_address<span class="token punctuation">,</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_file_address <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_to_send <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> <span class="token function">writev</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_iv<span class="token punctuation">,</span> m_iv_count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        bytes_have_send <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        bytes_to_send <span class="token operator">-=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_have_send <span class="token operator">>=</span> m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_file_address <span class="token operator">+</span> <span class="token punctuation">(</span>bytes_have_send <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> bytes_to_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf <span class="token operator">+</span> bytes_have_send<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">-</span> bytes_have_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_to_send <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_linger<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_write_idx <span class="token operator">>=</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    va_list arg_list<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>m_write_buf <span class="token operator">+</span> m_write_idx<span class="token punctuation">,</span> WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">,</span> format<span class="token punctuation">,</span> arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token punctuation">(</span>WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    m_write_idx <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"request:%s"</span><span class="token punctuation">,</span> m_write_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s %d %s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span>content_len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Length:%d\r\n"</span><span class="token punctuation">,</span> content_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Type:%s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Connection:%s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m_linger <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"keep-alive"</span> <span class="token operator">:</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> INTERNAL_ERROR<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> error_500_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> BAD_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> error_404_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> FORBIDDEN_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> error_403_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> FILE_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> ok_200_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_file_address<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            m_iv_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            bytes_to_send <span class="token operator">=</span> m_write_idx <span class="token operator">+</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ok_string <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf<span class="token punctuation">;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    m_iv_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HTTP_CODE read_ret <span class="token operator">=</span> <span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read_ret <span class="token operator">==</span> NO_REQUEST<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> write_ret <span class="token operator">=</span> <span class="token function">process_write</span><span class="token punctuation">(</span>read_ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>write_ret<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="WebServer-h和WebServer-cpp👇"><a href="#WebServer-h和WebServer-cpp👇" class="headerlink" title="WebServer.h和WebServer.cpp👇"></a>WebServer.h和WebServer.cpp👇</h1><h2 id="WebServer-h"><a href="#WebServer-h" class="headerlink" title="WebServer.h"></a>WebServer.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">WEBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WEBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./threadpool/threadpool.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./http/http_conn.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_FD <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">;</span>           <span class="token comment">//最大文件描述符</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_EVENT_NUMBER <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment">//最大事件数</span><span class="token keyword">const</span> <span class="token keyword">int</span> TIMESLOT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>             <span class="token comment">//最小超时单位</span><span class="token keyword">class</span> <span class="token class-name">WebServer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port <span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passWord<span class="token punctuation">,</span> string databaseName<span class="token punctuation">,</span>              <span class="token keyword">int</span> log_write <span class="token punctuation">,</span> <span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span> <span class="token keyword">int</span> trigmode<span class="token punctuation">,</span> <span class="token keyword">int</span> sql_num<span class="token punctuation">,</span>              <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span> <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dealwithsignal</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> timeout<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dealwithread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dealwithwrite</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//基础</span>    <span class="token keyword">int</span> m_port<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_root<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_log_write<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_actormodel<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_pipefd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    http_conn <span class="token operator">*</span>users<span class="token punctuation">;</span>    <span class="token comment">//数据库相关</span>    connection_pool <span class="token operator">*</span>m_connPool<span class="token punctuation">;</span>    string m_user<span class="token punctuation">;</span>         <span class="token comment">//登陆数据库用户名</span>    string m_passWord<span class="token punctuation">;</span>     <span class="token comment">//登陆数据库密码</span>    string m_databaseName<span class="token punctuation">;</span> <span class="token comment">//使用数据库名</span>    <span class="token keyword">int</span> m_sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池相关</span>    threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span> <span class="token operator">*</span>m_pool<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_thread_num<span class="token punctuation">;</span>    <span class="token comment">//epoll_event相关</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_listenfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_OPT_LINGER<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_LISTENTrigmode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//定时器相关</span>    client_data <span class="token operator">*</span>users_timer<span class="token punctuation">;</span>    Utils utils<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebServer-cpp"><a href="#WebServer-cpp" class="headerlink" title="WebServer.cpp"></a>WebServer.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//http_conn类对象</span>    users <span class="token operator">=</span> <span class="token keyword">new</span> http_conn<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//root文件夹路径</span>    <span class="token keyword">char</span> server_path<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">getcwd</span><span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> root<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/root"</span><span class="token punctuation">;</span>    m_root <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>server_path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span> server_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定时器</span>    users_timer <span class="token operator">=</span> <span class="token keyword">new</span> client_data<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users_timer<span class="token punctuation">;</span>    <span class="token keyword">delete</span> m_pool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passWord<span class="token punctuation">,</span> string databaseName<span class="token punctuation">,</span> <span class="token keyword">int</span> log_write<span class="token punctuation">,</span>                      <span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span> <span class="token keyword">int</span> trigmode<span class="token punctuation">,</span> <span class="token keyword">int</span> sql_num<span class="token punctuation">,</span> <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span> <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_port <span class="token operator">=</span> port<span class="token punctuation">;</span>    m_user <span class="token operator">=</span> user<span class="token punctuation">;</span>    m_passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>    m_databaseName <span class="token operator">=</span> databaseName<span class="token punctuation">;</span>    m_sql_num <span class="token operator">=</span> sql_num<span class="token punctuation">;</span>    m_thread_num <span class="token operator">=</span> thread_num<span class="token punctuation">;</span>    m_log_write <span class="token operator">=</span> log_write<span class="token punctuation">;</span>    m_OPT_LINGER <span class="token operator">=</span> opt_linger<span class="token punctuation">;</span>    m_TRIGMode <span class="token operator">=</span> trigmode<span class="token punctuation">;</span>    m_close_log <span class="token operator">=</span> close_log<span class="token punctuation">;</span>    m_actormodel <span class="token operator">=</span> actor_model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//LT + LT</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//LT + ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET + LT</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET + ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化日志</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_log_write<span class="token punctuation">)</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化数据库连接池</span>    m_connPool <span class="token operator">=</span> connection_pool<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_connPool<span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> m_user<span class="token punctuation">,</span> m_passWord<span class="token punctuation">,</span> m_databaseName<span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">,</span> m_sql_num<span class="token punctuation">,</span> m_close_log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化数据库读取表</span>    users<span class="token operator">-></span><span class="token function">initmysql_result</span><span class="token punctuation">(</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//线程池</span>    m_pool <span class="token operator">=</span> <span class="token keyword">new</span> threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span><span class="token punctuation">(</span>m_actormodel<span class="token punctuation">,</span> m_connPool<span class="token punctuation">,</span> m_thread_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//网络编程基础步骤</span>    m_listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_listenfd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭连接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_OPT_LINGER<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_OPT_LINGER<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> address<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>m_port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>flag<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//epoll创建内核事件表</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    m_epollfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_epollfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_listenfd<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> m_LISTENTrigmode<span class="token punctuation">)</span><span class="token punctuation">;</span>    http_conn<span class="token operator">::</span>m_epollfd <span class="token operator">=</span> m_epollfd<span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">socketpair</span><span class="token punctuation">(</span>PF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">setnonblocking</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGPIPE<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGTERM<span class="token punctuation">,</span> utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//工具类,信号和描述符基础操作</span>    Utils<span class="token operator">::</span>u_pipefd <span class="token operator">=</span> m_pipefd<span class="token punctuation">;</span>    Utils<span class="token operator">::</span>u_epollfd <span class="token operator">=</span> m_epollfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    users<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> m_root<span class="token punctuation">,</span> m_CONNTrigmode<span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> m_user<span class="token punctuation">,</span> m_passWord<span class="token punctuation">,</span> m_databaseName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化client_data数据</span>    <span class="token comment">//创建定时器，设置回调函数和超时时间，绑定用户数据，将定时器添加到链表中</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>address <span class="token operator">=</span> client_address<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd <span class="token operator">=</span> connfd<span class="token punctuation">;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> util_timer<span class="token punctuation">;</span>    timer<span class="token operator">-></span>user_data <span class="token operator">=</span> <span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>cb_func <span class="token operator">=</span> cb_func<span class="token punctuation">;</span>    time_t cur <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> TIMESLOT<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> timer<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//若有数据传输，则将定时器往后延迟3个单位</span><span class="token comment">//并对新的定时器在链表上的位置进行调整</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    time_t cur <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> TIMESLOT<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"adjust timer once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    timer<span class="token operator">-></span><span class="token function">cb_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">del_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"close fd %d"</span><span class="token punctuation">,</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>    socklen_t client_addrlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_LISTENTrigmode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span> <span class="token string">"accept error"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count <span class="token operator">>=</span> MAX_FD<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span> <span class="token string">"accept error"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count <span class="token operator">>=</span> MAX_FD<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithsignal</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">&amp;</span>timeout<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">&amp;</span>stop_server<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sig<span class="token punctuation">;</span>    <span class="token keyword">char</span> signals<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> signals<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>signals<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ret<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> SIGALRM<span class="token operator">:</span>            <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> SIGTERM<span class="token operator">:</span>            <span class="token punctuation">&#123;</span>                stop_server <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"deal with the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>            m_pool<span class="token operator">-></span><span class="token function">append_p</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithwrite</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"send data to the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> stop_server <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop_server<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENT_NUMBER<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"epoll failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sockfd <span class="token operator">=</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token comment">//处理新到的客户连接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_listenfd<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>EPOLLRDHUP <span class="token operator">|</span> EPOLLHUP <span class="token operator">|</span> EPOLLERR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//服务器端关闭连接，移除对应的定时器</span>                util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>                <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理信号</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">dealwithsignal</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"dealclientdata failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理客户连接上接收到的数据</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dealwithread</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dealwithwrite</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">timer_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"timer tick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Config-h和Config-cpp👇"><a href="#Config-h和Config-cpp👇" class="headerlink" title="Config.h和Config.cpp👇"></a>Config.h和Config.cpp👇</h1><h2 id="Config-h"><a href="#Config-h" class="headerlink" title="Config.h"></a>Config.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONFIG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//端口号</span>    <span class="token keyword">int</span> PORT<span class="token punctuation">;</span>    <span class="token comment">//日志写入方式</span>    <span class="token keyword">int</span> LOGWrite<span class="token punctuation">;</span>    <span class="token comment">//触发组合模式</span>    <span class="token keyword">int</span> TRIGMode<span class="token punctuation">;</span>    <span class="token comment">//listenfd触发模式</span>    <span class="token keyword">int</span> LISTENTrigmode<span class="token punctuation">;</span>    <span class="token comment">//connfd触发模式</span>    <span class="token keyword">int</span> CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//优雅关闭链接</span>    <span class="token keyword">int</span> OPT_LINGER<span class="token punctuation">;</span>    <span class="token comment">//数据库连接池数量</span>    <span class="token keyword">int</span> sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池内的线程数量</span>    <span class="token keyword">int</span> thread_num<span class="token punctuation">;</span>    <span class="token comment">//是否关闭日志</span>    <span class="token keyword">int</span> close_log<span class="token punctuation">;</span>    <span class="token comment">//并发模型选择</span>    <span class="token keyword">int</span> actor_model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Config-cpp"><a href="#Config-cpp" class="headerlink" title="Config.cpp"></a>Config.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token class-name">Config</span><span class="token operator">::</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//端口号,默认9006</span>    PORT <span class="token operator">=</span> <span class="token number">9006</span><span class="token punctuation">;</span>    <span class="token comment">//日志写入方式，默认同步</span>    LOGWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//触发组合模式,默认listenfd LT + connfd LT</span>    TRIGMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//listenfd触发模式，默认LT</span>    LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//connfd触发模式，默认LT</span>    CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭链接，默认不使用</span>    OPT_LINGER <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//数据库连接池数量,默认8</span>    sql_num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//线程池内的线程数量,默认8</span>    thread_num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//关闭日志,默认不关闭</span>    close_log <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//并发模型,默认是proactor</span>    actor_model <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Config</span><span class="token operator">::</span><span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"p:l:m:o:s:t:c:a:"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'p'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            PORT <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            LOGWrite <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            TRIGMode <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'o'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            OPT_LINGER <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            sql_num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            thread_num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'c'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            close_log <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            actor_model <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WebServer项目代码&quot;&gt;&lt;a href=&quot;#WebServer项目代码&quot; class=&quot;headerlink&quot; title=&quot;WebServer项目代码&quot;&gt;&lt;/a&gt;WebServer项目代码&lt;/h1&gt;&lt;p&gt;这里专门来存放一下我正在做的IO多路复用高并发服务器</summary>
      
    
    
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="WebServer" scheme="http://sakura-pub.top/tags/WebServer/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛265场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B265%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B265%E5%9C%BA/</id>
    <published>2021-11-01T12:07:38.000Z</published>
    <updated>2021-11-01T12:56:31.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第265场"><a href="#LeetCode周赛第265场" class="headerlink" title="LeetCode周赛第265场"></a>LeetCode周赛第265场</h1><p>终于有时间来认认真真参加一次周赛了，前几周都是断断续续地参加，好几次都是有会要开给冲突了</p><p>本周周赛比较简单，第一、二题都是送分题，只是第二题稍微麻烦一些，然后第三题需要思考一下，但我做的时候并没有思路，所以这次重点来看第三题</p><h2 id="2057-值相等的最小索引"><a href="#2057-值相等的最小索引" class="headerlink" title="2057. 值相等的最小索引"></a><a href="https://leetcode-cn.com/problems/smallest-index-with-equal-value/">2057. 值相等的最小索引</a></h2><p>首先是简单题，照样也是一道送分题，而且这道题一分钟之内就可以写完，感觉不要太爽</p><img src="https://i.loli.net/2021/11/01/2a7lsy64WCNFXhT.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">smallestEqual</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2058-找出临界点之间的最小和最大距离"><a href="#2058-找出临界点之间的最小和最大距离" class="headerlink" title="2058. 找出临界点之间的最小和最大距离"></a><a href="https://leetcode-cn.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/">2058. 找出临界点之间的最小和最大距离</a></h2><p>这道题我在做的时候也做出来了，思路比较好想，就是代码有点多，比较麻烦</p><p>同时在一开始看题目是快速看的，看错了返回条件，好险是在测试用例时发现了，所以题目长的时候更应该慢慢看题目，不要着急</p><img src="https://i.loli.net/2021/11/01/zK8uh7MiqBbFsYx.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/01/ismdITA5bCnE8w9.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/01/CEGDgenFLxi8NqM.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nodesBetweenCriticalPoints</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> lst<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> minIndex<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token operator">&lt;</span>lst<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>val<span class="token operator">&lt;</span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span>                minIndex<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token operator">></span>lst<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>val<span class="token operator">></span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span>                minIndex<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        lst<span class="token operator">=</span>lst<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>minIndex<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>alen<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>minIndex<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>minIndex<span class="token punctuation">[</span>alen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>minIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> m<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span>minIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minIndex<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                m<span class="token operator">=</span>temp<span class="token operator">&lt;</span>m<span class="token operator">?</span>temp<span class="token operator">:</span>m<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2059-转化数字的最小运算数"><a href="#2059-转化数字的最小运算数" class="headerlink" title="2059. 转化数字的最小运算数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/">2059. 转化数字的最小运算数</a></h2><p>这道题在竞赛时看懂了题目（终于看懂第三题了，泪目😭），但还是没有思路，所以打算竞赛时间过后来复习</p><p>赛后我看了<a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/solution/zhuan-hua-shu-zi-de-zui-xiao-yun-suan-sh-kju7/">官方题解</a>，思路其实还是很容易的，利用了队列来实现<strong>广度优先遍历</strong>，队列中每个元素的类型是一个<code>pair&lt;int,int&gt;</code>，记录的分别是<code>[计算结果，得出该结果所用的步数]</code></p><p>每一次遍历从队列中取出第一个值<code>x</code>，并将其进行<code>+</code>、<code>-</code>、<code>^</code>三种计算，得出结果<code>nx</code>，然后分为四种情况：</p><ul><li>如果<code>nx</code>刚好为我们要求的目标<code>goal</code>，直接返回步数step+1</li><li><code>nx</code>不在题目所给定的[1,1000]范围内，直接跳过，不进行操作</li><li><code>nx</code>在范围内，但是前面计算的数中已经出现过这个结果了，也是直接跳过，不进行操作（❗ 这里就要求我们额外记录一下之前出现的结果，我用的是<code>vector&lt;bool&gt;</code>数组）</li><li><code>nx</code>在范围内，前面也没有出现过这个数，则将得出的<code>nx</code>以<code>pair</code>的方式加到队列中</li></ul><p>❗ 另外一个要注意的是，由于题目还要求计算的数要利用给定数组<code>nums</code>中的数，所以这里要两层遍历，一层是三个操作符，另一层是和<code>nums</code>中的各个数计算</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> goal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span> ops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// 运算符列表</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 可操作范围内整数的访问情况</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 枚举数组中的元素和操作符并计算新生成的数值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> op<span class="token operator">:</span> ops<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> nx <span class="token operator">=</span> <span class="token function">op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果新生成的数值等于目标值，则返回对应操作数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">==</span> goal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 如果新生成的数值位于可操作范围内且未被加入队列，则更改访问情况并加入队列</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不存在从初始值到目标值的转化方案</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第265场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第265场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第265场&quot;&gt;&lt;/a&gt;LeetCode周赛第265场&lt;/h1&gt;&lt;p&gt;终于有时间来认认真真参加一次周赛了，</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛258场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B258%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B258%E5%9C%BA/</id>
    <published>2021-09-12T06:12:39.000Z</published>
    <updated>2021-09-12T07:56:17.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛257场"><a href="#LeetCode周赛257场" class="headerlink" title="LeetCode周赛257场"></a>LeetCode周赛257场</h1><p>这周的周赛第二题卡了挺久的，特别是最后面几个用例</p><p>然后是第三题，虽然没有做但是看了一下，感觉也挺有趣的:ice_cream:</p><h2 id="5867-反转单词前缀-—（简单）"><a href="#5867-反转单词前缀-—（简单）" class="headerlink" title="5867. 反转单词前缀    —（简单）"></a><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/">5867. 反转单词前缀</a>    —（简单）</h2><img src="https://i.loli.net/2021/09/12/AXe5iKohCBj9Uw1.png" style="zoom:80%;" /><p>第一题送分题，怎么舒服怎么来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reversePrefix</span><span class="token punctuation">(</span>string word<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                index<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> word<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5868-可互换矩形的组数-—（中等）"><a href="#5868-可互换矩形的组数-—（中等）" class="headerlink" title="5868. 可互换矩形的组数    —（中等）"></a><a href="https://leetcode-cn.com/problems/number-of-pairs-of-interchangeable-rectangles/">5868. 可互换矩形的组数</a>    —（中等）</h2><img src="https://i.loli.net/2021/09/12/LQGpVs37gmyHbO4.png" style="zoom:80%;" /><p>提示：</p><ul><li>n == rectangles.length</li><li>1 &lt;= n &lt;= 105</li><li>rectangles[i].length == 2</li><li>1 &lt;= widthi, heighti &lt;= 105</li></ul><p>这道题出错好多次，全都是细节问题，刚开始想着暴力解法和记忆表解法，但是都超时了:point_down:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//！！！下面代码是超时的解法！！！</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rlen<span class="token operator">=</span>rectangles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵个数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>rlen<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>rectangles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>rectangles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后题目总共有46个用例，后面一直卡在后面几个，直接痛苦面具:sweat:</p><p>赛后看了一下别人的解法，有两种方案，都是运用了哈希表来实现</p><p>有几个注意事项：</p><ol><li>精度问题，x/y按double求的话应该不会有问题，最好的方法应该是先求最大公约数，然后化简；</li><li>保存结果的话，注意key为<strong>pair时默认不支持unordered_map</strong>;（:warning:这个要注意）</li><li>注意数据范围，该用long long的地方不能犹豫。</li></ol><p>其中一种普通的解法可能会有给卡精度的风险，可能会有多个精度差不多的数而导致<code>res</code>改变，但本题目并没有卡，所以也可以了解一下该解法</p><p>简单来说就是遍历一遍矩形，求出各个矩阵的宽高比并打入哈希表中，哈希表记录的是每一种宽高比的总数</p><p>最后再运用高中知识排列组合的<code>组合公式</code>来求，（在一堆相同的宽高比中选出两个来配对）</p><img src="https://i.loli.net/2021/09/12/HBOSmRXbVlp2AWe.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>map<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> cur<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>map<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token operator">+=</span><span class="token punctuation">(</span>second<span class="token operator">*</span><span class="token punctuation">(</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种解法刚开始我是不太懂的，它是用了<code>gcd()</code>来求宽和高之间<code>最大公因数</code>，再利用它来化简宽高比：将(分子*BASE+分母)作为一个key存入哈希表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>map<span class="token punctuation">;</span>        <span class="token keyword">constexpr</span> <span class="token keyword">long</span> <span class="token keyword">long</span> BASE<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">1e8</span><span class="token punctuation">;</span><span class="token comment">//基数，大一点的数都可以</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> frac<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token operator">*</span>BASE<span class="token operator">+</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//化简，乘上基数以便在哈希表内区分</span>            <span class="token operator">++</span>map<span class="token punctuation">[</span>frac<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">+=</span><span class="token punctuation">(</span>second<span class="token operator">*</span><span class="token punctuation">(</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5869-两个回文子序列长度的最大乘积-—（中等）"><a href="#5869-两个回文子序列长度的最大乘积-—（中等）" class="headerlink" title="5869. 两个回文子序列长度的最大乘积    —（中等）"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/">5869. 两个回文子序列长度的最大乘积</a>    —（中等）</h2><p>给你一个字符串 s ，请你找到 s 中两个 不相交回文子序列 ，使得它们长度的 乘积最大 。两个子序列在原字符串中如果没有任何相同下标的字符，则它们是 不相交 的。</p><p>请你返回两个回文子序列长度可以达到的 最大乘积 。</p><p>子序列 指的是从原字符串中删除若干个字符（可以一个也不删除）后，剩余字符不改变顺序而得到的结果。如果一个字符串从前往后读和从后往前读一模一样，那么这个字符串是一个 回文字符串 。</p><p>示例 1：</p><img src="https://i.loli.net/2021/09/12/lZzOQqu7myNiCaG.png" style="zoom:80%;" /><blockquote><p>输入：s = “leetcodecom”<br>输出：9<br>解释：最优方案是选择 “ete” 作为第一个子序列，”cdc” 作为第二个子序列。<br>它们的乘积为 3 * 3 = 9 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “bb”<br>输出：1<br>解释：最优方案为选择 “b” （第一个字符）作为第一个子序列，”b” （第二个字符）作为第二个子序列。<br>它们的乘积为 1 * 1 = 1 。</p></blockquote><p>示例 3：</p><blockquote><p>输入：s = “accbcaxxcxx”<br>输出：25<br>解释：最优方案为选择 “accca” 作为第一个子序列，”xxcxx” 作为第二个子序列。<br>它们的乘积为 5 * 5 = 25 。</p></blockquote><p>提示：</p><ul><li>2 &lt;= s.length &lt;= 12</li><li>s 只含有小写英文字母</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛257场&quot;&gt;&lt;a href=&quot;#LeetCode周赛257场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛257场&quot;&gt;&lt;/a&gt;LeetCode周赛257场&lt;/h1&gt;&lt;p&gt;这周的周赛第二题卡了挺久的，特别是最后面几个</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛257场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B257%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B257%E5%9C%BA/</id>
    <published>2021-09-05T05:56:24.000Z</published>
    <updated>2021-09-05T08:21:26.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第257场"><a href="#LeetCode周赛第257场" class="headerlink" title="LeetCode周赛第257场"></a><a href="https://leetcode-cn.com/contest/weekly-contest-257/">LeetCode周赛第257场</a></h1><p>由于上一次周赛的时候LeetCode服务器出了问题，所以上次的周赛没有参加到</p><p>而本周的周赛开始前服务器也出了一些问题，好在修复地快进去了</p><img src="C:\Users\ZhaoYJ\AppData\Roaming\Typora\typora-user-images\image-20210905142220496.png" alt="image-20210905142220496" style="zoom:80%;" /><p>这周的周赛又让我从两道选手退化成了一道选手（前两道直接寄）</p><p>前两题都是数组题，后面两题就没怎么看了，这里就先记录前两道题目</p><h2 id="5863-统计特殊四元组"><a href="#5863-统计特殊四元组" class="headerlink" title="5863. 统计特殊四元组"></a><a href="https://leetcode-cn.com/problems/count-special-quadruplets/">5863. 统计特殊四元组</a></h2><p>给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目 ：</p><ul><li>nums[a] + nums[b] + nums[c] == nums[d] ，且</li><li>a &lt; b &lt; c &lt; d</li></ul><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,6]<br>输出：1<br>解释：满足要求的唯一一个四元组是 (0, 1, 2, 3) 因为 1 + 2 + 3 == 6 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [3,3,6,4,5]<br>输出：0<br>解释：[3,3,6,4,5] 中不存在满足要求的四元组。</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [1,1,1,3,5]<br>输出：4<br>解释：满足要求的 4 个四元组如下：</p></blockquote><ul><li>(0, 1, 2, 3): 1 + 1 + 1 == 3</li><li>(0, 1, 3, 4): 1 + 1 + 3 == 5</li><li>(0, 2, 3, 4): 1 + 1 + 3 == 5</li><li>(1, 2, 3, 4): 1 + 1 + 3 == 5</li></ul><p>第一道题因为数组长度最大到50，所以可以直接四重循环暴力解法</p><p>但是要注意是不能sort，因为题目给定了条件，初始下标中<code>a&lt;b&lt;c&lt;d</code>，如果排序的话就会打乱下标顺序了，我在做题中出错了一次也是这个原因</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countQuadruplets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//不能sort</span>        <span class="token keyword">int</span> nlen<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token operator">++</span>res<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N^4)</p><hr><h2 id="5864-游戏中弱角色的数量"><a href="#5864-游戏中弱角色的数量" class="headerlink" title="5864. 游戏中弱角色的数量"></a><a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/">5864. 游戏中弱角色的数量</a></h2><p>你正在参加一个多角色游戏，每个角色都有两个主要属性：攻击 和 防御 。给你一个二维整数数组 properties ，其中 properties[i] = [attacki, defensei] 表示游戏中第 i 个角色的属性。</p><p>如果存在一个其他角色的攻击和防御等级 都严格高于 该角色的攻击和防御等级，则认为该角色为 弱角色 。更正式地，如果认为角色 i 弱于 存在的另一个角色 j ，那么 attackj &gt; attacki 且 defensej &gt; defensei 。</p><p>返回 <strong>弱角色</strong> 的数量。</p><p>这道题当初做的时候想到了一个思路但是没有去实现，觉得会超时，后面结束比赛后去试了一下还真可以过，下面就来记录一下</p><h3 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h3><p>简单点就是在二维数组中先按攻击力<strong>从大到小</strong>排好，如果两个角色的攻击力相同的话就按防御力<strong>从小到大</strong>排序，例如下面的排序结果</p><pre class="line-numbers language-none"><code class="language-none">6 36 45 25 53 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们再遍历一遍，同时记录防御力的最大值<code>dmax</code>，如果当前遍历到的角色防御力小于<code>dmax</code>则找到了一个弱角色</p><p>我们不用担心相同攻击力的情况，因为相同攻击力时防御力是小的在前面的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfWeakCharacters</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>properties<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> plen<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dmax<span class="token operator">=</span>INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> p<span class="token operator">:</span>properties<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//cout&lt;&lt;p[0]&lt;&lt;" "&lt;&lt;p[1]&lt;&lt;"\n";</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>dmax<span class="token punctuation">)</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>            dmax<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dmax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(NlogN)</p><h3 id="其它解法"><a href="#其它解法" class="headerlink" title="其它解法"></a>其它解法</h3><p>这里有个大佬 <a href="https://leetcode-cn.com/u/lucifer1004/">吴自华</a> 的<a href="https://cp-wiki.vercel.app/tutorial/leetcode/WC257/#problem-b-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F">解法</a></p><img src="https://i.loli.net/2021/09/05/AEUhl721HGLRXeo.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfWeakCharacters</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bhi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> properties<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> properties<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> properties<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bhi <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bhi<span class="token punctuation">,</span> properties<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> bhi<span class="token punctuation">)</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第257场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第257场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第257场&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/contest/</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛254场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/</id>
    <published>2021-08-15T15:51:40.000Z</published>
    <updated>2021-09-05T06:09:43.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第254场"><a href="#LeetCode周赛第254场" class="headerlink" title="LeetCode周赛第254场"></a>LeetCode周赛第254场</h1><p>这场周赛再次给虐惨了，做到第二题就卡住了没有思路，争取下次周赛可以做到第三题<img src="https://i.loli.net/2021/09/05/85EFy4tfaplSvIi.png"></p><h2 id="5843-作为子字符串出现在单词中的字符串数目-—（简单）"><a href="#5843-作为子字符串出现在单词中的字符串数目-—（简单）" class="headerlink" title="5843. 作为子字符串出现在单词中的字符串数目  —（简单）"></a><a href="https://leetcode-cn.com/problems/number-of-strings-that-appear-as-substrings-in-word/">5843. 作为子字符串出现在单词中的字符串数目</a>  —（简单）</h2><p>给你一个字符串数组 patterns 和一个字符串 word ，统计 patterns 中有多少个字符串是 word 的子字符串。返回字符串数目。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><p>示例 1：</p><blockquote><p>输入：patterns = [“a”,”abc”,”bc”,”d”], word = “abc”<br>输出：3<br>解释：</p><ul><li>“a” 是 “abc” 的子字符串。</li><li>“abc” 是 “abc” 的子字符串。</li><li>“bc” 是 “abc” 的子字符串。</li><li>“d” 不是 “abc” 的子字符串。</li></ul><p>patterns 中有 3 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 2：</p><blockquote><p>输入：patterns = [“a”,”b”,”c”], word = “aaaaabbbbb”<br>输出：2<br>解释：</p><ul><li>“a” 是 “aaaaabbbbb” 的子字符串。</li><li>“b” 是 “aaaaabbbbb” 的子字符串。</li><li>“c” 不是 “aaaaabbbbb” 的字符串。</li></ul><p>patterns 中有 2 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 3：</p><blockquote><p>输入：patterns = [“a”,”a”,”a”], word = “ab”<br>输出：3<br>解释：patterns 中的每个字符串都作为子字符串出现在 word “ab” 中。</p></blockquote><p>提示：</p><ul><li>1 &lt;= patterns.length &lt;= 100</li><li>1 &lt;= patterns[i].length &lt;= 100</li><li>1 &lt;= word.length &lt;= 100</li><li>patterns[i] 和 word 由小写英文字母组成</li></ul><p>题目刚开始做的时候脑子没转过来，天真地想自己实现如何查找子字符串，到后面醒悟才想起可以用库函数，直接提交下一题（提交时还错了一次，哭）</p><p>注意这里<code>string::find()</code>可以用来查找子字符串，如果找到了则会返回子串第一个字符的下标序号，找不到则会返回<code>string::npos</code>该定值为<code>string::size_type</code>类型，即<code>size_t==usigned int</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numOfStrings</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> patterns<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token operator">:</span>patterns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string<span class="token operator">::</span>size_type pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5832-构造元素不等于两相邻元素平均值的数组-—（中等）"><a href="#5832-构造元素不等于两相邻元素平均值的数组-—（中等）" class="headerlink" title="5832. 构造元素不等于两相邻元素平均值的数组  —（中等）"></a><a href="https://leetcode-cn.com/problems/array-with-elements-not-equal-to-average-of-neighbors/">5832. 构造元素不等于两相邻元素平均值的数组</a>  —（中等）</h2><p>给你一个 下标从 0 开始 的数组 nums ，数组由若干 互不相同的 整数组成。你打算重新排列数组中的元素以满足：重排后，数组中的每个元素都 不等于 其两侧相邻元素的 平均值 。</p><p>更公式化的说法是，重新排列的数组应当满足这一属性：对于范围 1 &lt;= i &lt; nums.length - 1 中的每个 i ，(nums[i-1] + nums[i+1]) / 2 不等于 nums[i] 均成立 。</p><p>返回满足题意的任一重排结果。</p><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,4,5]<br>输出：[1,2,4,5,3]<br>解释：<br>i=1, nums[i] = 2, 两相邻元素平均值为 (1+4) / 2 = 2.5<br>i=2, nums[i] = 4, 两相邻元素平均值为 (2+5) / 2 = 3.5<br>i=3, nums[i] = 5, 两相邻元素平均值为 (4+3) / 2 = 3.5</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [6,2,0,9,7]<br>输出：[9,7,6,2,0]<br>解释：<br>i=1, nums[i] = 7, 两相邻元素平均值为 (9+6) / 2 = 7.5<br>i=2, nums[i] = 6, 两相邻元素平均值为 (7+2) / 2 = 4.5<br>i=3, nums[i] = 2, 两相邻元素平均值为 (6+0) / 2 = 3</p></blockquote><p>提示：</p><ul><li>3 &lt;= nums.length &lt;= 105</li><li>0 &lt;= nums[i] &lt;= 105</li></ul><p>这一道题刚拿到就写不出来了，完全没有思路，感觉和平时做的题型不一样</p><p>后来看了别人的作答之后才发现是挺简单的一道题，主要脑筋转不过来</p><p>这里拿数组<code>nums=[6,2,0,9,7]</code>来举例，简单的思路就是：</p><ol><li>先把数组排序，从小到大排好，eg：<code>nums=[0,2,6,7,9]</code></li><li>新建一个用来返回的空数组<code>res</code>，并按顺序将<code>nums</code>数组的数填充完<code>res</code>数组的奇数下标位（这里可以用一个指针<code>ans=0</code>指向nums表示填充到哪个数字），eg：<code>res=[0,-1,2,-1,6]</code>其中<code>-1</code>表示还没填充的位</li><li>最后再把偶数位也填充完，<code>res=[0,7,2,9,6]</code></li><li>此时在<code>res</code>数组中任意一位数要么是都大于两边的数，要么是都小于两边的数，即满足题目的要求，该数肯定不会等于两边数之和的平均数</li></ol><p>知道这个方法之后还是觉得挺简单的，主要就是想不到这个方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rearrangeArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>nLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第254场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第254场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第254场&quot;&gt;&lt;/a&gt;LeetCode周赛第254场&lt;/h1&gt;&lt;p&gt;这场周赛再次给虐惨了，做到第二题就卡</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记29-制作主菜单界面</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/</id>
    <published>2021-08-05T01:15:59.000Z</published>
    <updated>2021-08-05T07:07:43.002Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们来为游戏制作一个主菜单界面</p><h1 id="在新场景中绘制画布"><a href="#在新场景中绘制画布" class="headerlink" title="在新场景中绘制画布"></a>在新场景中绘制画布</h1><p>我们要专门为我们的菜单新建一个场景，而菜单则是在这个新场景中绘制的</p><p>我这里先把场景搭建好了，注意我们在摆放人物的时候可以点击右键菜单进行<code>脱包</code>处理，这样我们移除组件时就不会影响到素材里面的模板了</p><img src="https://i.loli.net/2021/08/05/29wfpAg8ZEyLdDG.png" style="zoom:80%;" /><p>然后我们也把UI摆放好</p><img src="https://i.loli.net/2021/08/05/sHZyaWhDmL6qEvK.png" style="zoom:80%;" /><p>同时我们也可以给UI添加一些视觉效果的处理</p><h2 id="将UI添加立体效果"><a href="#将UI添加立体效果" class="headerlink" title="将UI添加立体效果"></a>将UI添加立体效果</h2><p>这里可以添加一种效果，我想点击new game 时候相机会穿过标题UI然后靠近传送门的样式，下面就来实现一下</p><p>我们选中画布，然后如下图设置，将<code>Render Mode</code>选择为<code>Camera</code>，再把摄像机拖到下面的框框里</p><img src="https://i.loli.net/2021/08/05/VQnMjOfywAeiNTh.png" style="zoom:80%;" /><p>这时候点击运行会发现按钮给场景遮挡住了，这时候我们可以调一下<code>Plane Distance</code>，比如改成1，按钮就又可以看到了</p><p>最后我们再把<code>Render Mode</code>改为<code>World Space</code>，然后尝试向前移动相机，就可以发现达成了相机穿越标题的效果了，之所以要经过上面的步骤是因为可以让Unity自动调节UI的合适位置</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>UI建立好之后我们就要来实现按钮的功能了</p><img src="https://i.loli.net/2021/08/05/uZCjd6oGp7DJqe3.png" style="zoom:80%;" /><p>按钮最主要就是监听事件，下面先单独来写各种功能的方法，最后再配上整个代码文件</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><p>其中最简单的就是退出游戏，一行搞定</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QuitGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//退出游戏功能</span>        Application<span class="token punctuation">.</span><span class="token function">Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NewGame"><a href="#NewGame" class="headerlink" title="NewGame"></a>NewGame</h2><p>然后是创建新游戏，这里就要涉及多个代码文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NewGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//清楚所有存档</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">DeleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转换场景</span>        <span class="token comment">//会在SceneController里面完成</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载第一个场景</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//转换场景，可用于在标题界面过渡到第一个界面中</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> scene<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>scene<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传入参数不为空</span>            <span class="token comment">//加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载人物，在GMaeManager中创建了一个用于获得初始位置的方法</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> player <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//结束协程</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载第一个场景，可以将这个直接放在标题界面的功能里</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token string">"3D RPG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GmaeManager.cs</span><span class="token comment">//获得场景加载入口，这里是标题界面进入主场景时用于获得落地点</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Transform</span> <span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>destinationTag<span class="token operator">==</span>TransitionDestination<span class="token punctuation">.</span>DestinationTag<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>                <span class="token keyword">return</span> item<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意要把几个Manager对象复制到标题场景中</p><h2 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h2><p>由于我们游戏有多个场景，因此在加载功能中我们还要记住上次保存玩家是停留在哪一个场景，从而在加载存档时判断要加载哪一个场景的画面</p><p>也是有多个代码文件需要修改，需要注意区分</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//记录保存场景的名字</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SceneName<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        <span class="token comment">//在保存数据同时保存玩家停留在哪个场景</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//Continue</span>    <span class="token comment">//用于加载游戏的加载方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> sceneName <span class="token operator">=</span> SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>SceneName<span class="token punctuation">;</span><span class="token comment">//获得上次保存场景名称，可能为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sceneName<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不为空的话就加载场景</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//PlayerController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册GmaeManager</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加载人物数据</span>SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ContinueGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//转换场景，读取进度</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游戏中Esc返回主菜单"><a href="#游戏中Esc返回主菜单" class="headerlink" title="游戏中Esc返回主菜单"></a>游戏中Esc返回主菜单</h2><p>我们还有一个功能是在游戏内必要的，就是返回主菜单功能，这里也来实现一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//游戏中Esc回到主菜单</span>           SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>           <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>           <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//加载标题场景协程</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载标题方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这我们就成功实现了主菜单到游戏再到主菜单的过渡效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章我们来为游戏制作一个主菜单界面&lt;/p&gt;
&lt;h1 id=&quot;在新场景中绘制画布&quot;&gt;&lt;a href=&quot;#在新场景中绘制画布&quot; class=&quot;headerlink&quot; title=&quot;在新场景中绘制画布&quot;&gt;&lt;/a&gt;在新场景中绘制画布&lt;/h1&gt;&lt;p&gt;我们要专门为我们的菜单新建一个场景</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记28-保存数据</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/</id>
    <published>2021-08-04T01:32:04.000Z</published>
    <updated>2021-08-04T02:53:20.289Z</updated>
    
    <content type="html"><![CDATA[<p>这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到</p><h1 id="认识API"><a href="#认识API" class="headerlink" title="认识API"></a>认识API</h1><p>这里我们用到两个API，一个是**<a href="https://docs.unity.cn/cn/2020.3/ScriptReference/EditorPrefs.html">PlayerPrefs</a><strong>类，虽然官方文档写的是EditorPrefs，但是他们的方法是一样的，另外一个要用到的API是</strong><a href="https://docs.unity.cn/cn/2020.3/ScriptReference/JsonUtility.ToJson.html">JsonUtility.ToJson</a>**方法</p><p>PlayerPrefs：用于本地持久化保存与读取的类，PlayerPrefs类工作原理非常简单，以键值对的形式将数据保存在文件中，然后程序可以根据这个名称取出上次保存的数值</p><p>JsonUtility.ToJson：生成对象的公共字段的 JSON 表示形式。</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>我们新建一个<code>SaveManager.cs</code>然后来编写专门管理保存读取的类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SaveManager<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切换场景不销毁</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>            <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>            <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Save</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Load</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果键值存在的话就读取</span>            JsonUtility<span class="token punctuation">.</span><span class="token function">FromJsonOverwrite</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以进游戏体验一下了，按<code>S</code>键是保存玩家当前数据，按<code>L</code>键是读取，并且保存后在下一次游戏启动时仍然可以读取数据</p><p>Windows系统可以在注册表上看到保存的数据</p><img src="https://i.loli.net/2021/08/04/jTPgFrdWL1wH96N.png" style="zoom:80%;" /><h1 id="跨场景保存读取"><a href="#跨场景保存读取" class="headerlink" title="跨场景保存读取"></a>跨场景保存读取</h1><p>既然我们在下一次开启游戏也可以读取玩家数据，那么跨场景也不在话下</p><p>去到<code>SceneController.cs</code>修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//保存数据</span>        SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>                        <span class="token comment">//读取玩家数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在加载另外一个场景前会先保存数据，在加载场景完后我们先读取数据再退出协程</p><p>这样就实现了人物数据的保存了，当然这只是保存读取了人物的生命值、经验值等数据，其它数据也可以自由发挥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到&lt;/p&gt;
&lt;h1 id=&quot;认识API&quot;&gt;&lt;a href=&quot;#认识API&quot; class=&quot;headerlink&quot; title=&quot;认识API&quot;&gt;&lt;/a&gt;认识API&lt;/h1&gt;&lt;p&gt;这里我们用到两个A</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记27-不同场景的传送</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-03T01:05:23.000Z</published>
    <updated>2021-08-03T03:25:32.587Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来实现不同场景的传送</p><p>首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧</p><p>搭建好场景后，我们就可以正式开始来实现如何跨场景传送了</p><h1 id="设置好传送门属性"><a href="#设置好传送门属性" class="headerlink" title="设置好传送门属性"></a>设置好传送门属性</h1><p>首先就是要把两个不同场景的传送门属性设置好，注意要选择不同场景传送并把名字填上</p><p>下面是主世界的传送门属性</p><img src="https://i.loli.net/2021/08/03/qSY69TCAibHz8wP.png" style="zoom:80%;" /><p>以及另外一个世界传送门的属性</p><img src="https://i.loli.net/2021/08/03/O4ymdIfH3CVZA2L.png" style="zoom:80%;" /><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>下面的代码可能有点分散，需要修改的文件比较多，会有注释写出来在哪个文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs，添加了不同场景加载时的代码</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> playerPrefab<span class="token punctuation">;</span><span class="token comment">//玩家素材对象，用来不同场景时进行加载</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>                <span class="token comment">//同场景可以不用异步，直接传送</span>                <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>                <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>sceneName<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//TODO:保存数据</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里我们要外界把人物的素材拖进去代码中，以保证传送到另外一个场景时可以加载人物出来</p><img src="https://i.loli.net/2021/08/03/xDbVRIcpGHqTy4h.png" style="zoom:80%;" /><h1 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h1><h2 id="传送报错"><a href="#传送报错" class="headerlink" title="传送报错"></a>传送报错</h2><p>此时我们传送时会报错，有好几个问题我们慢慢来看</p><p>第一个问题是要把场景放在<code>Scene in Build</code>的设置当中</p><img src="https://i.loli.net/2021/08/03/dpRCZcfYrDAUx1V.png" style="zoom:80%;" /><p>第二个问题就是我们传送到新场景后，那些Manager文件都会不存在，因此我们要把它们加入<code>DontDestory</code>的清单里</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//在GameManager.cs  SceneController.cs  MouseManager.cs加上这行代码</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止此Manager文件在切换场景时给销毁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要在<code>GameManager.cs</code>  <code>SceneController.cs</code>  <code>MouseManager.cs</code>加上上面代码，并且是要<strong>继承单例模式的代码文件</strong></p><h2 id="人物传送后无法移动"><a href="#人物传送后无法移动" class="headerlink" title="人物传送后无法移动"></a>人物传送后无法移动</h2><p>这时候人物可以传送到另外一个场景了，但是不能移动，可能有下面问题</p><p>第一个可能存在的问题就是我们第二个场景的地板没有设置成<code>Ground</code>标签，我们要设置一下</p><p>第二个问题是我们在<code>PlayerController.cs</code>中的<code>OnMouseClicked</code>事件没有加载出来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//KeyManager.Instance.OnKeyInputMove+=MoveToTarget;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材禁用时注销事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">-=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">-=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="人物传送回来相机没有跟随"><a href="#人物传送回来相机没有跟随" class="headerlink" title="人物传送回来相机没有跟随"></a>人物传送回来相机没有跟随</h2><p>接着还有一个问题就是当我们从另外一个场景传送回来时，相机的跟随就会失效，这里来修复这个问题</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GameManager.cs</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>        <span class="token comment">//外界人物对象注册同时让相机进行跟随</span>        followCamera <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CinemachineFreeLook<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在地图中查找相机</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>followCamera<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果找到相机就让它跟随</span>            followCamera<span class="token punctuation">.</span>Follow <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>            followCamera<span class="token punctuation">.</span>LookAt <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来实现不同场景的传送&lt;/p&gt;
&lt;p&gt;首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧&lt;/p&gt;
&lt;p&gt;搭建好场景后，我们就可以正式开始来实现如何跨场景传送了&lt;/p&gt;
&lt;h1 id=&quot;设置好传送门属性&quot;&gt;&lt;a href=&quot;#设置好传送门</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记26-实现同场景的传送</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-02T01:49:40.000Z</published>
    <updated>2021-08-02T04:18:18.335Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们实现同场景的传送效果</p><h1 id="调整传送门"><a href="#调整传送门" class="headerlink" title="调整传送门"></a>调整传送门</h1><p>在这之前，我们要把不同的传送门摆放好先</p><p>另外我们可能会发现点击不了传送门，这是因为传送门的box collider挡住了我们鼠标的射线，这里把它的大小改一下就行了</p><img src="https://i.loli.net/2021/08/02/LHvS6JN4idPbQOA.png" style="zoom:80%;" /><p>给传送门加上<code>Portal</code>的标签，然后再去<code>MouseManager.cs</code>修改一下鼠标的图样</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//TODO:切换鼠标贴图</span><span class="token keyword">switch</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">"Ground"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>地面行走的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>arrow<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Enemy"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击敌人的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>attack<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Portal"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击传送门图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>doorway<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//if</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Portal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//点击传送门</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写传送管理代码"><a href="#编写传送管理代码" class="headerlink" title="编写传送管理代码"></a>编写传送管理代码</h1><p>我们创建一个<code>SceneController.cs</code>，之所以不是用Manager是因为在Unity有个<code>SceneManager</code>同名的文件存在</p><img src="https://i.loli.net/2021/08/02/FLvOK3csbIP45Xz.png" style="zoom:80%;" /><p>注意此文件继承的是<strong>单例模式</strong>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>SceneManagement</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SceneController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SceneController<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">GameObject</span> player<span class="token punctuation">;</span><span class="token comment">//玩家</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>            <span class="token comment">//同场景可以不用异步，直接传送</span>            <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>            <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先获得玩家的对象</span>        player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>        <span class="token comment">//获得目的地传送门对象</span>        <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象的坐标和旋转角度</span>        player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//恢复导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">TransitionDestination</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过传送门目的地的标签寻找目的地传送门所在位置</span>        <span class="token class-name"><span class="token keyword">var</span></span> entrances <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>entrances<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>destinationTag <span class="token operator">==</span> destinationTag<span class="token punctuation">)</span><span class="token comment">//目的地传送门标签匹配的话</span>                <span class="token keyword">return</span> entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外当我们玩家到达传送门，我希望它可以按键触发传送的，所以这里去到<code>TransitionPoint.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//触发器设置</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>E<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> canTrans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//按键触发传送</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个工作就是要把我们的<code>TransitionDestination.cs</code>作为组件添加在传送门子对象的点上</p><img src="https://i.loli.net/2021/08/02/3Jm9QXySOEiqdRF.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/02/Hen9PBroRJYcFjp.png" style="zoom:80%;" /><p>这个点是用来设置当前的点是属于哪一个标签的，我们就把一个传送门当做入口设为<code>ENTER</code>，另一个传送门当做目的地设为<code>A</code></p><p>另外去到传送门中，目的地也要进行对应的设置，入口传送门的目的地是<code>A</code>，反过来另外一个传送门想过来就要设置目的地为<code>ENTER</code></p><p><strong>注意</strong>：我们最好不要设置多个同一标签的传送门，可能会出现问题</p><p>最后，建立一个空对象，并把<code>SceneController.cs</code>作为组件附上去</p><img src="https://i.loli.net/2021/08/02/caN1CyLrJU76bnI.png" style="zoom:80%;" /><h1 id="Trigger无法触发问题"><a href="#Trigger无法触发问题" class="headerlink" title="Trigger无法触发问题"></a>Trigger无法触发问题</h1><p>如果函数内的Trigger事件没有触发的话，可能是玩家上没有添加钢体的原因，把钢体添加在主动碰撞的物体上（这里是玩家），然后把传送门和玩家的碰撞体组件中<code>IsTrigger</code>勾选上就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里我们实现同场景的传送效果&lt;/p&gt;
&lt;h1 id=&quot;调整传送门&quot;&gt;&lt;a href=&quot;#调整传送门&quot; class=&quot;headerlink&quot; title=&quot;调整传送门&quot;&gt;&lt;/a&gt;调整传送门&lt;/h1&gt;&lt;p&gt;在这之前，我们要把不同的传送门摆放好先&lt;/p&gt;
&lt;p&gt;另外我们可能会发现</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
</feed>
