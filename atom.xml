<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🌸樱花酒吧🍻</title>
  
  <subtitle>🌸Sakura-Pub🍻</subtitle>
  <link href="http://sakura-pub.ltd/atom.xml" rel="self"/>
  
  <link href="http://sakura-pub.ltd/"/>
  <updated>2021-08-02T04:18:18.335Z</updated>
  <id>http://sakura-pub.ltd/</id>
  
  <author>
    <name>Sakura.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity笔记26-实现同场景的传送</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-02T01:49:40.000Z</published>
    <updated>2021-08-02T04:18:18.335Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们实现同场景的传送效果</p><h1 id="调整传送门"><a href="#调整传送门" class="headerlink" title="调整传送门"></a>调整传送门</h1><p>在这之前，我们要把不同的传送门摆放好先</p><p>另外我们可能会发现点击不了传送门，这是因为传送门的box collider挡住了我们鼠标的射线，这里把它的大小改一下就行了</p><img src="https://i.loli.net/2021/08/02/LHvS6JN4idPbQOA.png" style="zoom:80%;" /><p>给传送门加上<code>Portal</code>的标签，然后再去<code>MouseManager.cs</code>修改一下鼠标的图样</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//TODO:切换鼠标贴图</span><span class="token keyword">switch</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">"Ground"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>地面行走的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>arrow<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Enemy"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击敌人的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>attack<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Portal"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击传送门图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>doorway<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//if</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Portal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//点击传送门</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写传送管理代码"><a href="#编写传送管理代码" class="headerlink" title="编写传送管理代码"></a>编写传送管理代码</h1><p>我们创建一个<code>SceneController.cs</code>，之所以不是用Manager是因为在Unity有个<code>SceneManager</code>同名的文件存在</p><img src="https://i.loli.net/2021/08/02/FLvOK3csbIP45Xz.png" style="zoom:80%;" /><p>注意此文件继承的是<strong>单例模式</strong>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>SceneManagement</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SceneController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SceneController<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">GameObject</span> player<span class="token punctuation">;</span><span class="token comment">//玩家</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>            <span class="token comment">//同场景可以不用异步，直接传送</span>            <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>            <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先获得玩家的对象</span>        player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>        <span class="token comment">//获得目的地传送门对象</span>        <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象的坐标和旋转角度</span>        player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//恢复导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">TransitionDestination</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过传送门目的地的标签寻找目的地传送门所在位置</span>        <span class="token class-name"><span class="token keyword">var</span></span> entrances <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>entrances<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>destinationTag <span class="token operator">==</span> destinationTag<span class="token punctuation">)</span><span class="token comment">//目的地传送门标签匹配的话</span>                <span class="token keyword">return</span> entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外当我们玩家到达传送门，我希望它可以按键触发传送的，所以这里去到<code>TransitionPoint.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//触发器设置</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>E<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> canTrans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//按键触发传送</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个工作就是要把我们的<code>TransitionDestination.cs</code>作为组件添加在传送门子对象的点上</p><img src="https://i.loli.net/2021/08/02/3Jm9QXySOEiqdRF.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/02/Hen9PBroRJYcFjp.png" style="zoom:80%;" /><p>这个点是用来设置当前的点是属于哪一个标签的，我们就把一个传送门当做入口设为<code>ENTER</code>，另一个传送门当做目的地设为<code>A</code></p><p>另外去到传送门中，目的地也要进行对应的设置，入口传送门的目的地是<code>A</code>，反过来另外一个传送门想过来就要设置目的地为<code>ENTER</code></p><p><strong>注意</strong>：我们最好不要设置多个同一标签的传送门，可能会出现问题</p><p>最后，建立一个空对象，并把<code>SceneController.cs</code>作为组件附上去</p><img src="https://i.loli.net/2021/08/02/caN1CyLrJU76bnI.png" style="zoom:80%;" /><h1 id="Trigger无法触发问题"><a href="#Trigger无法触发问题" class="headerlink" title="Trigger无法触发问题"></a>Trigger无法触发问题</h1><p>如果函数内的Trigger事件没有触发的话，可能是玩家上没有添加钢体的原因，把钢体添加在主动碰撞的物体上（这里是玩家），然后把传送门和玩家的碰撞体组件中<code>IsTrigger</code>勾选上就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里我们实现同场景的传送效果&lt;/p&gt;
&lt;h1 id=&quot;调整传送门&quot;&gt;&lt;a href=&quot;#调整传送门&quot; class=&quot;headerlink&quot; title=&quot;调整传送门&quot;&gt;&lt;/a&gt;调整传送门&lt;/h1&gt;&lt;p&gt;在这之前，我们要把不同的传送门摆放好先&lt;/p&gt;
&lt;p&gt;另外我们可能会发现</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记25-制作传送门</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/</id>
    <published>2021-08-01T01:53:22.000Z</published>
    <updated>2021-08-01T03:53:51.612Z</updated>
    
    <content type="html"><![CDATA[<p>我们这一章来制作一个传送门以供后面玩家切换不同场景时使用</p><h1 id="制作传送门Shader"><a href="#制作传送门Shader" class="headerlink" title="制作传送门Shader"></a>制作传送门Shader</h1><p>首先就是要来制作传送门的Shader，新建一个<code>Lit Shader Graph</code>，这是一个有光影响的shader，菜单中还有一个叫做Unlit Shader Graph就是没有光影响的</p><p>这里建好后起名为<code>Portal Shader</code></p><img src="https://i.loli.net/2021/08/01/pd7nMhKZHVBm4ar.png" style="zoom:80%;" /><p>注意里边的设置，Surface选择<code>Transparent</code>就是有透明通道的意思，然后勾选<code>Two Sided</code>显示两面</p><img src="https://i.loli.net/2021/08/01/k7eZSNDKwTt2Y43.png" style="zoom:80%;" /><p>这里直接上做好的图，颜色的属性面板中注意要选择<code>HDR</code></p><img src="https://i.loli.net/2021/08/01/nwoQLuWKhYSR8lp.png" style="zoom:80%;" /><p>做好后点击左上角<code>Save Asset</code>保存，然后右键<code>Shder Graph</code>创建为一个<code>Materials</code></p><img src="https://i.loli.net/2021/08/01/ecxz9EY5KfGgMOq.png" style="zoom:80%;" /><p>这样一个传送门的Shader就创建好了</p><h1 id="制作传送门"><a href="#制作传送门" class="headerlink" title="制作传送门"></a>制作传送门</h1><p>回到地图上，我们创建一个<code>Quad</code></p><img src="https://i.loli.net/2021/08/01/1ULfhYbuIgzD529.png" style="zoom:80%;" /><p>然后把刚刚的传送门材质附上去，然后就可以看到传送门的雏形了</p><img src="https://i.loli.net/2021/08/01/oGMurVFip1O8sjA.png" style="zoom:80%;" /><p>之后可以创建一个子对象，表示传送点，以后当玩家触碰这个点便可以触发传送事件</p><img src="https://i.loli.net/2021/08/01/z65KBjWylxAvGIo.png" style="zoom:80%;" /><p>如图我还将这个点附上了一个蓝色图标，代表这两个传送门是互通的，一对的，可以起到一个标记作用</p><h1 id="编写传送门基本代码"><a href="#编写传送门基本代码" class="headerlink" title="编写传送门基本代码"></a>编写传送门基本代码</h1><p>这里编写一下基本的传送门代码，详细的代码完善留在下一章节</p><img src="https://i.loli.net/2021/08/01/aVGXZyRzq36d8pt.png" style="zoom:80%;" /><p>这里的<code>TransitionPoint</code>挂载在传送门上，而<code>TransitionDestination</code>挂载在蓝色的点上</p><p>我们先来编辑TransitionPoint.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionPoint.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionPoint</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TransitionType</span><span class="token punctuation">&#123;</span><span class="token comment">//传送状态</span>        SameScene<span class="token punctuation">,</span>DifferentScene    <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Transition Info（传送门设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">;</span><span class="token comment">//记录场景名称</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionType</span> transitionType<span class="token punctuation">;</span><span class="token comment">//记录传送状态，同场景传送就外边选择第一个，不同场景就选择第二个</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token comment">//传送点目的地</span>    <span class="token comment">//触发器设置</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerStay</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家在传送门区域内</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerExit</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家离开了传送门区域</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中传送点目的地对应的在TransitionDestination.cs中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionDestination.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionDestination</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DestinationTag</span><span class="token punctuation">&#123;</span><span class="token comment">//传送点标签</span>        ENTER<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的A,B,C可以自行修改，表示的是不同传送门中的不同地方，类似于一个站牌</p><p>我们还注意到在前面<code>TransitionPoint.cs</code>中有触发的代码，这里要到Unity属性面板中把触发<code>isTrigger</code>选项勾上，否则不能触发<code>OnTriggerStay()</code>和<code>OnTriggerExit()</code>方法</p><img src="https://i.loli.net/2021/08/01/G7DPlvBtNd5Lw9Y.png" style="zoom:80%;" /><p>当然，现在用到的是<code>Mesh Collider</code>，这里触发面积只是一个平面，我们可以换成<code>Box Collider</code>，让它的触发面积更大一些</p><img src="https://i.loli.net/2021/08/01/mPRClNHWdA6jufi.png" style="zoom:80%;" /><p>弄好这些后，记得把传送门保存为一个素材</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们这一章来制作一个传送门以供后面玩家切换不同场景时使用&lt;/p&gt;
&lt;h1 id=&quot;制作传送门Shader&quot;&gt;&lt;a href=&quot;#制作传送门Shader&quot; class=&quot;headerlink&quot; title=&quot;制作传送门Shader&quot;&gt;&lt;/a&gt;制作传送门Shader&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记24-制作玩家状态条</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/</id>
    <published>2021-07-31T02:35:09.000Z</published>
    <updated>2021-07-31T03:56:36.736Z</updated>
    
    <content type="html"><![CDATA[<p>本章来制作玩家的状态条，如血量条，经验条等</p><h1 id="编辑UI布局"><a href="#编辑UI布局" class="headerlink" title="编辑UI布局"></a>编辑UI布局</h1><p>第一步也是建立一个画布，模式使用默认的<code>Screen Space</code>覆盖屏幕</p><p>值得注意是为了使状态条可以随着屏幕的分辨率大小而切换，我们的<code>UI Scale Mode</code>要设置成<code>Scale With Scree</code></p><img src="https://www.hualigs.cn/image/6104bb2a28b1d.jpg" style="zoom:80%;" /><p>之后创建好UI，可以在<code>Scene</code>视图的2D模式下调整到合适的位置，然后在<code>Game</code>视图下预览效果，可以自行多多尝试</p><p>最后的效果如下</p><img src="https://i.loli.net/2021/07/31/xh2a6d1GFWIAQB3.png" style="zoom:80%;" /><p>注意这里的文字我用了自定义的字体，在Unity中只用把你想要用的物体拖拽进来分类好，就可以直接在文字UI设置面板上选择使用了</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>接下来就是编写代码来管理我们的UI了</p><img src="https://i.loli.net/2021/07/31/WEluxrQkRazFKf5.png" style="zoom:80%;" /><p>然后把代码作为组件添加到上面创建的画布当中，接着就是编写代码了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>UI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerHealthUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于我们的人物信息栏最终会保存为一个prefab</span>    <span class="token comment">//因此我们可以不使用拖拽gameobject方式来获得对象</span>    <span class="token comment">//可以直接使用获得对象的子对象方式</span>    <span class="token class-name">Text</span> levelText<span class="token punctuation">;</span><span class="token comment">//获得text文本</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//生命值拖拽条</span>    <span class="token class-name">Image</span> expSlider<span class="token punctuation">;</span><span class="token comment">//经验拖拽条</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注意GetChild填写的参数类似于数组下标，第一个对象的索引是0</span>        levelText <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Text<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得文字对象</span>        healthSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得生命拖拽条</span>        expSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得经验值拖拽条</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        levelText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Level  "</span> <span class="token operator">+</span>             GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//00是规定给它的一个格式，比如01 02....</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过GameManager类来获得player的states</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>currentHealth<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>MaxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentExp<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>baseExp<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        expSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是借助了<code>GameManager.cs</code>中的单例模式实例化的方式来获得player的状态信息，因为先前我用了外界注册的方式把玩家的信息赋予了GameManager里面的成员变量</p><p>到这我们就大功告成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章来制作玩家的状态条，如血量条，经验条等&lt;/p&gt;
&lt;h1 id=&quot;编辑UI布局&quot;&gt;&lt;a href=&quot;#编辑UI布局&quot; class=&quot;headerlink&quot; title=&quot;编辑UI布局&quot;&gt;&lt;/a&gt;编辑UI布局&lt;/h1&gt;&lt;p&gt;第一步也是建立一个画布，模式使用默认的&lt;code&gt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记23-制作玩家的升级</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/</id>
    <published>2021-07-30T02:05:51.000Z</published>
    <updated>2021-07-31T04:10:05.890Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中我们来制作玩家的经验系统，并附有升级功能</p><h1 id="扩展CharacterData-SO"><a href="#扩展CharacterData-SO" class="headerlink" title="扩展CharacterData_SO"></a>扩展CharacterData_SO</h1><p>我们首先打开<code>CharacterData_SO.cs</code>添加一些额外的属性进去，同时写一个升级时处理的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Character States/Data"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"States Info（属性信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">;</span><span class="token comment">//最大生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">;</span><span class="token comment">//当前生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseDefence<span class="token punctuation">;</span><span class="token comment">//基础防御值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentDefence<span class="token punctuation">;</span><span class="token comment">//当前防御值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Kill（击杀信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> killPoint<span class="token punctuation">;</span><span class="token comment">//击杀后掉落的经验值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Level（等级信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentLevel<span class="token punctuation">;</span><span class="token comment">//当前等级</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxLevel<span class="token punctuation">;</span><span class="token comment">//最大等级数</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseExp<span class="token punctuation">;</span><span class="token comment">//基础经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentExp<span class="token punctuation">;</span><span class="token comment">//当前经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> levelBuff<span class="token punctuation">;</span><span class="token comment">//每次升级整体属性提升的百分比</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> LevelMultiplier<span class="token punctuation">&#123;</span>        <span class="token comment">//升级提升属性加的倍率</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>currentLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> levelBuff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentExp <span class="token operator">+=</span> point<span class="token punctuation">;</span><span class="token comment">//把外界的经验加进来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentExp <span class="token operator">>=</span> baseExp<span class="token punctuation">)</span>            <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这个方法中添加升级时想提升的数据</span>        <span class="token comment">//将current+1限制在[0,maxLevel]闭区间中</span>        currentLevel <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>currentLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>maxLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将经验和生命值按照每一等级不同倍率增长（也可以使用固定值level buff）</span>        baseExp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>baseExp<span class="token operator">*</span>LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxHealth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>maxHealth <span class="token operator">*</span> LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentHealth <span class="token operator">=</span> maxHealth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再去到<code>CharacterStates.cs</code>做最后的修改</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//打死怪后加经验</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        attacker<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//石头反击石头人的攻击方式</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//TODO:加经验</span>    <span class="token comment">//可以通过GameManager来访问玩家的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们去到人物的<code>PlayerData</code>还有每个敌人的<code>Data</code>添加属性就可以了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/bc33680758884eb88e5bfed71402eaa5.png" alt="1.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本章中我们来制作玩家的经验系统，并附有升级功能&lt;/p&gt;
&lt;h1 id=&quot;扩展CharacterData-SO&quot;&gt;&lt;a href=&quot;#扩展CharacterData-SO&quot; class=&quot;headerlink&quot; title=&quot;扩展CharacterData_SO&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记22-制作血量条UI</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/</id>
    <published>2021-07-29T01:28:59.000Z</published>
    <updated>2021-07-29T10:01:08.942Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来制作一下敌人的血量条</p><h1 id="创建血条UI"><a href="#创建血条UI" class="headerlink" title="创建血条UI"></a>创建血条UI</h1><h2 id="创建血条基础形状（Canvas与Image）"><a href="#创建血条基础形状（Canvas与Image）" class="headerlink" title="创建血条基础形状（Canvas与Image）"></a>创建血条基础形状（Canvas与Image）</h2><p>首先在<code>Hierachy</code>窗口中创建一个<code>Canvas</code>（画布），并将它命名为<code>HealthBarCanvas</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/a4bddbb255de4c87825a7866dd064269.png" alt="1.png" style="zoom:80%;" /><p>之后我们改一下<code>HealthBarCanvas</code>设置，并把坐标重置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c8fa921e76f4decb29167a49ad882f1.png" alt="2.png" style="zoom:80%;" /><p>随后我们在这个画布的基础上创建一个<code>Image</code>，并将它命名为<code>Bar Holder</code>，然后在把它的坐标改一下，改成像一个血条的大小</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/48339de2f8e6417f94b09466da3b7428.png" alt="3.png" style="zoom:80%;" /><p>我们就可以在Scene窗口上看到血条的初始样子了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/ccf344e88ab44a2e92fc6563d1339523.png" alt="4.png" style="zoom:80%;" /><h2 id="创建血条底层图像（Source-Image）"><a href="#创建血条底层图像（Source-Image）" class="headerlink" title="创建血条底层图像（Source Image）"></a>创建血条底层图像（Source Image）</h2><p>接着我们要为<code>Bar Holder</code>导入一个<code>Source Image</code>作为血条的底层，这里就选择自己创建一个图像作为它的底层</p><p>首先要打开<code>Package Manager</code>安装一下<code>2D Sprite</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c103cd1256d4e5cb07ed10165846528.png" alt="5.png" style="zoom:80%;" /><p>接着我们创建一个路径专门存放UI相关的对象，这里创建一个<code>Square</code>方形图像</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/73d842b512f940698760bf2547bbf82c.png" alt="6.png" style="zoom:80%;" /><p>再把这个方形图像应用在刚刚的<code>Source Image</code>中就行了</p><p>由于现在我们创建出来的是一个血条的底层，那么我们可以把它的颜色设置为红色底，待会有个上层图像设置成绿色，这样弄出来就有血条的样子了</p><p>因此我们这里把颜色改为红色（这里我把颜色的透明度改成了 150 ）</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/9d082235f7dc478ca60891914aaa2de1.png" alt="7.png" style="zoom:80%;" /><h2 id="创建血条上层图像"><a href="#创建血条上层图像" class="headerlink" title="创建血条上层图像"></a>创建血条上层图像</h2><p>我们在<code>Bar Holder</code>的基础上再创建一个图像<code>Image</code>，命名为<code>Current Health</code>，并将宽度和高度设置成和底层一样（2.5和0.25）</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/13abb2c92ea14215973e66d999182fa4.png" alt="8.png" style="zoom:80%;" /><p>同时<code>Source Image</code>还是和刚刚一样，颜色调为绿色</p><p>唯一不同的是图片的类型<code>Image Type</code>要调为<strong>填充</strong><code>Filled</code>，填充的方式为<strong>水平填充</strong><code>Horizontal</code>，之后我们就可以通过调节填充数量<code>Fill Amount</code>来控制绿色条的长度，从而代表血量的多少了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/f5d505bfb9e74b98a2e2ffdaa4b81b15.png" alt="9.png" style="zoom:80%;" /><p>效果图如下</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/72681600544d4713a09b34e971078333.png" alt="10.png" style="zoom:80%;" /><p>这样一个简陋的血条就弄好了，我们将它保存为一个素材</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/7d681c103df74db1921f9235c27f02e1.png" alt="11.png" style="zoom:80%;" /><h2 id="设置血条在敌人上方的位置"><a href="#设置血条在敌人上方的位置" class="headerlink" title="设置血条在敌人上方的位置"></a>设置血条在敌人上方的位置</h2><p>由于我们每个敌人高矮不同，就导致了血条在不同敌人的位置也不一样，同时也是为了方便我们后面的代码，这里我们要为每个敌人设置一下血条应该出现的位置</p><p>最直接的办法就是为每个敌人对象再创建一个子对象来记录血条位置</p><p>我们打开<code>Prefabs ---&gt; Characters</code>目录编辑敌人素材，这里拿史莱姆为例子</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/a4ed16108baa4e62a2c591cb1d263eb6.png" alt="13.png" style="zoom:80%;" /><p>像上面图片这样，我们创建了一个<code>HealthBar Point</code>的空对象来记录血条的位置，这样就很方便我们代码的编写了</p><p>最后按照同样的方式给每个敌人都安放<code>HealthBar Point</code></p><h1 id="编写血条代码"><a href="#编写血条代码" class="headerlink" title="编写血条代码"></a>编写血条代码</h1><h2 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h2><p>在创建血条代码之前，我们先在<code>CharacterStates.cs</code>中创建一个事件，即在造成伤害时要触发的血条变动事件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//造成伤害时血条改变的事件</span><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">></span></span> UpdateHealthBarOnAttack<span class="token punctuation">;</span><span class="token comment">//在造成伤害时调用</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO:血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建血条代码"><a href="#创建血条代码" class="headerlink" title="创建血条代码"></a>创建血条代码</h2><p>接下来我们就来写控制血条的脚本代码</p><p>在下图目录创建一个脚本，起名为<code>HealthBarUI.cs</code></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/19ea0718eaf34586b42b44476b56da6c.png" alt="12.png" style="zoom:80%;" /><p>然后打开编写代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HealthBarUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> healthUIPrefab<span class="token punctuation">;</span><span class="token comment">//供外界提供一个血条素材</span>    <span class="token keyword">public</span> <span class="token class-name">Transform</span> barPoint<span class="token punctuation">;</span><span class="token comment">//记录血量条该显示在敌人的哪个位置</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"血条显示设置"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> alwaysVisible<span class="token punctuation">;</span><span class="token comment">//血条是否一直可见</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> visibleTime<span class="token punctuation">;</span><span class="token comment">//血条显示时间（如果不是一直可见的情况下）</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> timeLeft<span class="token punctuation">;</span><span class="token comment">//剩余的显示时间</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//拿到血条上层图像</span>    <span class="token class-name">Transform</span> UIbar<span class="token punctuation">;</span><span class="token comment">//记录生成的血条在的位置</span>    <span class="token class-name">Transform</span> cam<span class="token punctuation">;</span><span class="token comment">//拿到摄像机位置以处理血条一直面向我们摄像机</span>    <span class="token class-name">CharacterStates</span> currentStates<span class="token punctuation">;</span><span class="token comment">//获取当前人物的states</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentStates<span class="token punctuation">.</span>UpdateHealthBarOnAttack <span class="token operator">+=</span> UpdateHealthBar<span class="token punctuation">;</span><span class="token comment">//注册事件</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//OnEnable在每次切换地图时都会调用一次</span>        cam <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">;</span><span class="token comment">//获取主相机位置</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Canvas<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//遍历每一个画布</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>renderMode <span class="token operator">==</span> RenderMode<span class="token punctuation">.</span>WorldSpace<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//找到血条所在的画布，有多种方法来获得</span>                <span class="token comment">//也可以供外界提供此画布，更严谨一点</span>                UIbar <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>healthUIPrefab<span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">;</span>                <span class="token comment">//获得上层图像（绿色条）的对象，下标为0</span>                healthSlider <span class="token operator">=</span> UIbar<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//是否一直可见</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealthBar</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//更新血量</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果当前血量小于等于0，就销毁UIbar</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每次更新时必然可见</span>        UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到血量百分比</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>currentHealth <span class="token operator">/</span> maxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新血条长度</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在Update后一帧执行</span>        <span class="token comment">//更新血条跟随敌人位置</span>        <span class="token comment">//这里先检测UIbar有没有给销毁</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>UIbar <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            UIbar<span class="token punctuation">.</span>position <span class="token operator">=</span> barPoint<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//更新到敌人位置</span>            UIbar<span class="token punctuation">.</span>forward <span class="token operator">=</span> cam<span class="token punctuation">.</span>forward<span class="token punctuation">;</span><span class="token comment">//面朝摄像机（即摄像机的方向）</span>            <span class="token comment">//血条剩余显示时间</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>timeLeft <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                timeLeft <span class="token operator">=</span> visibleTime<span class="token punctuation">;</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                timeLeft <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后把代码脚本挂载到每个敌人身上，再调整数据就可以运行试试看效果了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来制作一下敌人的血量条&lt;/p&gt;
&lt;h1 id=&quot;创建血条UI&quot;&gt;&lt;a href=&quot;#创建血条UI&quot; class=&quot;headerlink&quot; title=&quot;创建血条UI&quot;&gt;&lt;/a&gt;创建血条UI&lt;/h1&gt;&lt;h2 id=&quot;创建血条基础形状（Canvas与Image）&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记21-反击石头人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/</id>
    <published>2021-07-27T13:54:34.000Z</published>
    <updated>2021-07-28T01:59:34.199Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人</p><h1 id="实现石头击飞玩家并造成伤害"><a href="#实现石头击飞玩家并造成伤害" class="headerlink" title="实现石头击飞玩家并造成伤害"></a>实现石头击飞玩家并造成伤害</h1><p>我们打开<code>Rock.cs</code>，我们要有区分性的触发伤害，对于玩家和敌人可以造成伤害，但是对于丢到地面的情况是不能造成伤害的，所以这里可以利用一个枚举来区分开来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RockStates</span><span class="token punctuation">&#123;</span>HitPlayer<span class="token punctuation">,</span>HitEnemy<span class="token punctuation">,</span>HitNothing<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token class-name">RockStates</span> rockStates<span class="token punctuation">;</span><span class="token comment">//枚举实例</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">;</span><span class="token comment">//造成的伤害是多少</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//other指被石头打到的对象</span>    <span class="token comment">//当发生碰撞时会执行这个函数</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>rockStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitPlayer<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction <span class="token operator">*</span> force<span class="token punctuation">;</span><span class="token comment">//击退玩家</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//眩晕</span>                <span class="token comment">//这里的TakeDamage是重载的其中一个方法</span>                <span class="token comment">//造成伤害</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span><span class="token comment">//复原状态以防一直执行</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end switch</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到其中的<code>TakeDamage()</code>是一个重载方法，打开<code>CharacterStates.cs</code>我们这里补充一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//函数重载</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后保存关闭，别忘了要在外边石头对象上赋予一个初始伤害值</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/87f552555d2d4f60b4fe62d0d9c10da6.png" alt="1.png" style="zoom:80%;" /><p>这样我们就实现了石头的第一个状态</p><h1 id="实现石头攻击石头人"><a href="#实现石头攻击石头人" class="headerlink" title="实现石头攻击石头人"></a>实现石头攻击石头人</h1><p>先把代码完善好</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们这里是反击石头人，所以要有个判断鼠标点击到了石头，一个最直接的办法就是给我们的石头添加一个标签，然后再修改一下鼠标点击时的方法</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/e18b4dde9c5b4129bba36dd1c9f553b2.png" alt="2.png" style="zoom:80%;" /><p>回到<code>PlayerController.cs</code>修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果点击的对象不是敌人而是其它另类可攻击对象，如石头</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates            <span class="token operator">==</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果是石头并且石头不在空中而是落地之后</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates <span class="token operator">=</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">;</span>            <span class="token comment">//防止攻击那一刹那速度小于1导致石头状态发生改变</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span>                        <span class="token comment">//添加一个玩家朝向的力，力的大小暂时定 40</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到条件中有一个是判断是否为<code>HitNothing</code>，我们可以利用判断石头是否为接近于静止时为条件，这里我们就要回去<code>Rock.cs</code>做一些修改了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rb<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span><span class="token comment">//防止石头一生成时速度为0导致状态发生改变</span>    <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//固定帧更新</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>sqrMagnitude <span class="token operator">&lt;</span> <span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向量的平方</span>        rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后别忘了在<code>MouseManager.cs</code>加上代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> point <span class="token operator">=</span> hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//点击石头等对象用</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="为石头加上爆裂特效"><a href="#为石头加上爆裂特效" class="headerlink" title="为石头加上爆裂特效"></a>为石头加上爆裂特效</h1><p>最后我们想在石头打到石头人时有一个爆裂碎石特效，这里就要用到<code>Particle System</code>了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/efcac51c11a3459cb6e1cfad55ff677a.png" alt="3.png" style="zoom:80%;" /><p>创建好之后我们按照下图参考设置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/2a5fef602fe948eab2649b98a3f07f83.png" alt="5.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/529e6ea5fe1141afb30b34135e7b8018.png" alt="6.png" style="zoom:80%;" /><img src="https://p6-tt.byteimg.com/origin/pgc-image/e34343a1983440909f77ce88719261e3.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/973530a9742240a7bc989b50a5ce86fb.png" alt="8.png" style="zoom:80%;" /><p>自己多多测试一下效果，满意之后我们就可以改个名将它保存为一个素材放好先，然后不要忘了把地图上刚刚调试的删除</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/4b40b473872f4223a4aafecdb889c930.png" alt="9.png" style="zoom:80%;" /><p>最后再在<code>Rock.cs</code>上修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">GameObject</span> RockBreakParticle<span class="token punctuation">;</span><span class="token comment">//石头爆裂特效，供外界拖拽进来</span><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    Instantiate        <span class="token punctuation">(</span>RockBreakParticle<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//击中敌人时产生爆裂特效</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后不要忘了把石头爆裂的特效拖进去设置面板里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/272290cea6af4b3a8f67fbe952186662.png" alt="10.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人&lt;/p&gt;
&lt;h1 id=&quot;实现石头击飞玩家并造成伤害&quot;&gt;&lt;a href=&quot;#实现石头击飞玩家并造成伤害&quot; class=&quot;headerlink&quot; title=&quot;实现石头击飞玩家并造</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记20-实现石头人丢出石头</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/</id>
    <published>2021-07-26T01:12:34.000Z</published>
    <updated>2021-07-26T03:00:21.294Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家</p><h1 id="编辑石头"><a href="#编辑石头" class="headerlink" title="编辑石头"></a>编辑石头</h1><p>首先我们找到石头素材拖出来，由于我们要给它施加一个力，因此这里就要用到<code>Rigidbody(钢体)</code>组件了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/63ea4e8d49e540acb69a7ded75d37782.png" alt="2.png" style="zoom:80%;" /><p>同时石头还要与地面发生碰撞，因此还要添加一个碰撞体，这里选择的是<code>MeshCollider</code>，勾选<code>Convex</code>可以看到碰撞体积刚好适配我们的石头形状</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/ddc484a234c94603b2b16b9dd5ea0a42.png" alt="3.png" style="zoom:80%;" /><p>然后我们就要来进行写代码了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/0a42c8f078f8441ea47b3ef4af3302f8.png" alt="1.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Rigidbody</span> rb<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings(扔出石头参数设置)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> force<span class="token punctuation">;</span><span class="token comment">//丢出去的冲击力大小</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> target<span class="token punctuation">;</span><span class="token comment">//丢向的目标</span>    <span class="token keyword">private</span> <span class="token class-name">Vector3</span> direction<span class="token punctuation">;</span><span class="token comment">//丢出去的方向</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//防止丢出去那一刹那玩家脱离丢失目标导致石头生成不出来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PlayerController<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>                <span class="token comment">//Vector3.up是想在石头丢出去的时候上升一个高度</span>        direction <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position <span class="token operator">+</span> Vector3<span class="token punctuation">.</span>up<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>        <span class="token comment">//Impulse是冲击力的模式</span>        rb<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>direction <span class="token operator">*</span> force<span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们将石头素材保存一个模板对象</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/735c192da1924614a7f5e0f0ee01b428.png" alt="4.png" style="zoom:80%;" /><h1 id="进一步完善石头人"><a href="#进一步完善石头人" class="headerlink" title="进一步完善石头人"></a>进一步完善石头人</h1><p>随后我们再次编辑石头人，因为我们的石头是从石头人的手上丢出去的，因此我们就要获得手的坐标，即下面的对象坐标</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/0cdbbddf408c42e6a443e151c343ce6b.png" alt="5.png" style="zoom:80%;" /><p>知道这个后我们暂时放在一边，来编写一下石头人的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Rock Settings（丢石头攻击的相关设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> rockPrefab<span class="token punctuation">;</span><span class="token comment">//石头素材</span><span class="token keyword">public</span> <span class="token class-name">Transform</span> handPos<span class="token punctuation">;</span><span class="token comment">//丢出石头的手的坐标</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ThrowRock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建石头对象，第三个参数是旋转，这里选择维持初始旋转</span>        <span class="token class-name">GameObject</span> rock <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>rockPrefab<span class="token punctuation">,</span>handPos<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>        rock<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>target <span class="token operator">=</span> attackTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把石头人的动画事件添加上去</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/6ec880f34ce24caab5c2270d61e5d04a.png" alt="6.png" style="zoom:80%;" /><p>最后别忘了还要选择石头的素材（就是我们刚刚保存好的素材模板），以及手的坐标</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/29b7a5e0ae72481a933c5728c35ca1b9.png" alt="7.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家&lt;/p&gt;
&lt;h1 id=&quot;编辑石头&quot;&gt;&lt;a href=&quot;#编辑石头&quot; class=&quot;headerlink&quot; title=&quot;编辑石头&quot;&gt;&lt;/a&gt;编辑石头&lt;/h1&gt;&lt;p&gt;首先我们找到石头素材拖出来，由于我们要</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记19-设置石头人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/</id>
    <published>2021-07-25T04:09:19.000Z</published>
    <updated>2021-07-25T06:52:30.857Z</updated>
    
    <content type="html"><![CDATA[<p>这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少</p><h1 id="设置动画"><a href="#设置动画" class="headerlink" title="设置动画"></a>设置动画</h1><p>我们去浏览石头人的动画可以发现，<code>Attack01</code>是类似拿起石头丢我们，它才是技能攻击，而<code>Attack02</code>是击晕玩家的攻击动画，可以作为普通攻击来使，因此我们在调整攻击动画时要注意分清</p><p>我们的动画控制器文件就选择是基于<code>兽人</code>的动画来完成，创建一个<code>New Animator Override Controller</code>，模板选择为兽人，然后再一个个动画替换上去</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/cbf3634f05844a5f98fed856698b1a5a.png" alt="1.png" style="zoom:80%;" /><p>其中<code>Run</code>并没有自带动画，我们可以用<code>Walk</code>代替</p><h1 id="编写代码文件"><a href="#编写代码文件" class="headerlink" title="编写代码文件"></a>编写代码文件</h1><p>我们像兽人代码文件那样单独创一个代码文件给石头人用，并且也是要继承<code>EnemyController</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Golem</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（石头人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//石头人击飞玩家</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> targetState <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> <span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>            targetState<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>characterStates<span class="token punctuation">,</span>targetState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再添加动画事件就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少&lt;/p&gt;
&lt;h1 id=&quot;设置动画&quot;&gt;&lt;a href=&quot;#设置动画&quot; class=&quot;headerlink&quot; title=&quot;设置动画&quot;&gt;&lt;/a&gt;设置动画&lt;/h1&gt;&lt;p&gt;我们去浏览石头人的动画可以发现，&lt;code&gt;At</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记18-扩展方法</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B018-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B018-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-24T04:55:12.000Z</published>
    <updated>2021-07-24T06:02:15.450Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来熟悉一下扩展方法，所谓扩展方法就是在不继承一个类，但是可以额外编写一个类来扩展这个类的功能，比如这一章我们想让我们控制主角在兽人后面时兽人攻击不会造成伤害，这里就要用到<code>transfrom</code>类，但是<code>transfrom</code>里边没有这个方法，我们就要来扩展它</p><h1 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h1><p>要想我们的兽人敌人对身后玩家造成不了伤害，我们就可以来写一个方法，这个方法专门来判断玩家是否在兽人正前方扇形区域，如果在则返回<code>true</code>否则返回<code>false</code>，然后我们可以将这个方法加到计算伤害的<code>Hit()</code>函数里边进行一个判断，玩家在兽人视野范围内就造成伤害，反之不造成</p><p>这个扩展方法我们创建一个新的代码文件</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/1d4a90fb719d4281b68a709f01232cd2.png" alt="1.png" style="zoom:80%;" /><p>打开编写它</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionMethod</span><span class="token punctuation">&#123;</span>    <span class="token comment">//扩展方法类</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">float</span></span> dotThreshold <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment">//视野范围大小</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFacingTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Transform</span> transform <span class="token punctuation">,</span> <span class="token class-name">Transform</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//判断目标是否在视野范围内</span>        <span class="token class-name"><span class="token keyword">var</span></span> vectorToTarget <span class="token operator">=</span> target<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//获得敌人和玩家的相对位置</span>        vectorToTarget<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向量化</span>        <span class="token comment">//Dot:两个矢量的点积。 点积是一个浮点值，等于两个矢量的大小相乘，然后乘以它们之间的角度的余弦。</span>        <span class="token class-name"><span class="token keyword">float</span></span> dot <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>vectorToTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dot <span class="token operator">></span> dotThreshold<span class="token punctuation">;</span><span class="token comment">//如果玩家在敌人夹角120°(cos120 = 0.5)视野范围内则返回true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们使用<code>Vector3.Dot()</code>方法，官方API在<a href="http://docs.unity3d.com/ScriptReference/Vector3.Dot.html">这里</a>，同时也用了<code>transform.forward</code>来表示敌人面对的方向</p><p>同时还要注意到参数有个<code>this</code>，这样可以让方法加入到<code>Transform</code>类里面，变成它的一个方法</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f180df5587214500b2f7e3cb8e63072a.png" alt="2.png" style="zoom:80%;" /><p>最后我们回到<code>Hit()</code>函数中，把判断条件加上就完成了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于在敌人追主角的过程中主角可能会跑开，这时候如果攻击的话目标就丢失了</span>    <span class="token comment">//所以我们在攻击前判断目标是否为空，以防报错</span>    <span class="token comment">//同时还判断了玩家是否在敌人的视野范围内，在的话才造成伤害</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>characterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当我们的玩家走到敌人后边的时候就不会受到伤害</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来熟悉一下扩展方法，所谓扩展方法就是在不继承一个类，但是可以额外编写一个类来扩展这个类的功能，比如这一章我们想让我们控制主角在兽人后面时兽人攻击不会造成伤害，这里就要用到&lt;code&gt;transfrom&lt;/code&gt;类，但是&lt;code&gt;transfrom&lt;/code</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记17-设置兽人敌人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B017-%E8%AE%BE%E7%BD%AE%E5%85%BD%E4%BA%BA%E6%95%8C%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B017-%E8%AE%BE%E7%BD%AE%E5%85%BD%E4%BA%BA%E6%95%8C%E4%BA%BA/</id>
    <published>2021-07-23T02:01:51.000Z</published>
    <updated>2021-07-23T03:47:43.441Z</updated>
    
    <content type="html"><![CDATA[<p> 在这一章节中我们来设置一下兽人敌人，由于它的<code>Attack02</code>动画包含一个推人的效果，我们可以对它进行单独的测试，而不是继续沿用之前的<code>EnemyController</code>，但是我们可以在它基础上进行添加，所以可以选择继承类方式改写</p><h1 id="继承EnemyController并添加推开人物方法"><a href="#继承EnemyController并添加推开人物方法" class="headerlink" title="继承EnemyController并添加推开人物方法"></a>继承EnemyController并添加推开人物方法</h1><p>因为兽人是用继承的代码，我们要专门创建一个文件夹放特定敌人的<code>EnemyController</code>子类代码</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/2a7f1d824413463f8bbb1701fb464525.png" alt="1.png" style="zoom:80%;" /><p>同时也把这个代码挂载到兽人身上</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Grunt</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（兽人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果访问不了attackTarget要返回父类修改为protect属性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token operator">-</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>            direction<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//量化推开的方向</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">//velocity表示速度，这里给了主角一个反向速度，达到给推开的效果</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>                        attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//人物进入眩晕状态</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把动画事件添加上，<code>Attack02</code>用的事件是我们上面写的<code>kickOff()</code></p><p>同时这里有个眩晕状态，我们把眩晕动画如下添加好，同时眩晕动画速度我改为了2，让它播放快一点</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/e375df607aa64f32b0779527e3494c29.png" alt="2.png" style="zoom:80%;" /><h1 id="替换动画并且添加一个动画行为"><a href="#替换动画并且添加一个动画行为" class="headerlink" title="替换动画并且添加一个动画行为"></a>替换动画并且添加一个动画行为</h1><p>我们把史莱姆的动画复制一份给兽人，然后为了保持兽人在推开人物时人物进入眩晕状态并且不能移动，我们还要添加一个动画行为（<code>Behaviour</code>）</p><p>替换动画过程不再描述，但是注意这里<strong>不能</strong>采用动画控制器继承的方式</p><p>这里就说一下动画行为，找到人物的<code>Dizzy</code>动画，点击<code>Add Behaviour</code>，创建一个叫做<code>Stop Agent</code>的行为，实际上就是一个代码文件，创建好后我们把这个代码文件归类放好</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/3b6e539cae684b47ae1971d9d95485de.png" alt="3.png" style="zoom:80%;" /><img src="https://p9-tt.byteimg.com/origin/pgc-image/752bc9fca53d4a6a80c77a7381d9a0f0.png" alt="4.png" style="zoom:80%;" /><p>这个代码文件打开就已经有一些注释在那了，我们可以直接取消我们要用方法的注释，这里用到的就是进入动画、动画播放时以及动画结束时刻的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopAgent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">StateMachineBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// OnStateEnter is called when a transition starts and the state machine starts to evaluate this state</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateEnter</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateUpdate</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateExit is called when a transition ends and the state machine finishes evaluating this state</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateExit</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateMove is called right after Animator.OnAnimatorMove()</span>    <span class="token comment">//override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//    // Implement code that processes and affects root motion</span>    <span class="token comment">//&#125;</span>    <span class="token comment">// OnStateIK is called right after Animator.OnAnimatorIK()</span>    <span class="token comment">//override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//    // Implement code that sets up animation IK (inverse kinematics)</span>    <span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们可以把行为放进人物的眩晕、受伤等动画，甚至是敌人的攻击动画</p><p>注意的是添加到敌人攻击动画时可能会有一个报错，原因是我们可能把敌人打死了，导致行为无法获得agent，解决办法如下，我们去到<code>EnemyController.cs</code>修改敌人死了之后的状态</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>collider<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防止时候开业再次攻击</span><span class="token comment">//agent.enabled = false;//直接关闭导航组件</span>agent<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//把agent的范围缩小</span><span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁游戏对象，延迟为2秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们原本想关闭agent以达到agent没有体积效果，所以可以把agent.enabled = false;语句改为了直接把agent范围缩小到0，也是同样的效果</p><p>到这我们就初步设置好了兽人了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 在这一章节中我们来设置一下兽人敌人，由于它的&lt;code&gt;Attack02&lt;/code&gt;动画包含一个推人的效果，我们可以对它进行单独的测试，而不是继续沿用之前的&lt;code&gt;EnemyController&lt;/code&gt;，但是我们可以在它基础上进行添加，所以可以选择继承类方式改</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记16-制作更多的敌人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B016-%E5%88%B6%E4%BD%9C%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%8C%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B016-%E5%88%B6%E4%BD%9C%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%8C%E4%BA%BA/</id>
    <published>2021-07-22T01:53:09.000Z</published>
    <updated>2021-07-22T15:31:27.489Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章我们把我们的敌人数量制作地多一些，更加地去完善游戏</p><h1 id="制作多一个史莱姆"><a href="#制作多一个史莱姆" class="headerlink" title="制作多一个史莱姆"></a>制作多一个史莱姆</h1><p>制作多一个史莱姆很简单，只用对着之前的史莱姆<code>Ctrl + D</code>复制一下就可以</p><p>但是这之中也有存在问题，就是史莱姆会共用一个<code>Character Data</code>，这可以在每次开始游戏时创建一个临时<code>Data</code>给他们来解决</p><p>打开<code>Character States.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">CharacterData_SO</span> characterData<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CharacterData_SO</span> templateData<span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>templateData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//复制一个临时模板Data</span>        characterData <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>templateData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成多一个data</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后史莱姆身上的<code>Data</code>如下设置</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/e780aba5845e41caa4a1b38673b38708.png" alt="2.png" style="zoom:80%;" /><h1 id="放置一个刺刺龟"><a href="#放置一个刺刺龟" class="headerlink" title="放置一个刺刺龟"></a>放置一个刺刺龟</h1><p>我们的史莱姆素材文件夹下有另外一个敌人刺刺龟，我们也可以把它放置上来</p><p>由于它也是依赖<code>EnemyController.cs</code>的，所以我们在之前还要添加一行强制附带组件代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequireComponent</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CharacterStates</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以强制附带<code>CharacterStates</code>代码组件了</p><p>在素材中找到刺刺龟把它放置在地图上</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/c0a6ab51762547b5855e2d4d808bb14c.png" alt="3.png" style="zoom:80%;" /><p>然后为它添加<code>EnemyController.cs</code>，以及设置好基本信息</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/82f0fc3573f7434aa1a235f4fbe931c3.png" alt="4.png" style="zoom:80%;" /><p>还有一个关键的地方在于动画的切换，这里我们可以利用一个技巧，把史莱姆原来的<code>Animations</code>复制一个出来直接覆盖替换动画</p><p>我们在右键创建时选择<code>Animator Override Controller</code>就可以了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/61c8eb67c769464eb07f58ab37b2c59d.png" alt="5.png" style="zoom:80%;" /><p>然后属性面板中第一个选项就会问我们要依靠哪个<code>Animation</code>为模板，我们选择史莱姆原来的动画</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/60d1f5873d4b440ba04764b3bdfd5cda.png" alt="6.png" style="zoom:80%;" /><p>之后再将它们替换就可以了，别忘了<code>Attack01</code>和<code>Attack02</code>要单独复制出来以及添加帧事件</p><h1 id="兽人和石头人"><a href="#兽人和石头人" class="headerlink" title="兽人和石头人"></a>兽人和石头人</h1><p>还有需要添加的就是兽人和石头人，这里我们暂时添加好素材再把它们移到地图上就好了，之后的事情下一章节再处理</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/712fe6fd05d24f17a782e3bbd8937ab7.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/c884e6e35d714f3988fb0a5b4109a5cc.png" alt="8.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章我们把我们的敌人数量制作地多一些，更加地去完善游戏&lt;/p&gt;
&lt;h1 id=&quot;制作多一个史莱姆&quot;&gt;&lt;a href=&quot;#制作多一个史莱姆&quot; class=&quot;headerlink&quot; title=&quot;制作多一个史莱姆&quot;&gt;&lt;/a&gt;制作多一个史莱姆&lt;/h1&gt;&lt;p&gt;制作多一个史莱姆很</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记15-使用接口实现观察者模式的订阅和广播</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B015-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%B9%BF%E6%92%AD/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B015-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%B9%BF%E6%92%AD/</id>
    <published>2021-07-21T01:30:13.000Z</published>
    <updated>2021-07-22T04:22:22.553Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章我们使用接口来实现观察者模式的订阅和广播，同时也来实现玩家死了游戏结束之后敌人的获胜动画</p><h1 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h1><p>在<code>Tools</code>文件夹下我们新建一个代码文件<code>IEndGameObserver.cs</code>表示游戏结束之后的接口</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEndGameObserver</span><span class="token punctuation">&#123;</span>    <span class="token comment">//注意接口只写声明不写定义</span>    <span class="token comment">//游戏结束要操作的都在这个接口实现</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来到<code>EnemyController.cs</code>编写一个广播方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span><span class="token punctuation">,</span><span class="token class-name">IEndGameObserver</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获胜动画</span>        <span class="token comment">//停止所有移动</span>        <span class="token comment">//停止Agent</span>        isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        attackTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它要在游戏结束时要有操作的代码也可以像这种方式来继承接口并实现操作</p><h1 id="订阅接口"><a href="#订阅接口" class="headerlink" title="订阅接口"></a>订阅接口</h1><p>因为我们会有很多不同的代码文件都会继承这个接口，怎样来管理订阅也是值得考虑的事情</p><p>打开上一章创建的<code>GameManager.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>GameManager<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CharacterStates</span> playerStates<span class="token punctuation">;</span>    <span class="token comment">//游戏结束时调用的方法的数组</span>    List<span class="token operator">&lt;</span>IEndGameObserver<span class="token operator">></span>endGameObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IEndGameObserver<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddObserve</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//加入待操作数组</span>        endGameObservers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>gameObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RemoveObserve</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将特定的观察者在待操作数组中删除</span>        endGameObservers<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>gameObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyObserves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//调用待操作数组中每一个观察者</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver <span class="token keyword">in</span> endGameObservers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            gameObserver<span class="token punctuation">.</span><span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们是要在主角死了之后开始游戏结束的操作，所以回到<code>PlayerController.cs</code>在判断主角死了之后调用广播</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断死亡</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">NotifyObserves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们在<code>EnemyController.cs</code>中还要补充一个加入待操作数组方法和移除方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//void OnEnable()&#123;//Unity的一个启动游戏时自动调用的函数</span><span class="token comment">//  GameManager.Instance.AddObserve(this);</span><span class="token comment">// &#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//开始游戏时先检测是否勾选了守卫状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isGuard<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>        <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//FIXME:场景切换做好后修改掉</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddObserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>GameManager<span class="token punctuation">.</span>IsInitialized<span class="token punctuation">)</span>         <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果GameManager没有给构建的话就直接return</span>        GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RemoveObserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>OnEnable()</code>是在游戏开始时早期就调用的，这时候我们这样写会发生报错，我们要等到后面写场景加载时才用这种方法，这里暂时把加入待操作数组代码单独写到<code>Start()</code>里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/5e902802764e44b099915b6323377dfb.png" alt="1.png" style="zoom:80%;" /><h1 id="配置敌人胜利动画"><a href="#配置敌人胜利动画" class="headerlink" title="配置敌人胜利动画"></a>配置敌人胜利动画</h1><p>我们打开动画管理器，配置敌人在打死主角后的动画</p><p>新建一个<code>Victory Layer</code>（注意权重值为1），以及一个<code>Win</code>布尔值控制动画触发</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/85512e9ac113448c808c81d1b29dc079.png" alt="1.png" style="zoom:80%;" /><p>返回<code>EnemyController.cs</code>代码我们要配置动画变量什么时候触发</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//血量变0则死亡状态为真</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//加了个else是防止死后敌人在胜利动画下一帧又给切换回普通动画</span>        <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastAttackTime<span class="token operator">-=</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span><span class="token comment">//每一帧都减冷却</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获胜动画</span>    <span class="token comment">//停止所有移动</span>    <span class="token comment">//停止Agent</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Win"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    attackTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们发现主角死了之后还是可以控制移动，这里我们在<code>PlyaerController.cs</code>修复一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveToTarget</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果死了就不能移动</span><span class="token function">StopAllCoroutines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止其它移动命令</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果死了就不能移动</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token comment">//判断是否暴击</span>charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章我们使用接口来实现观察者模式的订阅和广播，同时也来实现玩家死了游戏结束之后敌人的获胜动画&lt;/p&gt;
&lt;h1 id=&quot;编写接口&quot;&gt;&lt;a href=&quot;#编写接口&quot; class=&quot;headerlink&quot; title=&quot;编写接口&quot;&gt;&lt;/a&gt;编写接口&lt;/h1&gt;&lt;p&gt;在&lt;code</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记14-泛型单例模式</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B014-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B014-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-20T01:52:36.000Z</published>
    <updated>2021-07-21T01:34:24.792Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来编写一个泛型单例模式的代码，这是因为我们的项目中会有很多的<code>Manager</code>，如果每个都使用单例模式会更好地去管理和使用</p><p>例如其中控制我们游戏的开始暂停等一般是用<code>Game Manager</code>来命名，我们来创建一个代码文件以及一个空对象使得代码可以依附在它上面</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/d8bf83d3ad554952a66a0b00aafc1b96.png" alt="1.png" style="zoom:80%;" /><p>这个代码我们先放在一边之后再补充，先把泛型单例模式代码写了先</p><h1 id="泛型单例模式"><a href="#泛型单例模式" class="headerlink" title="泛型单例模式"></a>泛型单例模式</h1><p>创建目录文件如下</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/86a804f3de9a4c9b960af8c63dd89626.png" alt="2.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> Instance<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//允许子类对Awake进行重写</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            instance <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//检测单例是否生成</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsInitialized<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//允许子类修改销毁时的操作</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一旦一个A类继承了<code>Sigltion&lt;A&gt;</code>之后，我们就可以在其它类中调用A类的单例，如：<code>A.Instance</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来编写一个泛型单例模式的代码，这是因为我们的项目中会有很多的&lt;code&gt;Manager&lt;/code&gt;，如果每个都使用单例模式会更好地去管理和使用&lt;/p&gt;
&lt;p&gt;例如其中控制我们游戏的开始暂停等一般是用&lt;code&gt;Game Manager&lt;/code&gt;来命名，我们来</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记13-敌人的守卫状态和死亡状态</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B013-%E6%95%8C%E4%BA%BA%E7%9A%84%E5%AE%88%E5%8D%AB%E7%8A%B6%E6%80%81%E5%92%8C%E6%AD%BB%E4%BA%A1%E7%8A%B6%E6%80%81/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B013-%E6%95%8C%E4%BA%BA%E7%9A%84%E5%AE%88%E5%8D%AB%E7%8A%B6%E6%80%81%E5%92%8C%E6%AD%BB%E4%BA%A1%E7%8A%B6%E6%80%81/</id>
    <published>2021-07-19T01:43:57.000Z</published>
    <updated>2021-07-19T04:08:52.903Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章节我们来制作敌人的守卫状态和死亡状态</p><h1 id="敌人的守卫状态（Guard）"><a href="#敌人的守卫状态（Guard）" class="headerlink" title="敌人的守卫状态（Guard）"></a>敌人的守卫状态（Guard）</h1><p>打开<code>EnemyController.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Quaternion</span> guardRotation<span class="token punctuation">;</span><span class="token comment">//记录敌人最初的旋转角度，用于脱离追击回去守卫点砖头转头</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    guardRotation <span class="token operator">=</span> transform<span class="token punctuation">.</span>rotation<span class="token punctuation">;</span><span class="token comment">//获得最初旋转角度</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>守卫状态            isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//脱离追击状态</span>            <span class="token comment">//如果在追击主角时回到守卫状态，就要跑回守卫点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position <span class="token operator">!=</span> guardPos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//播放走路动画</span>                agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment">//导航回最初守卫点</span>                agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> guardPos<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">SqrMagnitude</span><span class="token punctuation">(</span>guardPos <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">&lt;=</span>agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//SqrMagnitude也是可以用于比较距离的方法，比起Distance稍微快一些</span>                    <span class="token comment">//这里是判断是否到达最初守卫点可以停止范围</span>                    isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token comment">//慢慢转头。第三个参数越接近1转得越快</span>                    transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Lerp</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span>guardRotation<span class="token punctuation">,</span><span class="token number">0.01f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们就写好了守卫状态的代码，其中<code>SqrMagnitude()</code>作用和<code>Distance()</code>一样都是比较两个点的距离，然后我们还加了慢慢转头的效果，否则敌人回到守卫点是不会转头的</p><h1 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h1><p>我们希望当敌人血量为0时播放死亡动画并且尸体消失掉</p><h2 id="设置死亡动画"><a href="#设置死亡动画" class="headerlink" title="设置死亡动画"></a>设置死亡动画</h2><p>打开动画控制器，我们新建一个<code>Death Layer</code>，不要忘了权重设为1</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/32be87ac0205413280a7f42a61d7296e.png" alt="1.png" style="zoom:80%;" /><p>这里有个<code>GetHit</code>是用来做暴击伤害受伤效果的，它有左边的<code>Hit</code>触发，而我们的死亡动画<code>Die</code>连着<code>Any State</code>表示任何状态都能转移过来，由布尔值<code>Death</code>控制</p><p><strong>特别要注意的地方：</strong>关于死亡动画的设置<code>Can Transition To</code>一定不能勾选，不然会发生鬼畜</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/497e554f53c24b17be551acb0694058c.png" alt="2.png" style="zoom:80%;" /><p>接下来主角的动画也是如此设置</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/66e702dd2c644d058b5e628fbcf052c6.png" alt="3.png" style="zoom:80%;" /><h2 id="编写动画状态转移代码"><a href="#编写动画状态转移代码" class="headerlink" title="编写动画状态转移代码"></a>编写动画状态转移代码</h2><p>回到我们的<code>EnemyController.cs</code>中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Collider</span> collider<span class="token punctuation">;</span><span class="token comment">//碰撞体组件</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isDead<span class="token punctuation">;</span><span class="token comment">//死亡状态控制</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    collider <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Collider<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//血量变0则死亡状态为真</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Death"</span><span class="token punctuation">,</span>isDead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否播放死亡动画</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//第一个判断是否为死亡</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果发现player 切换到CHASE</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">;</span>        <span class="token comment">//Debug.LogFormat("敌人&#123;0&#125;发现了玩家",this.name);//测试代码</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>    collider<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防止时候开业再次攻击</span>    agent<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//直接关闭导航组件</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁游戏对象，延迟为2秒</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们设置了<code>Death</code>的动画状态，注意开头<code>if(isDead)</code>的下一个是<code>else if</code>，而<code>Hit</code>的状态可以去到<code>CharcterStates.cs</code>中设置</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharcterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharcterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//TODO:血量条UI</span>    <span class="token comment">//TODO:打死怪后加经验</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在中间我们打了一行代码，用来获取被打者的Animator并设置动画<code>Hit</code>状态，这样就可以集中管理暴击受伤动画了</p><p>最后对于主角我们也用相同的办法来写这些代码就大功告成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章节我们来制作敌人的守卫状态和死亡状态&lt;/p&gt;
&lt;h1 id=&quot;敌人的守卫状态（Guard）&quot;&gt;&lt;a href=&quot;#敌人的守卫状态（Guard）&quot; class=&quot;headerlink&quot; title=&quot;敌人的守卫状态（Guard）&quot;&gt;&lt;/a&gt;敌人的守卫状态（Guard）</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记12-实现攻击数值计算</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B012-%E5%AE%9E%E7%8E%B0%E6%94%BB%E5%87%BB%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B012-%E5%AE%9E%E7%8E%B0%E6%94%BB%E5%87%BB%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/</id>
    <published>2021-07-18T01:29:45.000Z</published>
    <updated>2021-07-26T01:10:45.401Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章节中我们来实现攻击伤害的计算，给予人物或敌人真实的攻击伤害</p><h1 id="补充人物攻击动画"><a href="#补充人物攻击动画" class="headerlink" title="补充人物攻击动画"></a>补充人物攻击动画</h1><p>在之前我们要给人物添加一下暴击动画，和上一章节设置敌人动画类似，注意要设置动画切换效果</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/db2c7f3914614d4ea5ec93211e2b47a7.png" alt="1.png" style="zoom:80%;" /><p>打开<code>PlayerController.cs</code>，修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span>          charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//攻击动画和CD都在下面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lastAttactTime<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//CD冷却完成可执行攻击</span>        animator<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Critical"</span><span class="token punctuation">,</span>charcterStates<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加了传递是否暴击</span>        animator<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//普通攻击</span>        lastAttactTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span><span class="token comment">//修改了这里的CD时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们修改了两个地方，一个是增加了暴击判断，另一个是修改了CD时间判断</p><h1 id="增加攻击数值计算"><a href="#增加攻击数值计算" class="headerlink" title="增加攻击数值计算"></a>增加攻击数值计算</h1><p>前面补充完成后，我们就可以正式来写攻击伤害的数值计算了</p><p>打开<code>CharcterStates.cs</code>，我们在最下面加上我们的伤害计算代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>        attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment">//随机暴击率语句</span>        charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//伤害计算区</span><span class="token preprocessor property">#<span class="token directive keyword">region</span> Charcter Combat</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharcterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharcterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>            defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将来要做的事情</span>    <span class="token comment">//TODO:血量条UI</span>    <span class="token comment">//TODO:打死怪后加经验</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在攻击力范围内取随机数返回一个随机攻击力</span>    <span class="token class-name"><span class="token keyword">float</span></span> coreDamage <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>attackData<span class="token punctuation">.</span>minDamage<span class="token punctuation">,</span>attackData<span class="token punctuation">.</span>maxDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果暴击的话还要计算上暴击率</span>        coreDamage <span class="token operator">*=</span>attackData<span class="token punctuation">.</span>criticalMultiplier<span class="token punctuation">;</span><span class="token comment">//乘等于</span>        Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"暴击了！伤害为（不算目标防御力）：&#123;0&#125;"</span><span class="token punctuation">,</span>coreDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>coreDamage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用伤害计算方法"><a href="#调用伤害计算方法" class="headerlink" title="调用伤害计算方法"></a>调用伤害计算方法</h1><p>伤害计算代码写好后，我们就要去想如何调用它，在哪里调用它了</p><p>参考一些RPG游戏，一般都是当你的武器挥出去后接触到敌人那一瞬间计算伤害，我们也可以按照这样来做</p><h2 id="在人物身上调用"><a href="#在人物身上调用" class="headerlink" title="在人物身上调用"></a>在人物身上调用</h2><p>首先要调出<code>Animation</code>窗口</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/42623310028b4fbcafc6c49ce9fbc6a6.png" alt="2.png" style="zoom:80%;" /><p>然后窗口左上角选择上我们的攻击动画<code>Attack01</code>，我们就可以在攻击动画里面的某个特定帧添加事件了</p><p>我们再次编辑一下<code>PlayerController.cs</code>代码加一个用来调用的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//Animation Event</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//计算伤害</span>    targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到<code>Animation</code>窗口，将它添加为事件</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/3ebdba5a85864a339407b9a8d21a740f.png" alt="4.png" style="zoom:80%;" /><p><strong>注意：同样的暴击动画也要加上</strong></p><h2 id="在敌人身上调用"><a href="#在敌人身上调用" class="headerlink" title="在敌人身上调用"></a>在敌人身上调用</h2><p>然后在敌人身上我们也要进行同样的操作，打开<code>EnemyController.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//EnemyController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于在敌人追主角的过程中主角可能会跑开，这时候如果攻击的话目标就丢失了</span>    <span class="token comment">//所以我们在攻击前判断目标是否为空，以防报错</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在为<code>Animation</code>添加动画时我们发现当前史莱姆的动画是<code>只读</code>属性的，对于这种情况我们可以把动画单独复制到其它地方，再将复制出来的动画替换原来的，就可以进行事件添加了</p><p>如图对着动画文件按<code>Ctrl+D</code>可以快速复制</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/3831ed71b8dc46cc8d7ce464438e15b3.png" alt="5.png" style="zoom:80%;" /><p>然后我们将复制出来的动画（这里有两个）分类放好</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/cded851a377744a2a2c53f78e2573698.png" alt="6.png" style="zoom:80%;" /><p>然后进行动画替换</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/99667e3e7b754c4f8b286410045bac15.png" alt="7.png" style="zoom:80%;" /><p>最后再进行动画帧事件添加操作就行了</p><p>到这我们就把伤害计算代码和效果都写出来了，下一章节中我们还会去补充如果敌人或人物血量到0了时候的状态</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章节中我们来实现攻击伤害的计算，给予人物或敌人真实的攻击伤害&lt;/p&gt;
&lt;h1 id=&quot;补充人物攻击动画&quot;&gt;&lt;a href=&quot;#补充人物攻击动画&quot; class=&quot;headerlink&quot; title=&quot;补充人物攻击动画&quot;&gt;&lt;/a&gt;补充人物攻击动画&lt;/h1&gt;&lt;p&gt;在之前我们</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记第一期</title>
    <link href="http://sakura-pub.ltd/LeetCode/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>http://sakura-pub.ltd/LeetCode/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%9C%9F/</id>
    <published>2021-07-17T15:54:05.000Z</published>
    <updated>2021-08-01T15:36:41.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode刷题笔记第一期"><a href="#LeetCode刷题笔记第一期" class="headerlink" title="LeetCode刷题笔记第一期"></a>LeetCode刷题笔记第一期</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直想在刷题的时候把想要记下的笔记记下来，但是没有找到很好的地方，但是现在有了博客之后就可以写在这的</p><p>写这个刷题笔记一个是想时不时回来巩固一下算法，另一个是想记录下自己的算法能力成长的过程，同时也是想为实习做准备</p><p>写这个笔记是大二暑假时期，之前也有一些算法基础，参加过的算法相关竞赛只有一次蓝桥杯，只拿到省赛二等奖，也希望能够通过刷题和做笔记能够有所长进</p><p>本人算法能力不是很强，一般都要想好一阵子，所以一般写出来的答案不是很好，望大佬们轻喷</p><p>✨注：我写算法的语言主打C++</p><p>那么，就开始吧！</p><hr><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452.用最少数量的箭引爆气球"></a>452.<a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/">用最少数量的箭引爆气球</a></h2><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p><p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>xstart</code>，<code>xend</code>， 且满足  <code>xstart</code> ≤ x ≤ <code>xend</code>，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><p>给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。</p><p>示例：</p><blockquote><p>输入：points = [[10,16],[2,8],[1,6],[7,12]]<br>输出：2<br>解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</p></blockquote><p>这一题拿到题目时看了好几次都看不懂题目，看了一下别人画的图才明白题的意思，和另外题 <code>435. 无重叠区间</code>有点相似</p><p>我们可以在每一次射击箭的时候尽量往用少一点的方向去想，当气球重叠时便一起射，这是局部最优，然后每次局部最优所造成的就是全局最优，射完全部气球所用的弓箭是最少，这便可以用贪心算法来求解</p><p>借用官方解答所给的图来解释</p><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f83bd4a2e87746078b4cac68d1f4d1d5.png"></p><p>当把弓箭挪到右区间最小的时候（如第三个图的蓝色）就可以一箭四雕，因为题目所给的条件<code>xstart</code> ≤ x ≤ <code>xend</code>时气球就会给射爆，这里包含了边界值条件，所以在闭区间位置也满足</p><p>因此我就有了基本思路，先把这些气球排列，然后从第二个气球遍历，每次与前一个气球作比较，如果两个气球区间相交，那就可以略过当前气球进入下一次比较（做个标记，代表可以在这一个弓箭射完），具体如何略过看代码；如果气球不相交了，那就证明要用多一发弓箭了，此时弓箭数要加一，然后继续往下比较</p><p>下面是自己参考别人解答后写出来的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">VecSort</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>size<span class="token punctuation">)</span><span class="token comment">//数组为空</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>points<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>VecSort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按气球起点进行从小到大排序</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//返回结果，不为空至少需要一只箭</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//从前往后遍历气球</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//当前气球与前一个气球不重叠</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//重叠则跳过当前气球</span>                <span class="token comment">//（利用闭区间最右位置可以射到的规则让其长度变短，以达到可跳过的当前气球目的）</span>                points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做出来之后时间复杂度为<em>O(nlogn)<em>因为用了个快排，空间复杂度为</em>O(1)</em></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/3af7d43845b04870bda4754ca1805c0e.jpg" alt="452.jpg" style="zoom:80%;" /><hr><h2 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/">763. 划分字母区间</a></h2><p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p><p>示例：</p><blockquote><p>输入：S = “ababcbacadefegdehijhklij”<br>输出：[9,7,8]<br>解释：<br>划分结果为 “ababcbaca”, “defegde”, “hijhklij”。<br>每个字母最多出现在一个片段中。<br>像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</p></blockquote><p>这种题型第一次见，不怎么会，因为尽可能地要划分多个区域，从而达到某个或多个字母只出现在这片区域中，那么就可以先记录下每个字母最后出现的位置</p><p>然后再次遍历字符串，不断更新标识符<code>end</code>，该标识符指向的是当前遍历过的字母中，最持久的字符最后出现的位置，也相当于是这片区域最后的位置，所以我们只用找出这个标识符最终的位置就能够划分一个区域出来了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> str_size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>str_size<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str_size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>res<span class="token punctuation">;</span>        <span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个字母最后出现的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录分割数据的开头和结尾位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            end <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//贪心策略地方，尽可能找到字母最后出现的位置从而划分区域</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果找到之前遍历过的所有字母的最远边界，说明这个边界就是分割点了</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度<em>O(n)<em>，空间复杂度</em>O(1)</em></p><img src="https://p5-tt.byteimg.com/origin/pgc-image/c6d28e63caa845aba5e8479b6f016d58.jpg" alt="763.jpg" style="zoom:80%;" /><hr><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="88-合并两个有序数组—（简单）"><a href="#88-合并两个有序数组—（简单）" class="headerlink" title="88. 合并两个有序数组—（简单）"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a>—（简单）</h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p><p>示例1：</p><blockquote><p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3<br>输出：[1,2,2,3,5,6]</p></blockquote><p>示例2：</p><blockquote><p>输入：nums1 = [1], m = 1, nums2 = [], n = 0<br>输出：[1]</p></blockquote><p>这道题是多指针中的一种题型，但是它需要的是逆向指针，知道原理后比较简单</p><p>因为这两个数组已经排好序，我们可以把两个指针分别放在两个数组的末尾，即 nums1 的m - 1 位和 nums2 的 n - 1 位每次将较大的那个数字复制到 nums1 的后边，然后向前移动一位。因为我们也要定位 nums1 的末尾，所以我们还需要第三个指针，以便复制。<br>在以下的代码里，我们直接利用 m 和 n 当作两个数组的指针，再额外创立一个 pos 指针，起始位置为 m + n - 1。每次向前移动 m 或 n 的时候，也要向前移动 pos。这里需要注意，如果 nums1的数字已经复制完，不要忘记把 nums2 的数字继续复制；如果 nums2 的数字已经复制完，剩余nums1 的数字不需要改变，因为它们已经被排好序。  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>size2<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">//需要三个指针，分别是m-1,n-1和m+n-1，前两个可以用m n 代替</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums1<span class="token punctuation">[</span>pos<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">?</span>nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">:</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums1<span class="token punctuation">[</span>pos<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度<em>O(m+n)<em>，因为指针最多遍历m+n个数，空间复杂度</em>O(1)</em></p><hr><h2 id="142-环形链表-II—（中等）"><a href="#142-环形链表-II—（中等）" class="headerlink" title="142. 环形链表 II—（中等）"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a>—（中等）</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><p><em>进阶：</em></p><p><em>你是否可以使用 O(1) 空间解决此题？</em></p><blockquote><p>示例：</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/aeba8d5b296441c6a8d25a7bc3e7eb31.png" alt="1" style="zoom:80%;" /><p>输入：head = [3,2,0,-4], pos = 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p>本题第一次做稍微有难度，涉及到一些数学知识</p><p>所使用的是快慢指针，两个指针都是从头结点开始，快指针每次走两格，慢指针每次走一格，如果他们可以相遇，就代表链表是有环的，因为快指针每次走的比慢指针多<code>1</code>格，只要是有环路肯定能相遇</p><p>其次，在第一次相遇后，我们将快指针重置为头结点位置，之后快慢指针<code>同时走</code>，每次都是走<code>1</code>步，直到两指针再一次相遇就是我们要找的环入口了，具体是为什么呢？我们看下面的图</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/c1f26d9f0524448ebd0245449d12eb45.png" alt="code" style="zoom:80%;" /><p>我们设<code>x</code>是头结点到环形入口节点的节点数，<code>y</code>是从入口节点到两个指针第一次相遇的节点的节点数，当第一次两指针在同一个节点相遇时，慢指针走了<code>x+y</code>，快指针走了<code>x+y+n(z+y)</code>其中<code>n(z+y)</code>是在环内多走了<code>n</code>圈</p><p>又因为快指针走的节点数是慢指针的两倍则有方程：<code>2(x+y)=x+y+n(z+y)</code>，化简的出<code>x=n(y+z)-y</code>，从n(y+z)提出一个y+z得出公式：<code>x=(n-1)(y+z)+z</code>，这个时候我们假设<code>n=1</code>，即快指针只用在环内多走一圈就，就可以得出<code>x=z</code></p><p>这样就得出了最终的结论：当两个指针在第一次相遇后，此时相遇节点到环形入口节点长度<code>等于</code>头结点到环形入口长度，那么问题就很容易了，我们随便将一个指针<code>重置</code>回头结点，再让两个指针同时出发，并且每一步只走<code>一格</code>长度，当再次相遇时，位置就是环形入口节点了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">||</span>head<span class="token operator">-></span>next<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//快指针</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//慢指针</span>        <span class="token comment">//第一次相遇，判断是否有环路</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fast<span class="token operator">||</span><span class="token operator">!</span>fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            fast<span class="token operator">=</span>fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow<span class="token operator">=</span>slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重置快指针</span>        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//第二次相遇则是入口</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为：<em>O(n)<em>，空间复杂度为</em>O(1)</em></p><hr><h2 id="76-最小覆盖子串—（困难）"><a href="#76-最小覆盖子串—（困难）" class="headerlink" title="76. 最小覆盖子串—（困难）"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. 最小覆盖子串</a>—（困难）</h2><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p><p>注意：</p><p>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p><p>示例 1：</p><blockquote><p>输入：s = “ADOBECODEBANC”, t = “ABC”<br>输出：”BANC”</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “a”, t = “a”<br>输出：”a”</p></blockquote><p>示例 3:</p><blockquote><p>输入: s = “a”, t = “aa”<br>输出: “”<br>解释: t 中两个字符 ‘a’ 均应包含在 s 的子串中，<br>因此没有符合条件的子字符串，返回空字符串。</p></blockquote><p>这个题目中要注意的是字符串t是可以包含<em>重复</em>字母的</p><p>所运用的是滑动窗口，由于之前没有做过滑动窗口的题，所以先看了解释才开始做的，更多细节在<a href="https://leetcode-cn.com/problems/minimum-window-substring/solution/zui-xiao-fu-gai-zi-chuan-by-leetcode-solution/">官方解析</a>和视频，滑动窗口图示如下：</p><img src="https://cube-resources.lenovo.com.cn/cube/86cf648e03a1a5daceab2cfbdb802819.gif" alt="滑动窗口" style="zoom:80%;" /><p>首先是运用两个数组，一个是记录滑动窗口中遍历到的t字符串含有的字母个数，而另一个则是记录t字符串每个字母的个数。然后还有个比较重要的就是<code>distance</code>，这个变量是用来记录当前滑动窗口区域中拥有对照字符串t中所需要的字符个数</p><p>整个滑动窗口流程大致是：</p><p>当右指针前进时遍历到一个所需字符则<code>distance+1</code>，直到<code>distance == t.size()</code>时停止前进，<strong>注意当一个字符出现超过所需数但是distance还没达标时，distance不增加</strong>，如下面代码中的<code>winFre[s[right]]&gt;=tFre[s[right]]</code>时distance不会再继续加1。</p><p>之后轮到左指针前进，它会跳过一些多余的字符以尽可能地缩小区域，它也要剔除重复的字符数，当<code>winFre[s[right]]&gt;tFre[s[right]]</code>时distance不会相减，因此<code>distance</code>的作用可以看做是两边字母的边界值。在左指针遇到不能再继续前进时会比较当前最小的覆盖子串区间是否要更新，最后下一次循环中又要恢复为右区间前进，直到右区间到达t字符串的长度才会退出循环。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">minWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sLen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tLen <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sLen<span class="token operator">&lt;</span>tLen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//特殊情况</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//左指针</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//右指针</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">winFre</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录滑动窗口中所包含对照字符串每个字母的个数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">tFre</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录对照字符串中所含有的每个字母的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">:</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//遍历对照字符串t</span>            tFre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录返回字符串的开始下标位置</span>        <span class="token keyword">int</span> minLen <span class="token operator">=</span> sLen<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//记录当前遍历得到的最小覆盖子串长度</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录滑动窗口中所包含的字母个数和对照字符串所需要的字母个数差距（相同时不加）</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>sLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环结束条件是右指针到达最后一个字符</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//首先是右指针往右走，遇到不是所需要找的字符跳过</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                distance<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//滑动窗口遇到不够字母总数时distance加一</span>            winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>distance <span class="token operator">==</span> tLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//滑动窗口左指针前进</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    distance<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//遇到刚好满足字符数条件时减去distance，以使恢复下一次循环是右指针前进</span>                <span class="token keyword">int</span> tempWinLen <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span><span class="token comment">//当前滑动窗口的字符长度</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>minLen<span class="token operator">></span>tempWinLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//如果当前记录在内的最小区间没有新的小则替换它</span>                    minLen <span class="token operator">=</span> tempWinLen<span class="token punctuation">;</span>                    begin <span class="token operator">=</span> left<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                                winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//cout&lt;&lt;begin&lt;&lt;" "&lt;&lt;minLen;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minLen <span class="token operator">==</span> sLen <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>minLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(n)，空间复杂度O(k)，k为两个传进来的字符串长度之和</p><hr><h2 id="524-通过删除字母匹配到字典里最长单词—（中等）"><a href="#524-通过删除字母匹配到字典里最长单词—（中等）" class="headerlink" title="524. 通过删除字母匹配到字典里最长单词—（中等）"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/">524. 通过删除字母匹配到字典里最长单词</a>—（中等）</h2><p>给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。</p><p>如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。</p><p>示例 1：</p><blockquote><p>输入：s = “abpcplea”, dictionary = [“ale”,”apple”,”monkey”,”plea”]<br>输出：”apple”</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “abpcplea”, dictionary = [“a”,”b”,”c”]<br>输出：”a”</p></blockquote><p>注意这里的<code>字典序</code>概念：基于字母顺<em>序</em>排列的单词按字母顺<em>序</em>排列的方法，例：abc &lt; bbc，可以用C++中<code>string</code>类自带的成员函数（非static）<code>a.compare(string&amp; b)</code>来比较</p><p>这道题刚开始想就是普通地把字典中的字符串每个遍历，并作比较是否为s字符串的子串，比较之后再比较字典序。以为这个方法效率不行，想不到官方解答给出最有效率的就是这个了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">findLongestWord</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sLen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dSize <span class="token operator">=</span> dictionary<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string maxStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//记录最后要返回的长度最长且字典序最小的字符串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str <span class="token operator">:</span> dictionary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsSubStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>maxStr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    maxStr <span class="token operator">=</span> str<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">IsSubStr</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//检测b是不是a的子串</span>        <span class="token keyword">int</span> subSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bLen <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> b<span class="token punctuation">[</span>subSize<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">++</span>subSize<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>subSize <span class="token operator">==</span> bLen<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为<em>O(n·x)<em>其中n是字典数组长度，x是数组中字符串平均长度，</em>O(x)</em></p><hr><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="154-寻找旋转排序数组中的最小值-II—（困难）"><a href="#154-寻找旋转排序数组中的最小值-II—（困难）" class="headerlink" title="154. 寻找旋转排序数组中的最小值 II—（困难）"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找旋转排序数组中的最小值 II</a>—（困难）</h2><p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：<br>若旋转 4 次，则可以得到 [4,5,6,7,0,1,4]<br>若旋转 7 次，则可以得到 [0,1,4,4,5,6,7]<br>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p>给你一个可能存在 重复 元素值的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [1,3,5]<br>输出：1</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [2,2,2,0,1]<br>输出：0</p></blockquote><p>这道题感觉LeetCode难度分的挺迷的，说是困难其实也没什么难度，也是使用<code>left,mid,right</code>三个指针，只要只要考虑几点就行了</p><p>这里有三种情况，分别是：</p><p>1、<code>nums[mid]</code>小于<code>nums[right]</code>，证明我们要找的最小值在前半段或者是<code>nums[mid]</code>本身，因此我们把<code>right = mid</code></p><p>2、<code>nums[mid]</code>大于<code>nums[right]</code>，证明最小值通过数组旋转给调到有半段去了，而且此时的<code>nums[mid]</code>肯定不是我们要找的数，所以我们将<code>left = mid + 1</code></p><p>3、排除上面两种情况之后，就要考虑数组中有重复的数字，而且可能就是当前指针指着的，我们只需要将右指针往前走就行了<code>--right</code>，至于为什么不是左指针往后走，是因为：</p><ul><li>此操作不会使数组越界：因为迭代条件保证了 right &gt; left &gt;= 0；</li><li>此操作不会使最小值丢失：假设<code>nums[right]</code>是最小值，有两种情况：</li><li>1）若 <code>nums[right]</code> 是唯一最小值：那就不可能满足判断条件 <code>nums[mid] == nums[right]</code>，因为 <code>mid &lt; right</code>（left != right  且 mid = (left + right) / 2 向下取整）；</li><li>2）若 nums[right] 不是唯一最小值，由于<code> mid &lt; right</code> 而 <code>nums[mid] == nums[right]</code>，即还有最小值存在于 <code>[left, right - 1]</code>区间，因此不会丢失最小值。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token punctuation">:</span>    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> right <span class="token operator">=</span> nLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//前半部分是增序序列</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//后半部分为降序序列</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度 O(logN)，最坏情况也只到 O(N)，比如给定的数组每个数字都是一样的 {1,1,1,1,1}</p><hr><h2 id="540-有序数组中的单一元素—（中等）"><a href="#540-有序数组中的单一元素—（中等）" class="headerlink" title="540. 有序数组中的单一元素—（中等）"></a><a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/">540. 有序数组中的单一元素</a>—（中等）</h2><p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p><p>示例 1:</p><blockquote><p>输入: nums = [1,1,2,3,3,4,4,8,8]<br>输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums =  [3,3,7,7,10,11,11]<br>输出: 10</p></blockquote><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><p>这道题可以观察题意发现，在出现独立数之前，数组的下标都是有规律的，偶数（包含0）对应一对重复数的第一个，奇数对应第二个。一旦独立数出现之后，情况就反过来了</p><p>总体上看的话，整个数组肯定是奇数个的，因为其余重复数是偶数个再加上一个独立数就是奇数个</p><p>因此可以看下面的例子，当我们把一个数组的中中间的一对元素移除之后，剩下左边的数组全是重复的元素，个数为偶数；而右边含有一个独立数元素，个数为奇数。</p><p><img src="https://i.loli.net/2021/07/31/njUaBzt62Sv5OIf.png" alt="1.png"></p><p>此时我们就可以通过判断左右子数组含有元素的个数是奇还是偶来进行下一步往哪边判断</p><p>下面有几种情况我们可以来分析一下，假设左指针是<code>lo</code>，右指针是<code>hi</code></p><p>情况1：</p><p>中间元素的同一元素在右边，且被 mid 分成两半的数组为偶数。</p><p>我们将右子数组的第一个元素移除后，则右子数组元素个数变成奇数，我们应将 <code>lo</code> 设置为 <code>mid + 2</code></p><p><img src="https://i.loli.net/2021/07/31/bnv7lY6X3uTIWw9.png" alt="2.jpg"></p><p>情况2：</p><p>中间元素的同一元素在右边，且被 <code>mid</code> 分成两半的数组为奇数。</p><p>我们将右子数组的第一个元素移除后，则右子数组的元素个数变为偶数，我们应将 <code>hi</code> 设置为 <code>mid - 1</code></p><p><img src="https://i.loli.net/2021/07/31/mfnQIPMUGhT5sED.png" alt="3.png"></p><p>例子 3：中间元素的同一元素在左边，且被 mid 分成两半的数组为偶数。</p><p>我们将左子数组的最后一个元素移除后，则左子数组的元素个数变为奇数，我们应将 hi 设置为 mid - 2。</p><p><img src="https://i.loli.net/2021/07/31/25rqAzunOkFvGPU.png" alt="4.png"></p><p>例子 4：中间元素的同一元素在左边，且被 mid 分成两半的数组为奇数。</p><p>我们将左子数组的最后一个元素移除后，则左子数组的元素个数变为偶数，我们应将 lo 设置为 mid + 1。</p><p><img src="https://i.loli.net/2021/07/31/xSkLFir6aE1oIPc.png" alt="5.png"></p><p>还有最后一种情况，就是刚好我们的中间指针指向的数和前面后面的数都不相等，就代表这个数就是我们要找的独立数了，这个时候就可以直接return</p><p>明白原理之后就可以写代码了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//O(log n)时间复杂度方法</span>        <span class="token keyword">int</span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nLen <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//只有一个数直接返回</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//中间指针的数与前一个数相等</span>                mid<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//中间指针后退以便计算左边子数组的个数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//左边是偶数的话唯一数在右边</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token comment">//否则唯一数在左边</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//中间指针和后面一个数相等的话</span>                mid<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//中间指针前进一格，以便计算右边子数组的个数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> mid<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//中间数与前后的数都不相等，代表我们找到了要的那个数</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法时间复杂度为O(log n)，空间复杂度为O(1)</p><p>在此题目的官方题解中还有第三种解法，<a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/solution/you-xu-shu-zu-zhong-de-dan-yi-yuan-su-by-leetcode/"><strong>方法三：仅对偶数索引进行二分搜索</strong></a>，这个解法时间复杂度为O(n/2) = O(n)，比起上面的算法更优雅一些，可以去看一下</p><hr><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序要懂得常用的那几个排序，同时还要求可以默写出来，此后会有专门的文章来记录各种常用的排序算法的代码，这里暂时跳过，直接看一个基于快速排序的<strong>快速选择算法</strong>题目</p><h2 id="215-数组中的第K个最大元素—（中等）"><a href="#215-数组中的第K个最大元素—（中等）" class="headerlink" title="215. 数组中的第K个最大元素—（中等）"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a>—（中等）</h2><p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p>示例 1:</p><blockquote><p>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5</p></blockquote><p>示例 2:</p><blockquote><p>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4<br>输出: 4</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p>遇到这种寻找数组中第x个最大（小）元素的题目，我们都可以用快速选择的方法来解决</p><p>因为我们只用找某个第x个最大（小）的数，因此并不用对整个数组排序，从而把快速排序的O(n*log n)的平均时间复杂度降到O(n)，但是要注意的是最差情况下还是可能O(n^2)</p><p>快速排序是一种分治算法，而快速选择也类似，假设这里有一个数组<strong>a[l…r]<strong>，我们要找到数组</strong>第k大</strong>的数，快速选择可以分为以下步骤：</p><ul><li><strong>分解</strong>：将数组分为a[l…q-1]，a[q]，a[q+1…r]，其中左半边的子数组a[l…q-1]每一个元素都小于等于a[q]，而对于右半边的子数组，a[q]都会小于等于右半边子数组的每一个元素</li><li><strong>解决</strong>：不像快速排序，我们不用把左右两边子数组进行排序，只用处理好a[q]两边子数组满足<code>分解</code>步骤的要求就行了。因为当分解好后，a[q]在数组中的位置就是我们快排后最终它所在的位置，当分解到a[q]的下标q正好是我们要找的下标时就直接return a[q]</li></ul><p>时间复杂度：</p><p>我们知道快速排序的性能和「划分」出的子数组的长度密切相关。直观地理解如果每次规模为 n 的问题我们都划分成 1和 n - 1，每次递归的时候又向 n - 1 的集合中递归，这种情况是最坏的，时间代价是 O(n ^ 2)<br> )。我们可以引入随机化来加速这个过程，它的时间代价的期望是 O(n)，证明过程可以参考「《算法导论》9.2：期望为线性的选择算法」。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">QuickSelect</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//nums[l]是哨兵数</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">></span>i<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>left<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>j<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> traget <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">;</span><span class="token comment">//目标</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">QuickSelect</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span>traget<span class="token punctuation">)</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> traget<span class="token punctuation">)</span><span class="token comment">//目标在右边子数组</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token comment">//目标在左边子数组</span>                r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>搜索一般分为<strong>深度优先搜索（DFS）</strong>和<strong>广度优先搜索（BFS）</strong>，它们被广泛运用在图和树等结构中</p><p><strong>深度优先搜索（depth-first seach， DFS）</strong>：在搜索到一个新的节点时，立即对该新节点进行遍<br>历；因此遍历需要用<strong>先入后出的栈</strong>来实现，也可以通过与栈等价的<strong>递归</strong>来实现。对于树结构而言，<br>由于总是对新节点调用遍历，因此看起来是向着“深”的方向前进。  </p><p><strong>深度优先搜索</strong>也可以用来<strong>检测环路</strong>：记录每个遍历过的节点的父节点，若一个节点被再次遍<br>历且父节点不同，则说明有环。我们也可以用之后会讲到的拓扑排序判断是否有环路，若最后存<br>在入度不为零的点，则说明有环。<br>有时我们可能会需要对已经搜索过的节点进行标记，以防止在遍历时重复搜索某个节点，这<br>种做法叫做<strong>状态记录</strong>或<strong>记忆化（memoization）</strong>。  </p><p><strong>广度优先搜索（breadth-first search， BFS）</strong>：不同与深度优先搜索，它是一层层进行遍历的，因<br>此需要用<strong>先入先出的队列</strong>而非先入后出的栈进行遍历。由于是按层次进行遍历，广度优先搜索时<br>按照“广”的方向进行遍历的，也常常用来处理最短路径等问题。  </p><p>这里要注意，深度优先搜索和广度优先搜索都可以处理<strong>可达性</strong>问题，即从一个节点开始是否<br>能达到另一个节点。因为深度优先搜索可以利用递归快速实现，很多人会习惯使用深度优先搜索<br>刷此类题目。实际软件工程中，很少见到递归的写法，因为一方面难以理解，另一方面可能<br>产生栈溢出的情况；而用栈实现的深度优先搜索和用队列实现的广度优先搜索在写法上并没有太<br>大差异，因此使用哪一种搜索方式需要根据实际的功能需求来判断。  </p><h2 id="934-最短的桥—（中等）"><a href="#934-最短的桥—（中等）" class="headerlink" title="934. 最短的桥—（中等）"></a><a href="https://leetcode-cn.com/problems/shortest-bridge/">934. 最短的桥</a>—（中等）</h2><p>在给定的二维二进制数组 A 中，存在两座岛。（岛是由四面相连的 1 形成的一个最大组。）</p><p>现在，我们可以将 <code>0</code> 变为 <code>1</code>，以使两座岛连接起来，变成一座岛。</p><p>返回必须翻转的 <code>0</code> 的最小数目。（可以保证答案至少是 <code>1 </code>）</p><p>示例 1：</p><blockquote><p>输入：A = [[0,1],[1,0]]<br>输出：1</p></blockquote><p>示例 2：</p><blockquote><p>输入：A = [[0,1,0],[0,0,0],[0,0,1]]<br>输出：2</p></blockquote><p>示例 3：</p><blockquote><p>输入：A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]<br>输出：1</p></blockquote><p>示例4：</p><blockquote><p>输入：<br>[[1,1,1,1,1],<br>[1,0,0,0,1],<br>[1,0,1,0,1],<br>[1,0,0,0,1],<br>[1,1,1,1,1]]<br>输出：1  </p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= A.length == A[0].length &lt;= 100</code></li><li><code>A[i][j] == 0</code> 或 <code>A[i][j] == 1</code></li></ul><p>岛屿问题一般都是与dfs有关系，大多都是套模板</p><p>这里有题目得知一共有两个岛屿，其余的都是水，这里用示例4来说</p><p>刚开始两座岛屿是隔开的，因此我们可以先遍历其中一个岛屿，并把整个岛屿遍历完，同时边遍历边把这个岛的<code>1</code>改成<code>2</code>作为标记</p><p>当把这个岛全部遍历完时，此时地图上有三个部分，分别是：岛屿1、岛屿2和水</p><p>紧接着再选择一个岛屿（这里假设选择岛屿1），使用广度搜索层层遍历，当第一次遇到岛屿2时走过的层数就是最短桥</p><p>代码有点多，大致分为四个步骤</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> direction<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方向数组</span>    <span class="token keyword">int</span> <span class="token function">shortestBridge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//步骤1：遍历一个岛，把1改成2作为标记</span>        <span class="token comment">//dfs</span>        <span class="token keyword">int</span> findFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//记录是否找到岛屿了</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//第一层</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//第二层</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//找到了岛屿</span>                    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//步骤2：深度搜索同时把当前整个大陆涂上2</span>                    findFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//找到岛屿，标记以便退出循环，因为找到一块其它相连的都会在dfs中涂上2</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//找到后就退出了</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>findFlag<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 此时，连通块已涂色，分为三块，0是水，1和2代表两个连通块（岛1和岛2）</span>        <span class="token comment">//步骤3：再选择一个岛屿（这里选择岛屿1），为广度搜索队列做准备而入列</span>        <span class="token keyword">int</span> step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录层数，最终返回的答案</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> qMap<span class="token punctuation">;</span><span class="token comment">//选择pair是为了存储坐标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//把岛屿1的点坐标全部入列</span>                    qMap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//步骤4：广度搜索队列中的岛屿，层层推进向外扩张</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qMap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//队列不为空就在循环内</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> qMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前层要遍历的次数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> cur <span class="token operator">=</span> qMap<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x<span class="token operator">=</span>cur<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token keyword">int</span> y<span class="token operator">=</span>cur<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                qMap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//向四周扩散</span>                    <span class="token keyword">int</span> x_next<span class="token operator">=</span>x<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> y_next<span class="token operator">=</span>y<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>x_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x_next<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//找到岛屿2，可以返回了</span>                            <span class="token keyword">return</span> step<span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//遍历的还是当前岛屿的版块，继续搜索</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            <span class="token comment">//遍历的是海洋</span>                            qMap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x_next<span class="token punctuation">,</span>y_next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队列</span>                            map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//涂色，防止遍历重复</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            step<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//遍历一层结束，答案加一</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度搜索，将整块大陆的1改成2</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> map<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//往四个方向扩张</span>            <span class="token keyword">int</span> x_next<span class="token operator">=</span>x<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y_next<span class="token operator">=</span>y<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x_next<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//限制条件，所寻找的下一个点没有越界，同时下一个点也是属于陆地</span>                map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//涂色</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>x_next<span class="token punctuation">,</span>y_next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜索</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(MN)，其中 M 和 N 分别是数组行数和列数</p><p>空间复杂度：O(MN)</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode刷题笔记第一期&quot;&gt;&lt;a href=&quot;#LeetCode刷题笔记第一期&quot; class=&quot;headerlink&quot; title=&quot;LeetCode刷题笔记第一期&quot;&gt;&lt;/a&gt;LeetCode刷题笔记第一期&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.ltd/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.ltd/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记11-添加攻击属性</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B011-%E6%B7%BB%E5%8A%A0%E6%94%BB%E5%87%BB%E5%B1%9E%E6%80%A7/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B011-%E6%B7%BB%E5%8A%A0%E6%94%BB%E5%87%BB%E5%B1%9E%E6%80%A7/</id>
    <published>2021-07-17T01:11:59.000Z</published>
    <updated>2021-07-17T06:34:40.384Z</updated>
    
    <content type="html"><![CDATA[<p>在这一章节中我们来给人物还有史莱姆添加攻击的属性，同时也给史莱姆补充上攻击的动作，那么我们就开始吧</p><h1 id="创建有关攻击的ScriptableObject"><a href="#创建有关攻击的ScriptableObject" class="headerlink" title="创建有关攻击的ScriptableObject"></a>创建有关攻击的ScriptableObject</h1><p>首先还是新建文件夹和代码文件👇</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/b58fb07a9dd74e99a87414a252bf97d5.png" alt="1.png" style="zoom:80%;" /><p>打开这个代码，我们来写一下有关攻击的属性</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Attack/Attack Data"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttackData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//记录攻击相关属性</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> attackRange<span class="token punctuation">;</span><span class="token comment">//近战攻击范围</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> skillRange<span class="token punctuation">;</span><span class="token comment">//远程攻击范围</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> coolDown<span class="token punctuation">;</span><span class="token comment">//CD冷却</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> minDamage<span class="token punctuation">;</span><span class="token comment">//攻击最小伤害</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> maxDamage<span class="token punctuation">;</span><span class="token comment">//攻击最大伤害</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> criticalMultiplier<span class="token punctuation">;</span><span class="token comment">//暴击加成百分比</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> criticalChance<span class="token punctuation">;</span><span class="token comment">//暴击率</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打完代码之后我们就可以建立一个有关攻击的<code>ScriptableObject</code>了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/ab9faff156ca410f9a77dd7090b983e8.png" alt="2.png" style="zoom:80%;" /><p>然后我们可以根据自己需求进行属性值设定</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/cc0abf9d1c1f4e6d8accc357cba98c51.png" alt="3.png" style="zoom:80%;" /><p>同时我们还要将它挂载到人物和敌人身上，我们打开<code>Monobehavior</code>文件夹下的<code>CharcterStates.cs</code>代码文件，这个代码文件是挂辅助将ScriptableObject挂载的</p><p>然后添加一行代码，接受外界提供的<code>Player BaseAttackData</code>的ScriptableObject</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">AttackData_SO</span> attackData<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们就可以回到史莱姆上挂载了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/ba22aeebd6224df78664695acf1c927f.png" alt="4.png" style="zoom:80%;" /><h1 id="补充之前的攻击相关代码"><a href="#补充之前的攻击相关代码" class="headerlink" title="补充之前的攻击相关代码"></a>补充之前的攻击相关代码</h1><p>还记得之前在写人物和史莱姆攻击时留下来的一些待补充代码吗？我们现在就可以逐步来完善它们了</p><p>第一个要修改的是<code>PlayerController.cs</code>里面人物的攻击距离，之前我们一直是默认为1，但是现在我们可以来补充它了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//ScriptableObject相关变量</span><span class="token keyword">private</span> <span class="token class-name">CharcterStates</span> charcterStates<span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    charcterStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//TODO:添加人物攻击距离</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span>          charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在声明一个<code>CharcterStates</code>后，我们要把这里的while判断条件右边的1改成<code>charcterStates.attackData.attackRange</code>以获取攻击距离判断</p><p>然后是<code>EnemyController.cs</code>，这里修改量比较大</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//ScriptableObject相关变量</span><span class="token keyword">private</span> <span class="token class-name">CharcterStates</span> charcterStates<span class="token punctuation">;</span><span class="token comment">//这个敌人攻击相关的</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> lastAttackTime<span class="token punctuation">;</span><span class="token comment">//上一次攻击的时间（用来实现CD冷却效果）</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    charcterStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastAttackTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span><span class="token comment">//开始获取冷却时间</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    lastAttackTime<span class="token operator">-=</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span><span class="token comment">//每一帧都减冷却</span><span class="token punctuation">&#125;</span><span class="token comment">//判断攻击距离函数</span><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//人物在敌人的攻击距离内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span>            <span class="token operator">&lt;=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//人物在敌人的远程攻击距离内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span>            <span class="token operator">&lt;=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>skillRange<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击            <span class="token comment">//...</span>            <span class="token comment">//TODO:在攻击范围攻击</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//停止跟随</span>                agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//停下来</span>                <span class="token comment">//攻击冷却完成进行攻击，在前面声明了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lastAttackTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    lastAttackTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span>                    <span class="token comment">//暴击判断，随机获取的数值（0到1之间）在暴击率内则是暴击</span>                    <span class="token comment">//charcterStates.isCritical下面会讲，用来记录是否暴击的变量</span>                    charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span>                        charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span>                    <span class="token comment">//执行攻击</span>                    <span class="token function">Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//攻击控制函数</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//攻击时敌人看向目标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//近身攻击动画</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//远程或技能攻击动画</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到中间控制攻击的时候有一个<code>charcterStates.isCritical</code>的新变量，这是在<code>CharcterStates.cs</code>中新声明的，可以供外界访问的布尔值，用来记录当前是否为暴击，同时虽然它是public属性，但是我们可以用<code>[HideInInspector]</code>将其隐藏起来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//CharcterStates.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterStates</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HideInInspector</span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> isCritical<span class="token punctuation">;</span><span class="token comment">//是否暴击</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码开始复杂了起来，需要好好理解哦</p><h1 id="添加攻击动画"><a href="#添加攻击动画" class="headerlink" title="添加攻击动画"></a>添加攻击动画</h1><p>我们看到上面的代码有两个动画需要我们来添加，一个是近身攻击动画，一个是远程或技能动画</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/3d2834012c04439d824cd2b2bbb56556.png" alt="5.png" style="zoom:80%;" /><p>我们按上图这样编辑动画控制器，建立两个<code>Trigger</code>类型的变量来分别控制<code>Attack01</code>和<code>Attack02</code>的动画触发条件，其次要注意的地方就是由巡逻状态切换过去攻击状态时并不需要动画的过渡效果，同时记得不要忘记把触发条件选择上</p><p>然后我们回到代码中，找到控制攻击的<code>Attack()</code>函数补充一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//控制敌人攻击的函数</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//攻击时敌人看向目标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//近身攻击动画</span>        anim<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//远程或技能攻击动画</span>        anim<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Skill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就实现了基本的攻击效果</p><p>我们还可以把暴击效果加上，可以把Skill动画换成我们的暴击效果动画</p><p>再次打开动画控制器，添加一个布尔类型的变量<code>Critical</code></p><p>我们把<code>Attack02</code>当做暴击动画，然后调整一下动画的切换过程</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/d665b2ca32e840c8868baf19b0e587cf.png" alt="6.png" style="zoom:80%;" /><p>这里注意一点就是还要区别普通攻击时<code>Critical</code>触发状态应该是<code>false</code>，以防动画冲突</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/4745d79d02704b0c9ef1bf7903896d5b.png" alt="7.png" style="zoom:80%;" /><p>然后返回代码，我们要时刻获取是否为暴击状态，那么可以如下操作</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//实时更新Animator里面史莱姆的状态布尔值</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Critical"</span><span class="token punctuation">,</span>charcterStates<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时刻获取是否为暴击</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>SwitchAnimation()</code>是放在Update()里面运行的，所以可以把暴击状态放在这里让它每一刻都获取暴击状态</p><h1 id="修复人物脱离敌人攻击范围后敌人不动问题"><a href="#修复人物脱离敌人攻击范围后敌人不动问题" class="headerlink" title="修复人物脱离敌人攻击范围后敌人不动问题"></a>修复人物脱离敌人攻击范围后敌人不动问题</h1><p>最后，我们有个小问题要修复一下</p><p>由于之前我们写了发现敌人时敌人就要停下来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，如果人物脱离敌人攻击范围时我们就要把停止状态取消掉，不然就会出现敌人停留在原地的现象</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击<span class="token comment">//...</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//拉脱回上一个状态</span>        agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//人物脱离追击范围后，敌人停在当前位置</span>        isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        isFollow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//找到人物就跑着追</span>        agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//&lt;-----------停止状态取消</span>        agent<span class="token punctuation">.</span>speed<span class="token operator">=</span>speed<span class="token punctuation">;</span>        <span class="token comment">//人物进到敌人的范围会给追击</span>        agent<span class="token punctuation">.</span>destination<span class="token operator">=</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到这，我们就完成了给人物和敌人添加攻击属性，并且还为敌人加了普通攻击和暴击等攻击动画，让游戏开始变得有模有样起来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在这一章节中我们来给人物还有史莱姆添加攻击的属性，同时也给史莱姆补充上攻击的动作，那么我们就开始吧&lt;/p&gt;
&lt;h1 id=&quot;创建有关攻击的ScriptableObject&quot;&gt;&lt;a href=&quot;#创建有关攻击的ScriptableObject&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记10-为人物添加属性</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B010-%E4%B8%BA%E4%BA%BA%E7%89%A9%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B010-%E4%B8%BA%E4%BA%BA%E7%89%A9%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/</id>
    <published>2021-07-16T07:37:04.000Z</published>
    <updated>2021-07-16T09:55:36.320Z</updated>
    
    <content type="html"><![CDATA[<p>🎈<strong>注意</strong>：从这一章开始，笔记内容会在一些比较简单的地方进行简略</p><h1 id="认识Scriptable-Object"><a href="#认识Scriptable-Object" class="headerlink" title="认识Scriptable Object"></a>认识Scriptable Object</h1><p>这一章开始我们会频繁地使用代码以及更多地<code>ScriptableObject</code>起来，什么是Scriptable Object呢？就像下图我们的<code>Pipeline Setting</code>文件夹下的东西就是我们一种Scriptable Object实现方式</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/158275c63e164f448921282c6cefad4a.png" alt="1.png" style="zoom:80%;" /><p>关于它的更多特性可以上网搜索资料，这里不过多描述</p><p>那么我们这次就拿它来给我们的人物包括敌人创建一些基本的属性值，如：血量、防御值等等</p><h1 id="为人物添加属性值"><a href="#为人物添加属性值" class="headerlink" title="为人物添加属性值"></a>为人物添加属性值</h1><p>首先要在<code>Scripts</code>文件夹创建一些文件夹以便日后管理</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/5a19a7e92b1e41d1ad6996dbb1a0563a.png" alt="2.png" style="zoom:80%;" /><p>两个文件夹分别是存放挂载（MonoBehavior）与建立（ScriptableObject）我们的Scriptable Object的代码文件用的</p><p>除了上面的两个文件夹外，还有专门有用来存放<code>ScriptableObject</code>数据的文件夹</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/dd8e1a4b80a646f5835de7c6834b4f19.png" alt="3.png" style="zoom:80%;" /><h2 id="创建专门存放属性值的Scriptable-Object"><a href="#创建专门存放属性值的Scriptable-Object" class="headerlink" title="创建专门存放属性值的Scriptable Object"></a>创建专门存放属性值的Scriptable Object</h2><p>之后再在<code>Charcter States/ScriptableObject</code>文件夹下新建个代码脚本文件<code>CharcterData_SO.cs</code></p><p>代码内容如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//添加右键菜单</span><span class="token punctuation">[</span><span class="token function">CreateAssetMenu</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Charcter States/Data"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token comment">//注意这个类继承的是ScriptableObject类</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一段代码可以在右键菜单中添加一个选项</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/54d3f5656d33441fa14682fcf33ee71f.png" alt="4.1.png" style="zoom:80%;" /><p>创建出来的就是一个基于<code>CharcterData_SO</code>的ScriptableObject，我们将其命名为<code>Player Data</code></p><img src="https://p3-tt.byteimg.com/origin/pgc-image/5ff5985ea4a742efa56703027a071053.png" alt="4.png" style="zoom:80%;" /><img src="https://p26-tt.byteimg.com/origin/pgc-image/b6c7ca8158fb45f89fa331bffdba9eba.png" alt="5.png" style="zoom:80%;" /><p>这个时候还是什么都没有的，我们重新打开<code>CharcterData_SO.cs</code>继续填写代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//添加右键菜单</span><span class="token punctuation">[</span><span class="token function">CreateAssetMenu</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Charcter States/Data"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"States Info（属性信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">;</span><span class="token comment">//最大生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentHealthl<span class="token punctuation">;</span><span class="token comment">//当前生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseDefence<span class="token punctuation">;</span><span class="token comment">//基础防御值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentDefence<span class="token punctuation">;</span><span class="token comment">//当前防御值</span>    <span class="token comment">//攻击力比较复杂，打算分开写，这里暂时不写着先</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们赋予了4个属性，当Unity编译之后在我们刚刚新创建的<code>Player Data</code>就有了改变，多了几个属性值出来</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/a9cdd098cf54461a8f0387b00d539f9b.png" alt="6.png" style="zoom:80%;" /><h2 id="挂载Scriptable-Object"><a href="#挂载Scriptable-Object" class="headerlink" title="挂载Scriptable Object"></a>挂载Scriptable Object</h2><p>那么有了存放的ScriptableObject之后，我们还要想办法将其运用（即挂载）到人物身上，方便数据之间的读取</p><p>我们在<code>Charcter States/MonoBehavior</code>中新建一个代码脚本，命名为<code>CharcterStates.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterStates</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CharcterData_SO</span> charcterData<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> MaxHealth<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token comment">//取值属性</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>charcterData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> charcterData<span class="token punctuation">.</span>maxHealth<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span><span class="token punctuation">&#123;</span><span class="token comment">//赋值属性</span>            charcterData<span class="token punctuation">.</span>maxHealth <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//TODO:照上面模式写出其它几个属性值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中用到了C#的<strong>属性</strong>，即<code>get</code>和<code>set</code>来读取或写入人物的最大生命值，剩下的几个属性值也是同样方法来写</p><p>写好之后我们保存一下代码，将代码文件当作组件添加到人物上面</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/4ccad37c1e6e4765a5459eef8bf7e044.png" alt="7.png" style="zoom:80%;" /><p>可以看到它需要接受一个<code>CharcterData_SO</code>类型的</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;🎈&lt;strong&gt;注意&lt;/strong&gt;：从这一章开始，笔记内容会在一些比较简单的地方进行简略&lt;/p&gt;
&lt;h1 id=&quot;认识Scriptable-Object&quot;&gt;&lt;a href=&quot;#认识Scriptable-Object&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记9-敌人的随机巡逻</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B09-%E6%95%8C%E4%BA%BA%E7%9A%84%E9%9A%8F%E6%9C%BA%E5%B7%A1%E9%80%BB/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B09-%E6%95%8C%E4%BA%BA%E7%9A%84%E9%9A%8F%E6%9C%BA%E5%B7%A1%E9%80%BB/</id>
    <published>2021-07-15T01:15:42.000Z</published>
    <updated>2021-07-15T07:56:47.520Z</updated>
    
    <content type="html"><![CDATA[<p>​    在上一章节我们实现了敌人的追击效果，也就是敌人的追击状态，而这一章节我们来实现它的巡逻状态效果</p><h1 id="实时显示巡逻范围"><a href="#实时显示巡逻范围" class="headerlink" title="实时显示巡逻范围"></a>实时显示巡逻范围</h1><p>​    由于之后会有一个记录敌人巡逻范围的变量，因此为了方便到时候的设置，这里介绍一个函数可以实时在<code>Scene</code>窗口上显示这个范围出来</p><p>​    因为这个变量是在<code>EnemyController.cs</code>代码文件里声明的，所以我们就直接在此代码文件里用这个函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Patrol State（巡逻状态的设置项）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> potralRange<span class="token punctuation">;</span><span class="token comment">//巡逻圈的半径大小</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDrawGizmosSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Gizmos<span class="token punctuation">.</span>color <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span>        Gizmos<span class="token punctuation">.</span><span class="token function">DrawWireSphere</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在敌人当前位置画一个球形范围的线</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <code>OnDrawGizmosSelected()</code>是来自于<code>MonoBehaviour</code>类的一个函数，这里代码意思是只要选中了代码所在的对象上就会绘画出一个球形的线，而这个球形的半径就是<code>potralRange</code>，例如当此值调成为2时，球形如下图所示👇</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/8c138a5dc08f44ed92287bc624597238.png" alt="1.png" style="zoom:80%;" /><p>​    当然你也可以添加其它参数的可视化效果，可以自由发挥</p><h1 id="实现敌人巡逻"><a href="#实现敌人巡逻" class="headerlink" title="实现敌人巡逻"></a>实现敌人巡逻</h1><p>​    接下来就进入正题，如何实现敌人巡逻，我们可以在它设定的巡逻范围内获得一个点，然后再让敌人走过去，反复执行这个动作，就可以让敌人巡逻起来了</p><h2 id="随机获得巡逻范围内的一个点"><a href="#随机获得巡逻范围内的一个点" class="headerlink" title="随机获得巡逻范围内的一个点"></a>随机获得巡逻范围内的一个点</h2><p>​    要获得巡逻范围内的一个点，我们就要有一个Vector3变量来记录这个点，然后每次使用随机数来改变它，所以我们创建一个函数来专门随机获得这个点的值</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Vector3</span> wayPoint<span class="token punctuation">;</span><span class="token comment">//敌人巡逻的下一个随机目标点</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取下一个巡逻的随机目标点</span>    <span class="token comment">//Y轴是控制高度的，所以不用获取，保持原来的就行</span>    <span class="token comment">//获取的范围时[-potralRange,potralRange]</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomX <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomZ <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在敌人自己本身的坐标点上进行取随机点</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//FIXME:有可能出现问题</span>    wayPoint <span class="token operator">=</span> randomPoint<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    由于Y轴是记录敌人所在的高度的，所以这里暂时不用获取随机数，保持原来效果</p><p>​    同时上面代码中给标记了一个FIXME，有可能出现一个问题，我们先放一边到时候再来发现修改</p><h2 id="修改状态切换"><a href="#修改状态切换" class="headerlink" title="修改状态切换"></a>修改状态切换</h2><p>​    获取了随机点后，我们还要回到<code>SwitchStates()</code>函数中修改一下状态的衔接</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>巡逻        isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不是追逐动画</span>        agent<span class="token punctuation">.</span>speed <span class="token operator">=</span> speed<span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token comment">//巡逻速度是追逐速度的一半</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>wayPoint<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果下一个巡逻点和当前人物的坐标点小于等于可移动距离则不移动</span>            isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不播放走路的动画</span>            <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个巡逻点随机数</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//满足行走条件</span>            isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//敌人动画改为走路动画</span>            agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> wayPoint<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上面就是判断到敌人为巡逻状态时要做的事情，里面还有一个if语句是用于判断如果下一个巡逻的点小于或等于导航组件可以移动的范围时就不移动，再获得下一个巡逻点</p><p>🎄而 <a href="https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent-stoppingDistance.html">stoppingDistance</a> 是<code>Nav Mesh Agent</code>组件里的一个属性，代表<code>停止距离</code>，即如果给定的目的点与当前点的距离小于这个值的话，敌人时不会进行移动的，这个值我们也可以在属性面板中进行调整</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/107272d76d03463c8012565f3e821a87.png" alt="2.png" style="zoom:80%;" /><p>​    了解到这些之后我们继续回到代码中，我们写了巡逻状态时要做的事情，那么我们该怎样判断并进入巡逻状态呢？下面我们就来写一下这些代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//...</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> isGuard<span class="token punctuation">;</span><span class="token comment">//当前敌人是否为警卫（警戒状态）</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//开始游戏时先检测是否勾选了守卫状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isGuard<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>        <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止开始时巡逻点是空的默认走到地图(0,0,0)位置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这里我们新建了一个公开的布尔值变量<code>isGuard</code>，可以直接在属性面板勾选，用来判断当前敌人是否为一个守卫，如果为守卫就不会进行巡逻了</p><p>​    在弄好这些之后，敌人巡逻的基本功能就实现了，现在我们就可以去试玩一下了</p><h2 id="修复一些问题"><a href="#修复一些问题" class="headerlink" title="修复一些问题"></a>修复一些问题</h2><p>​    在试玩的过程中，会出现一些问题，我们下面就来修复它们</p><h3 id="敌人巡逻的范围越来越远"><a href="#敌人巡逻的范围越来越远" class="headerlink" title="敌人巡逻的范围越来越远"></a>敌人巡逻的范围越来越远</h3><p>​    首先是敌人巡逻范围的问题，如果只依照上面的代码我们会发现敌人的巡逻范围会越来越远，这是因为取随机坐标点的代码逻辑考虑不对劲</p><p>​    我们回到上面的标有FIXME代码块中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//在敌人自己本身的坐标点上进行取随机点</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    出现问题的就是在上面这一句代码，我们取到的下一个随机目标点是基于敌人现在的位置基础上的，也就是每次取到的随机点都与现在位置相加，这就不对了，如果一直往同一个方向相加，只会导致敌人走的越来越远</p><p>​    因此这里<strong>不应该</strong><code>transform.position+xxx</code></p><p>​    </p><p>​    那么解决方案怎么样做呢？我们可以在游戏开始初始化把当前敌人所在的位置记录下来，然后每次取随机点是基于这个点来进行坐标相加的</p><p>​    同时这个坐标点也不止在巡逻状态这里用得到，我们在守卫状态下也需要这个初始坐标点，守卫状态下如果追击敌人脱战之后，我们必须让敌人回到这个初始坐标点继续守卫</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Vector3</span> puardPos<span class="token punctuation">;</span><span class="token comment">//当前敌人游戏开始时的初始位置</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span> guardPos <span class="token operator">=</span> guardPos <span class="token operator">=</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>guardPos<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>guardPos<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    按照上面的代码修改，我们就解决了这个问题</p><p>​    🎈<strong>要注意</strong>：新的坐标点的Y轴还是以敌人当前位置为基础的</p><h3 id="敌人移动卡住"><a href="#敌人移动卡住" class="headerlink" title="敌人移动卡住"></a>敌人移动卡住</h3><p>​    第二个可能遇到的问题就是可能敌人走着走着会突然给卡住，但它仍然处于移动状态，这可能是因为所获取的目标点为<strong>不可移动区域</strong>造成的，例如树木、石头所在的点</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/e5d07eb926e74385a3d3454bf171703c.png" alt="3.png" style="zoom:80%;" /><p>​    因此解决方法就是我们在获取点之后要判断一下所获得的点是否为到达的点，如果不是就再获取一遍</p><p>​    这里可以用到 <a href="https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent.html">NavMeshAgent</a> 的一个方法 <a href="https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent.SamplePathPosition.html">SamplePathPosition()</a> ，可以帮助我们来判断敌人到目标点是否可以行走，我们回到<code>GetNewWayPoint()</code>函数中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取下一个巡逻的随机目标点</span>    <span class="token comment">//Y轴是控制高度的，所以不用获取，保持原来的就行</span>    <span class="token comment">//获取的范围时[-potralRange,potralRange]</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomX <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomZ <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>guardPos<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>guardPos<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//检测下个点是否可行</span>    <span class="token class-name">NavMeshHit</span> hit<span class="token punctuation">;</span>    wayPoint <span class="token operator">=</span><span class="token comment">//如果新的目标点可以到达则赋值，否则则把敌人当前所在点赋值</span>        NavMesh<span class="token punctuation">.</span><span class="token function">SamplePosition</span><span class="token punctuation">(</span>randomPoint<span class="token punctuation">,</span><span class="token keyword">out</span> hit<span class="token punctuation">,</span>potralRange<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> hit<span class="token punctuation">.</span>position <span class="token punctuation">:</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token comment">//提供一个参考点，输出属性的网格信息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样我们就解决了敌人会卡住的问题</p><h3 id="增加敌人等待时间"><a href="#增加敌人等待时间" class="headerlink" title="增加敌人等待时间"></a>增加敌人等待时间</h3><p>​    还有一个可以完善的地方就是敌人在移动到一个新的点后，它会立即又前往下一个地点，这里可以为它增加一些等待时间</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Patrol State（巡逻状态的设置项）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//...</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> lookAtTime<span class="token punctuation">;</span><span class="token comment">//敌人到达一个点停留的时间</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> remainLookAtTime<span class="token punctuation">;</span><span class="token comment">//还剩下的停留时间</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//脱离战斗后判断回到守卫状态还是巡逻状态</span>                enemyStates <span class="token operator">=</span> isGuard <span class="token punctuation">?</span> EnemyStates<span class="token punctuation">.</span>GUARD <span class="token punctuation">:</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//判断是否到了随机巡逻点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>wayPoint<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果下一个巡逻点和当前人物的坐标点小于等于可移动距离则不移动</span>                isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不播放走路的动画</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>remainLookAtTime <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果剩余等待时间大于0则继续等待</span>                    remainLookAtTime <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个巡逻点随机数</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//满足行走条件</span>                isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//敌人动画改为走路动画</span>                agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> wayPoint<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//PATROL</span>    <span class="token punctuation">&#125;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取下一个巡逻的随机目标点</span>    remainLookAtTime <span class="token operator">=</span> lookAtTime<span class="token punctuation">;</span><span class="token comment">//重置剩余等待时间</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上面代码中我们添加了两个变量，<code>lookAtTime</code>表示需要等待时间的长度（可供外界进行调整），<code>remainLookAtTime</code>表示当前敌人还剩余的等待时间，然后我们在<code>SwitchEnemyStates()</code>函数里的追击状态中判断敌人到达了目标点就开始逐帧递减<code>remainLookAtTime</code>，当减到小于0敌人才会开始走动，同时再一次调用<code>GetNewWayPoint()</code>时会重置<code>remainLookAtTime</code></p><p>​    🎈注意：<code>lookAtTime</code>的单位是<strong>秒</strong></p><p>​    在switch代码前面还添加了一条语句用来判断脱离战斗后敌人回到守卫状态还是巡逻状态，这可以让我们敌人更加完善</p><p>​    到这里，本章的目的就实现了，我们让敌人随机巡逻了起来，快去游戏中试试吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    在上一章节我们实现了敌人的追击效果，也就是敌人的追击状态，而这一章节我们来实现它的巡逻状态效果&lt;/p&gt;
&lt;h1 id=&quot;实时显示巡逻范围&quot;&gt;&lt;a href=&quot;#实时显示巡逻范围&quot; class=&quot;headerlink&quot; title=&quot;实时显示巡逻范围&quot;&gt;&lt;/a&gt;实时</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记8--为敌人添加追击效果以及动画切换管理</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B08-%E4%B8%BA%E6%95%8C%E4%BA%BA%E6%B7%BB%E5%8A%A0%E8%BF%BD%E5%87%BB%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E5%8A%A8%E7%94%BB%E5%88%87%E6%8D%A2%E7%AE%A1%E7%90%86/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B08-%E4%B8%BA%E6%95%8C%E4%BA%BA%E6%B7%BB%E5%8A%A0%E8%BF%BD%E5%87%BB%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E5%8A%A8%E7%94%BB%E5%88%87%E6%8D%A2%E7%AE%A1%E7%90%86/</id>
    <published>2021-07-12T08:58:41.000Z</published>
    <updated>2021-07-14T03:45:14.534Z</updated>
    
    <content type="html"><![CDATA[<!--终于期末考完试了，可以回到Unity上来了😃--><p>​    我们来继续完善敌人，还记得我们有个动画切换的框架代码摆在那吗？这一次我们来为敌人添加追击效果并且对不同状态下的动画切换进行管理</p><h1 id="保存修改后的素材"><a href="#保存修改后的素材" class="headerlink" title="保存修改后的素材"></a>保存修改后的素材</h1><p>​    在进行切换动画之前，我们先将上一次修改后的主角和史莱姆保存为一个素材对象，这方便以后我们的使用，特别是史莱姆，将其保存为素材对象后就可以批量创建敌人了</p><h2 id="保存主角为素材对象"><a href="#保存主角为素材对象" class="headerlink" title="保存主角为素材对象"></a>保存主角为素材对象</h2><p>​    由于我们的主角小狗在之前就保存为素材了，而在上一章我们为其添加了一个胶囊碰撞体，这里我们只用将胶囊碰撞体保存一下就行了</p><p>​    在<code>Hierarchy</code>视图选择我们的小人<code>Player</code>，然后找到胶囊碰撞体组件，右键它，按下图找到<code>Added Component-&gt;Apply to Prefab &#39;Player&#39;</code>，点击它就可以将新增加的胶囊碰撞体应用在原本的素材上了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f15d609363c14d13b3e1a79616db15e6.png" alt="1.png" style="zoom:80%;" /><h2 id="保存史莱姆敌人为素材对象"><a href="#保存史莱姆敌人为素材对象" class="headerlink" title="保存史莱姆敌人为素材对象"></a>保存史莱姆敌人为素材对象</h2><p>​    保存史莱姆也是一个简单的事情，只用在<code>Hierarchy</code>视图下将史莱姆拖拽到到<code>Prefab-&gt;Characters</code>文件夹下就行了，注意在弹出的窗口中选择<code>Original Prefab</code></p><img src="https://p3-tt.byteimg.com/origin/pgc-image/e4d3d1be8f5a4a63aae9fa7f85938fdb.png" alt="2.png" style="zoom:80%;" /><h1 id="思考如何敌人的追击效果"><a href="#思考如何敌人的追击效果" class="headerlink" title="思考如何敌人的追击效果"></a>思考如何敌人的追击效果</h1><p>​    对于敌人追击我们人物，简而言之就是敌人的移动目标是我们的人物，我们可以在原有的代码基础上来实现追击效果</p><p>​    打开我们的<code>EnemyController.cs</code>代码文件，我们可以先在类中添加一个<code>attackTarget</code>的变量，这个代表着我们敌人追击的目标，并在先前写的<code>FoundPlayer</code>函数里对其赋予目标（即将在敌人一定范围找到人物时，追击目标为敌人）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">GameObject</span> attackTarget<span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Collider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> colliders <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">OverlapSphere</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>sightRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接受一个圆点，一个半径的参数，返回的是碰撞体数组</span>                <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> target <span class="token keyword">in</span> colliders<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//循环碰撞体数组，逐个查找</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//当前循环到的碰撞体的标签为Player就代表找到人物了</span>                attackTarget<span class="token operator">=</span>target<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    做好上面这些后，我们要回到<code>SwitchEnemyStates</code>函数里进行完善Switch框架</p><p>​    在追击中，我们要思考一下在这过程有哪些行为，首先是追击敌人，追击到了的话会进行攻击，如果目标脱离了追击范围则应该回到上一个状态，同时这整个流程都要有动画的切换。以下代码中便用了TODO来描述要做的事情</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//...</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击                <span class="token comment">//TODO:追击Player</span>                <span class="token comment">//TODO:在攻击范围攻击</span>                <span class="token comment">//TODO:配合动画</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//TODO:拉脱回上一个状态</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//人物进到敌人的范围会给追击</span>                    agent<span class="token punctuation">.</span>destination<span class="token operator">=</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    写了以上的代码后，当我们的人物靠近敌人时就被追击了，我们还可以给不同的状态赋予不同的速度，如守卫状态移动速度慢一点，而追击速度快一点等等</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> speed<span class="token punctuation">;</span><span class="token comment">//敌人的速度</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        speed<span class="token operator">=</span>agent<span class="token punctuation">.</span>speed<span class="token punctuation">;</span><span class="token comment">//在初始化时速度初始化为原来默认的速度</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    之后我们就可以在<code>Switch</code>中不同状态下给定不同的速度值了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//举个栗子</span><span class="token comment">//case xxx:</span>speed <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>agent<span class="token punctuation">.</span>speed<span class="token operator">=</span>speed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="给敌人添加动画"><a href="#给敌人添加动画" class="headerlink" title="给敌人添加动画"></a>给敌人添加动画</h1><h2 id="一些要注意的地方"><a href="#一些要注意的地方" class="headerlink" title="一些要注意的地方"></a>一些要注意的地方</h2><p>​    上面的代码我们打好后先放在一边，先来看看史莱姆的动画如何添加</p><p>​    和之前的小狗一样，我们可以在素材的文件夹下预览动画的效果</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/cbd42713bc444c18836fedb8b0b42622.png" alt="3.png" style="zoom:80%;" /><p>​    上图中可以看到有两个<code>Idle（闲置）</code>的动画效果，其中的<code>IdleBattle</code>是在攻击玩家中间CD时间时的闲置动作，而<code>IdleNormal</code>则是在一般闲置状态下的闲置效果，这里要注意区分</p><p>​    知道这些后，我们就可以再次使用动画控制器来管理动画的切换了</p><h2 id="使用动画管理器来管理动画"><a href="#使用动画管理器来管理动画" class="headerlink" title="使用动画管理器来管理动画"></a>使用动画管理器来管理动画</h2><p>​    首先在<code>Animations</code>文件夹下新建一个<code>Animator Controller</code>专门用来管理史莱姆的动画，这里我将它命名为<code>Enemy _Slime</code>，🎈记住创建好后要拖拽到史莱姆的属性面板上应用该Animator Controller</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/7fbb2f64cba8440f93954e02b86e2f50.png" alt="4.png" style="zoom:80%;" /><p>​    接着双击打开他进入动画管理器</p><p>​    因为敌人有多种状态，所以我们要考虑如何来规划这些动画。而这里则可以使用不同的<code>Layer</code>来实现不同的状态</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/d35a90c16257478d823a52b598c87578.png" alt="5.png" style="zoom:80%;" /><center>可以在不同的Layer中实现不同状态的动画</center><h3 id="Base-Layer"><a href="#Base-Layer" class="headerlink" title="Base Layer"></a>Base Layer</h3><p>​    刚开始我们只用到<code>Base Layer</code>，其它的layer我们之后再创建。而在最开始的<code>Base Layer</code>当中，我们完成最基本的状态：普通闲置和行走（巡逻状态）</p><p>​    如下图找到对应的动画并拖拽到动画控制器中，并进行状态转移的设置</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/138c62781a3b47deb564aacdc3bd0e6f.png" alt="6.png" style="zoom:80%;" /><p>​    那么闲置状态切换到行走状态的条件是什么呢？在之前我们控制小人行走的动画切换是通过鼠标点击的方式来判断，而这里敌人的状态切换可以看做是一个逻辑状态，因此我们可以建立一个布尔变量来控制它们的切换，这里命名为<code>Walk</code></p><img src="https://p5-tt.byteimg.com/origin/pgc-image/fc09aba486814ef9942061481e2d610e.png" alt="7.png" style="zoom:80%;" /><p>​    然后填写动画之间的切换条件</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/9bfd3f46132a4c938c0dddaf775ab53b.png" alt="8.png" style="zoom:80%;" /><center>两个切换都要（一个为true，一个为false）</center><p>​    </p><h3 id="Attack-Layer（实现追击）"><a href="#Attack-Layer（实现追击）" class="headerlink" title="Attack Layer（实现追击）"></a>Attack Layer（实现追击）</h3><p>​    接下来我们新建一个新的Layer，并将其命名为<code>Attack Layer</code>，我们的追击动画切换就在这里面来实现</p><p>​    新建好后我们要设置一下这个Layer的权重值，这里要调整<code>Weight</code>值为最大<code>1</code>，表示在动画触发的时候是完全覆盖原来的Base Layer里的动画，如果不是1的话就相当于是叠加原来的动画，两者进行混合</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/f5282b22821c4d0b919674b2c68cca85.png" alt="9.png" style="zoom:80%;" /><p>​    那么我们是如何知道上一个状态是怎么切换到当前的Layer呢？我们可以在新建的Layer中创建一个<code>Empty State</code>并将它命名为<code>Base State</code>，这个空的State可以代表我们之前任意一个Layer，当满足条件的时候它就会切换过来并进一步切换动画</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/ac40128c56244e46893c469a70178825.png" alt="10.png" style="zoom:80%;" /><p>​    切换过来<code>Attack Layer</code>的时候我们最先要进入的是一个闲置状态，再加上这是一个专门用于追击的Layer，因此我们可以使用<code>Idle_Battle</code>这个动画</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/38b8683f9e2644ab8d281f80bcdd34fd.png" alt="11.png" style="zoom:80%;" /><p>​    同样我们切换条件也是可以建立一个<code>布尔值</code>变量来控制，这里取名为<code>Chase</code></p><p>​    上面的是一个敌人攻击空当时CD动画，当然我们还要有一个追的动画，也是要靠一个<code>布尔值</code>变量来控制，如下图</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/43a30493ed3d4be0a6204f23af878588.png" alt="12.png" style="zoom:80%;" /><p>​    这里我把追击的动画（<code>RunFWD</code>）加了上去，并用一个新的布尔值<code>Follow</code>来作为它与<code>IdleBattle</code>之间的切换判断条件</p><p>​    🎈注意将三个布尔值都应用到对应的动画切换判断上去哦！</p><p>​    这样一来就有了一个逻辑：如果敌人发现了我们的控制的小人，并且两者距离大于敌人的攻击距离，敌人则会进行追击我们的小人，当靠近后则会进行攻击CD状态，等到下一个攻击到来（攻击动画效果这里还没实现）</p><h2 id="使用代码配合动画切换"><a href="#使用代码配合动画切换" class="headerlink" title="使用代码配合动画切换"></a>使用代码配合动画切换</h2><p>​    完成动画管理器中的前置工作后，我们就可以着手来写代码从而配合我们的动画切换了</p><p>​    打开<code>EnemyController.cs</code>，首先要获取<code>Animator</code>组件的信息</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Animator</span> anim<span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>        anim <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    然后要声明三个布尔变量对照着动画管理器的那三个布尔变量（Walk、Chase、Follow）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span><span class="token comment">//动画控制的三个布尔值变量</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isWalk<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isChase<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isFollow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这三个变量是用来实时更新动画控制器里的布尔变量的，因此我们要使用一个函数，并将它放在<code>Update()</code>里边</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>        <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//实时更新Animator里面史莱姆的三个布尔值</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Walk"</span><span class="token punctuation">,</span>isWalk<span class="token punctuation">)</span><span class="token punctuation">;</span>        anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Chase"</span><span class="token punctuation">,</span>isChase<span class="token punctuation">)</span><span class="token punctuation">;</span>        anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Follow"</span><span class="token punctuation">,</span>isFollow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样一来，我们在其它函数里更改了这三个is布尔值的话，他们就可以实时同步到Animator里面了</p><p>​    紧接着我们回到<code>SwitchEnemyStates()</code>函数里面修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//...</span><span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//...</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击<span class="token comment">//TODO:追击Player</span>    <span class="token comment">//TODO:在攻击范围攻击</span>            <span class="token comment">//TODO:配合动画</span>        isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//追击时就不是走路了</span>        isChase <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//切换到追击的Layer层动画</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//TODO:拉脱回上一个状态</span>        isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        isFollow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//找到人物就跑着追</span>      agent<span class="token punctuation">.</span>speed<span class="token operator">=</span>speed<span class="token punctuation">;</span>        <span class="token comment">//人物进到敌人的范围会给追击</span>        agent<span class="token punctuation">.</span>destination<span class="token operator">=</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    到这里我们就实现了敌人追击我们的状态啦，快去游戏中试一下吧</p><h1 id="解决敌人停下来有延迟的问题"><a href="#解决敌人停下来有延迟的问题" class="headerlink" title="解决敌人停下来有延迟的问题"></a>解决敌人停下来有延迟的问题</h1><p>​    试过游戏后我们可能会发现一个问题，就是当我们人物脱离敌人追击范围时敌人会再走一小段路才会停下来，这是因为我们没有及时修改敌人移动的目的地，也就是<code>agent.destination</code>，当脱离追击范围后，敌人的目的地还在后面一小段路，从而导致了延迟的效果</p><p>​    这里修改它也很简单，在上面代码添加一条语句就可以了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//...</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//拉脱回上一个状态</span>    agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//人物脱离追击范围后，敌人停在当前位置</span>    isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样，敌人在脱离追击状态时就会立刻停在当前位置了</p><p>​    🎉到这里，本章我们就成功实现了敌人的一个简单的追击状态及动画切换管理，下一章我们将更加完善敌人其它一些状态，例如巡逻效果等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!--终于期末考完试了，可以回到Unity上来了😃--&gt;

&lt;p&gt;​    我们来继续完善敌人，还记得我们有个动画切换的框架代码摆在那吗？这一次我们来为敌人添加追击效果并且对不同状态下的动画切换进行管理&lt;/p&gt;
&lt;h1 id=&quot;保存修改后的素材&quot;&gt;&lt;a href=&quot;#保存修改</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
</feed>
