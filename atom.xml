<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🌸樱花酒吧🍻</title>
  
  <subtitle>🌸Sakura-Pub🍻</subtitle>
  <link href="http://sakura-pub.top/atom.xml" rel="self"/>
  
  <link href="http://sakura-pub.top/"/>
  <updated>2022-06-15T05:44:19.475Z</updated>
  <id>http://sakura-pub.top/</id>
  
  <author>
    <name>Sakura.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>投递简历记录</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E6%8A%95%E9%80%92%E7%AE%80%E5%8E%86%E8%AE%B0%E5%BD%95/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/%E6%8A%95%E9%80%92%E7%AE%80%E5%8E%86%E8%AE%B0%E5%BD%95/</id>
    <published>2022-06-15T05:43:43.000Z</published>
    <updated>2022-06-15T05:44:19.475Z</updated>
    
    <content type="html"><![CDATA[<p>待更新。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;待更新。。。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++面经总结</title>
    <link href="http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://sakura-pub.top/%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-11T01:22:33.000Z</published>
    <updated>2022-06-14T16:00:48.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 在写这个文章的时候已经是大三的寒假了，因此也要开始为实习的工作做准备了，这里就专门开了个文章来记录我在网上找到的一些<strong>C++面经</strong>，文章也是不断进行更新的，希望到时候能够找到一个满意的Offer📝</p><h1 id="C-语言问答题"><a href="#C-语言问答题" class="headerlink" title="C++语言问答题"></a>C++语言问答题</h1><p>首先是C++的语言特性问题，有许多问题都是经常问到的，这里逐个记录下来</p><h2 id="strcpy-函数有什么缺陷，如何优化"><a href="#strcpy-函数有什么缺陷，如何优化" class="headerlink" title="strcpy 函数有什么缺陷，如何优化"></a>strcpy 函数有什么缺陷，如何优化</h2><p><code>strcpy</code>是c语言头文件中的<code>&lt;string.h&gt;</code>的库函数，是用来复制字符串，它的函数原型为<code>char * strcpy( char * dst, const char * src )</code>，这个函数把字符串src复制到一分配好的字符串空间dst中，复制的时候包括标志字符串结尾的空字符一起复制。操作成功，返回dst，否则返回NULL</p><p>它的<strong>缺陷</strong>则是没有字符串长度的判断，当复制进去的字符串<code>src</code>长度大于了原来分配好空间的字符串<code>dst</code>长度时，函数会把字符串后面的空间也覆盖掉，造成<strong>缓冲溢出</strong>情况</p><p>想要优化这个缺陷其实很简单，只需要自己加一个判断长度语句就行了</p><h2 id="指针和引用区别"><a href="#指针和引用区别" class="headerlink" title="指针和引用区别"></a>指针和引用区别</h2><p>这里指针和引用区别有四个点</p><ol><li>指针所指向的内存可以在程序运行期间改变，而引用所绑定的对象一旦绑定之后不允许改变（是否可变）</li><li>指针本身在内存中是占空间的（32位系统指针占4字节，64位系统指针占8字节），引用相当于变量别名，在内存中不占空间（是否占空间）</li><li>指针可以为空，引用则必须绑定对象（是否可为空）</li><li>指针可以有多级，引用只能有一级（是否能为多级）</li></ol><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p>这里的堆和栈是指内存中的堆栈，堆栈是一个特定的存储区或寄存器</p><ol><li>申请方式：栈是系统自动分配的，而堆则是程序员主动申请的</li><li>申请后系统的响应方式：分配栈空间，如果剩余空间大于申请空间，则分配成功，否则分配失败栈溢出；分配堆空间，堆在内存中呈现的方式类似于链表（每个节点记录着空闲的空间），在链表中寻求第一个大于申请空间的节点分配给程序，并将该节点删除；值得注意的是，大多数系统中该块空间的首地址存放的是本次的是本次分配空间的大小，便于释放时将该块空间重新添加到链表上。</li><li>栈在内存中是一块连续的空间（向低地址扩展），最大的容量是系统预定好的；堆是不连续的空间（向高地址扩展）</li><li>申请效率：栈是系统自动分配的，申请效率高，但是程序员无法控制；堆是由程序员自主申请分配的，效率较低，并且容易产生碎片空间</li><li>存放的内容：栈中存放的是局部变量，函数的参数；堆存放的内容由程序员控制</li></ol><h2 id="new和delete是怎么实现的，new和malloc有什么区别"><a href="#new和delete是怎么实现的，new和malloc有什么区别" class="headerlink" title="new和delete是怎么实现的，new和malloc有什么区别"></a>new和delete是怎么实现的，new和malloc有什么区别</h2><p>new/delete和malloc/free都是很熟悉的，经常要用到</p><ol><li>属性：malloc和free是库函数，需要头文件的支持；new和delete是关键字，要编译器的支持</li><li>参数：使用new分配空间时，无需指定分配空间的大小，编译器会根据数据类型自动计算；而使用malloc申请分配空间时，则需确定所要分配空间的大小</li><li>返回值：new所分配后返回的是一个对应数据类型的指针，无需强制类型转换，符合类型安全的操作符；而malloc申请空间时，返回的是void*类型的指针，需要进行强制类型转换，转换为对象类型指针</li><li>分配失败情况：new分配失败会抛出<code>bad_alloc</code>异常，malloc分配失败则返回空指针</li><li>重载：new/delete均可进行重载，而malloc/free不能</li><li>自定义类型实现：new 首先调用 operator new() 函数申请空间（底层通过 malloc 实现），然后调用构造函数进行初始化，最后返回自定义类型的指针；delete 首先调用析构函数，然后调用 operator delete() 释放空间（底层通过 free 实现）。malloc/free 无法进行自定义类型的对象的构造和析构</li><li>内存区域：new操作符从<strong>自由存储区</strong>上为对象分配空间，而malloc则是在<strong>堆</strong>上分配空间。（<strong>自由存储区不等于堆</strong>）</li></ol><h2 id="C和C-的区别"><a href="#C和C-的区别" class="headerlink" title="C和C++的区别"></a>C和C++的区别</h2><ul><li><p>C 是面向过程的编程，特点是函数；C++ 是面向对象的编程，特点是类。（特性）</p></li><li><p>C 主要用在嵌入式开发、驱动开发和硬件直接打交道的领域；C++ 可以用于应用层的开发、用户界面开发等和操作系统直接打交道的领域。（应用领域）</p></li><li><p>C++ 继承了C的底层操作特性，增加了面向对象的机制，增加了泛型编程、异常处理、运算符重载，还增加了命名空间，避免了命名冲突。（相较于 C 的升级）</p></li></ul><h2 id="C-、Java-的联系与区别，包括语言特性、垃圾回收、应用场景等（java-的垃圾回收机制）"><a href="#C-、Java-的联系与区别，包括语言特性、垃圾回收、应用场景等（java-的垃圾回收机制）" class="headerlink" title="C++、Java 的联系与区别，包括语言特性、垃圾回收、应用场景等（java 的垃圾回收机制）"></a>C++、Java 的联系与区别，包括语言特性、垃圾回收、应用场景等（java 的垃圾回收机制）</h2><h3 id="二者在语言特性上有很大的区别："><a href="#二者在语言特性上有很大的区别：" class="headerlink" title="二者在语言特性上有很大的区别："></a>二者在语言特性上有很大的区别：</h3><ul><li>指针：C++ 可以直接操作指针，容易产生内存泄漏以及非法指针引用的问题；JAVA 并不是没有指针，虚拟机(JVM)内部还是使用了指针，只是编程人员不能直接使用指针，不能通过指针来直接访问内存，并且 JAVA 增加了内存管理机制</li><li>多重继承：C++ 支持多重继承，允许多个父类派生一个类，虽然功能很强大，但是如果使用的不当会造成很多问题，例如：菱形继承；JAVA 不支持多重继承，但允许一个类可以继承多个接口，可以实现 C++ 多重继承的功能，但又避免了多重继承带来的许多不便</li><li>数据类型和类：C++ 可以将变量或函数定义成全局，但是JAVA是完全面向对象的语言，除了基本的数据类型之外，其他的都作为类的对象，包括数组。</li></ul><h3 id="垃圾回收："><a href="#垃圾回收：" class="headerlink" title="垃圾回收："></a>垃圾回收：</h3><ul><li>JAVA 语言一个显著的特点就是垃圾回收机制，编程人员无需考虑内存管理的问题，可以有效的防止内存泄漏，有效的使用空闲的内存</li><li>JAVA 所有的对象都是用 new 操作符建立在内存堆栈上，类似于 C++ 中的 new 操作符，但是当要释放该申请的内存空间时，JAVA 自动进行内存回收操作，C++ 需要程序员自己释放内存空间，并且 JAVA 中的内存回收是以线程的方式在后台运行的，利用空闲时间。</li></ul><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul><li><p>java 运行在虚拟机上，和开发平台无关，C++ 直接编译成可执行文件，是否跨平台在于用到的编译器的特性是否有多平台的支持，</p></li><li><p>C++ 可以直接编译成可执行文件，运行效率比 JAVA 高</p></li><li><p>JAVA 主要用来开发 web 应用</p></li><li><p>C++ 主要用在嵌入式开发、网络、并发编程的方面</p></li></ul><h2 id="Struct和Class的区别"><a href="#Struct和Class的区别" class="headerlink" title="Struct和Class的区别"></a>Struct和Class的区别</h2><p>C++中的struct是对C中的struct进行了扩充，它可以包含成员函数、能够继承、也能够实现多态，而struct与class最本质的区别在于默认的访问控制：struct默认继承访问权限是<strong>public</strong>，class的默认继承访问权限是<strong>private</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//B是class，所以是private继承</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//C是struct，所以是public继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class A"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">&#123;</span><span class="token comment">//由于 B 是 struct，A的继承级别为 public(取决于B的默认继承级别)</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token comment">//由于 C 是 class，B的继承级别为 private(取决于C的默认继承级别)，所以无法访问基类B中的printB函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A ex1<span class="token punctuation">;</span>    ex1<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class A</span>    B ex2<span class="token punctuation">;</span>    ex2<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class A</span>    ex2<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class B</span>    C ex3<span class="token punctuation">;</span>    ex3<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: 'B' is not an accessible base of 'C'</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，class可以使用模板，而struct不能</p><h2 id="define和const的区别（编译阶段、安全性、内存占用等）"><a href="#define和const的区别（编译阶段、安全性、内存占用等）" class="headerlink" title="define和const的区别（编译阶段、安全性、内存占用等）"></a>define和const的区别（编译阶段、安全性、内存占用等）</h2><ul><li>编译阶段：define是在编译预处理阶段起作用，const是在编译阶段和程序运行阶段起作用</li><li>安全性：define定义的宏常量没有数据类型，只是进行简单的替换，不会进行类型安全的检测；const定义的只读变量是有类型的，会进行判断，可以避免低级错误</li><li>内存占用：define所定义的常量，在程序中使用多少次就会替换多少次，内存中有多个备份；const定义的只读变量在程序运行过程中只有一份</li><li>调试：define定义的常量不能进行调试，因为在预编译阶段就已经替换了；const定义的只读变量可以进行调试</li></ul><p>const的优点：</p><ul><li>有数据类型，在定义式可进行安全性检查</li><li>可调式</li><li>占用较少的空间</li></ul><h1 id="数据结构问题"><a href="#数据结构问题" class="headerlink" title="数据结构问题"></a>数据结构问题</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>常见的排序算法如选择、插入、冒泡、快速、归并等都是面试经常问的问题，这里也将它们代码写一下</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序<strong>O(n^2)、不稳定</strong></p><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，以此类推</p><p>不稳定原因：如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。</p><p>举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//选择排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> alen<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录本轮中最小数的下标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>                minIndex<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minIndex<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果最小数不是标兵数本身</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序(InsertionSort)，一般也被称为直接插入排序。时间复杂度为：<strong>O(N^2)</strong></p><p>对于少量元素的排序，它是一个有效的算法。插入排序是一种最简单的排序方法，它的基本思想是将一个记录插入到已经排好序的有序表中，从而一个新的、记录数增 1 的有序表</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/InsertSort-03.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> insertValue<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>insertValue<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效、<strong>稳定</strong>的排序算法，该算法是采用分治法(Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p>时间复杂度为 <strong>O(nlogn)</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/MergeSort-01.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">temp</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1<span class="token operator">=</span>start<span class="token punctuation">;</span>    <span class="token keyword">int</span> p2<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>start<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法，在平均状况下，排序 n 个项目要 <strong>Ο(nlogn)</strong> 次比较。在最坏状况下则需要 <strong>Ο(n^2)</strong> 次比较，但这种状况并不常见。</p><p><em>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序</em></p><p>算法步骤：</p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">>=</span>end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token operator">=</span>end<span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token operator">=</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">>=</span>key<span class="token punctuation">)</span>            <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key<span class="token punctuation">)</span>            <span class="token operator">++</span>l<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt; 在写这个文章的时候已经是大三的寒假了，因此也要开始为实习的工作做准备了，这里就专门开了个文章来记录我在网上找到的一些&lt;strong&gt;C++</summary>
      
    
    
    
    <category term="面试" scheme="http://sakura-pub.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://sakura-pub.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛268场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B268%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B268%E5%9C%BA/</id>
    <published>2021-11-26T05:49:01.000Z</published>
    <updated>2021-11-26T09:04:20.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛268场"><a href="#LeetCode周赛268场" class="headerlink" title="LeetCode周赛268场"></a>LeetCode周赛268场</h1><p>这周的周赛题都比较简单，前两题可以直接暴力和模拟，而第三题也是可以稍微想一下就做出来，简直不要太舒服</p><h2 id="2078-两栋颜色不同且距离最远的房子"><a href="#2078-两栋颜色不同且距离最远的房子" class="headerlink" title="2078. 两栋颜色不同且距离最远的房子"></a><a href="https://leetcode-cn.com/problems/two-furthest-houses-with-different-colors/">2078. 两栋颜色不同且距离最远的房子</a></h2><img src="https://i.loli.net/2021/11/26/oTdO5KVy9SRCjJA.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/eSAYdFw7fWrxtKg.png" style="zoom:80%;" /><p>这题的暴力解法可以直接写出来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> clen<span class="token operator">=</span>colors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>clen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>clen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时还有一个稍微贪心的做法，分三种情况</p><ol><li>如果最左边和最右边房子颜色不一样，则直接返回<code>(n-1)-0</code></li><li>固定下标为<code>0</code>位置，向后面找与它最大距离的不同颜色房子</li><li>固定下标为<code>n-1</code>位置，向前找最大距离的不同颜色房子，并与第二步的数值作比较，得出最大距离</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 如果首位颜色不同直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> colors<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 获取左边第一个不相同的位置</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取右边第一个不相同的位置</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 0～right 的长度 和 left～length-1 的长度取最大值</span>        <span class="token comment">// 因为要最大，所以不可能在中间，要么就是左边，要么就是右边</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2079-给植物浇水"><a href="#2079-给植物浇水" class="headerlink" title="2079. 给植物浇水"></a><a href="https://leetcode-cn.com/problems/watering-plants/">2079. 给植物浇水</a></h2><img src="https://i.loli.net/2021/11/26/v8UbFT4hyziVG7P.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/k9UMTJw5QI7jAx6.png" style="zoom:80%;" /><p>这道题是一个模拟题，直接按照题意做就好了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">wateringPlants</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> plants<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> plen<span class="token operator">=</span>plants<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>plen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fullWater<span class="token operator">=</span>capacity<span class="token punctuation">;</span><span class="token comment">//水池</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                capacity<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//不够水</span>                res<span class="token operator">+=</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                capacity<span class="token operator">=</span>fullWater<span class="token punctuation">;</span>                capacity<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2080-区间内查询数字的频率"><a href="#2080-区间内查询数字的频率" class="headerlink" title="2080. 区间内查询数字的频率"></a><a href="https://leetcode-cn.com/problems/range-frequency-queries/">2080. 区间内查询数字的频率</a></h2><img src="https://i.loli.net/2021/11/26/qM9VxosD2Zf7caS.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/uSXRqy7Mb9lhnYx.png" style="zoom:80%;" /><p>这道题需要提前处理一下，存放的容器有两种方案<code>vector</code>和<code>unordered_map</code></p><p>预处理是为了记录每个数在哪些位置出现过</p><p>两个版本在<code>query()</code>函数查找都运用了C++算法的内置函数<code>lower_bound()</code>和<code>upper_bound()</code>，这里可以了解一下它们的作用，它们都是运用了二分查找方法，需要用在有特定顺序的容器中</p><p>这里举个栗子，在数组<code>vector&lt;int&gt; arr=[10 10 10 20 20 20 30 30]</code>，然后分别调用两个函数，并且第三个参数<code>val</code>填入<code>20</code>，最后输出迭代器的位置<code>iter-arr.begin()</code></p><ul><li><code>lower_bound()</code>：找出容器中第一个大于等于<code>val</code>的数的位置，在这个例子中我们输出迭代器的位置为<code>3</code></li><li><code>upper_bound()</code>：找出容器中第一个大于<code>val</code>的数的位置，在这个例子中输出的迭代器位置为<code>6</code></li></ul><p><code>unordered_map</code>版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//unordered_map</span><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> map<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>arr<span class="token operator">=</span>vec<span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//预处理</span>            <span class="token keyword">int</span> cur<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录每个数字分别出现的位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> curArr<span class="token operator">=</span>map<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>curArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>alen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">auto</span> l<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>curArr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curArr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> r<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>curArr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curArr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token operator">-</span>l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your RangeFreqQuery object will be instantiated and called as such: * RangeFreqQuery* obj = new RangeFreqQuery(arr); * int param_1 = obj->query(left,right,value); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector&lt;vector&lt;int&gt;&gt;</code>版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span>  vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> data<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">upper_bound</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛268场&quot;&gt;&lt;a href=&quot;#LeetCode周赛268场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛268场&quot;&gt;&lt;/a&gt;LeetCode周赛268场&lt;/h1&gt;&lt;p&gt;这周的周赛题都比较简单，前两题可以直接暴力和</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛266场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B266%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B266%E5%9C%BA/</id>
    <published>2021-11-09T05:10:50.000Z</published>
    <updated>2021-11-09T10:57:56.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛266场"><a href="#LeetCode周赛266场" class="headerlink" title="LeetCode周赛266场"></a>LeetCode周赛266场</h1><p>本周的周赛题目看上去挺难的，但赛后看了一下别人的解答发现其实也并不复杂，终究还是得多做题多思考💦</p><h2 id="2062-统计字符串中的元音子字符串"><a href="#2062-统计字符串中的元音子字符串" class="headerlink" title="2062. 统计字符串中的元音子字符串"></a><a href="https://leetcode-cn.com/problems/count-vowel-substrings-of-a-string/">2062. 统计字符串中的元音子字符串</a></h2><img src="https://i.loli.net/2021/11/09/ng5oS9MrtU3XKDJ.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/QAnk9YMCWuNGDc3.png" style="zoom:80%;" /><p>第一题经典可以暴力解法，但需要注意看清题目，我在做的时候第一次看题跳着看导致看错了题意，所以简单题更应该小心，不能太着急</p><p>下面是我的暴力解法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countVowelSubstrings</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> w<span class="token operator">=</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">bool</span> sig<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    w<span class="token operator">=</span>word<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>temp<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>sig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2063-所有子字符串中的元音"><a href="#2063-所有子字符串中的元音" class="headerlink" title="2063. 所有子字符串中的元音"></a><a href="https://leetcode-cn.com/problems/vowels-of-all-substrings/">2063. 所有子字符串中的元音</a></h2><img src="https://i.loli.net/2021/11/09/ojNTOd4J9l2VuFz.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/GbS93UM7IRAd4Kt.png" style="zoom:80%;" /><p>这道题在竞赛做的时候觉得挺复杂挺难的，但看了题解之后其实并不难，只是一道dp问题，只可惜当时做的时候没有想到</p><p>这里的dp转移条件可以直接当成返回条件，即<code>res</code>，但是要注意它是一个<code>long long</code>类型的</p><p>随后是状态转移方程，我们在遍历字符串的时候，设当前遍历到的字符为<code>cur</code>，如果<code>cur</code>是元音字符，则到此字符为止的<code>res</code>状态是由前一个字符的<code>res</code>状态再加上当前包含<code>cur</code>的子字符串个数，即<code>if(cur==元音) -&gt; res=res+包含cur子串个数</code></p><p>那么现在问题来到了怎么求包含<code>cur</code>子串个数问题，我们可以将<code>cur</code>在字符串中位置视为中点，例如它的位置为<code>i</code></p><p>则在它左边可以选择第<em>0,1,2,3…i-1,i</em>个字符与<code>cur</code>构成一个子串，这里一共有<code>i+1</code>种情况</p><p>在它右边可以选择<em>i,i+1,i+2….n-2,n-1</em>，一共<code>n-i</code>种情况</p><p>总共加起来的子字符串个数就是<code>(i+1)(n-i)</code>，这里为什么要用乘法呢，是因为字符<code>cur</code>两边可以互相连接，例如在<em>a b c d e</em>字符串中，以<em>b</em>为中心，可以构成以下子串 <em>a b c</em> 或  <em>b c d</em> 等，两边选择一些字符然后构成其中一个子串，所以这是数学中排列组合的 <strong>组合问题</strong></p><p>了解了这些就可以很轻易写出代码来了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">countVowels</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> vowels<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> cur<span class="token operator">=</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>vowels<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//遍历到的字母是元音字母</span>                    res<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>wlen<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2064-分配给商店的最多商品的最小值"><a href="#2064-分配给商店的最多商品的最小值" class="headerlink" title="2064. 分配给商店的最多商品的最小值"></a><a href="https://leetcode-cn.com/problems/minimized-maximum-of-products-distributed-to-any-store/">2064. 分配给商店的最多商品的最小值</a></h2><img src="https://i.loli.net/2021/11/09/L8MljnYs4i1cRdp.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/k3mcabiyPAlSfzv.png" style="zoom:80%;" /><p>这道题也是当时做不出来的，觉得题目似懂非懂的样子，导致也没有思路</p><p>其实这道题本质是一个二分题，要找出可以满足分配店铺情况下，每家店最大可以分配的商品数</p><p>我们就可以通过循环不断寻找这个值，这里设每一回合分配<code>mid</code>个商品时，最后需要的店铺数为<code>cnt</code>，在一轮分配结束后，判断<code>cnt</code>与题目所给的<code>n</code>的关系</p><p>如果：</p><ul><li><code>cnt</code>&gt;<code>n</code>，则一定不合法，因为店铺数量过多证明商品分配太少了，可以再进一步压缩店铺数</li><li><code>cnt</code>=<code>n</code>，刚好满足分配店铺数要求，但是要注意商品数不能有剩余，即<code>mod=0</code></li><li><code>cnt</code>&lt;<code>n</code>，说明不能对每个商店都分配 mid 商品，但剩余的商品种类必须满足未能分配的商店 即 mod &lt;= n - cnt。我们可以把所有剩下的商品分配到剩余的商店中，若仍有商店剩余就不分配商品，则每种剩余的商品数量一定小于mid</li></ul><p>下面是我后来自己写的代码，要注意的是二分的界限，如每次更新时的操作等，还有就是最后返回的是<code>l</code>，我也试过了若直接返回<code>mid</code>是不行的（❗这里不知道为什么）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//注意初始值条件</span>        <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>quantities<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>quantities<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>quantities<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> cur<span class="token operator">=</span>i<span class="token operator">/</span>mid<span class="token punctuation">;</span><span class="token comment">//求出当前商品按mid件一家店可以分多少店</span>                cnt<span class="token operator">+=</span>cur<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>mid<span class="token punctuation">)</span><span class="token comment">//如果还有剩余商品没有给分配，则分配的店铺量要加一</span>                    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>n<span class="token punctuation">)</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//返回条件要注意</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个简略一点的代码，别人写的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>quantities<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quantities<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">:</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> mid<span class="token punctuation">;</span><span class="token comment">//这里是向上取整操作，即分配剩余的商品再加一个商店来放它</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛266场&quot;&gt;&lt;a href=&quot;#LeetCode周赛266场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛266场&quot;&gt;&lt;/a&gt;LeetCode周赛266场&lt;/h1&gt;&lt;p&gt;本周的周赛题目看上去挺难的，但赛后看了一下别</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>WebServer项目代码</title>
    <link href="http://sakura-pub.top/WebServer/WebServer%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/"/>
    <id>http://sakura-pub.top/WebServer/WebServer%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/</id>
    <published>2021-11-02T11:21:52.000Z</published>
    <updated>2022-01-11T01:11:23.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebServer项目代码"><a href="#WebServer项目代码" class="headerlink" title="WebServer项目代码"></a>WebServer项目代码</h1><p>这里专门来存放一下我正在做的IO多路复用高并发服务器<code>WebServer</code>的代码，方便在平板上看</p><h1 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h1><h2 id="http-conn-h👇"><a href="#http-conn-h👇" class="headerlink" title="http_conn.h👇"></a>http_conn.h👇</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HTTPCONNECTION_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HTTPCONNECTION_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../lock/locker.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../CGImysql/sql_connection_pool.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../timer/lst_timer.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../log/log.h"</span></span><span class="token keyword">class</span> <span class="token class-name">http_conn</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> FILENAME_LEN <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> READ_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> WRITE_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">METHOD</span>    <span class="token punctuation">&#123;</span>        GET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        POST<span class="token punctuation">,</span>        HEAD<span class="token punctuation">,</span>        PUT<span class="token punctuation">,</span>        DELETE<span class="token punctuation">,</span>        TRACE<span class="token punctuation">,</span>        OPTIONS<span class="token punctuation">,</span>        CONNECT<span class="token punctuation">,</span>        PATH    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">CHECK_STATE</span>    <span class="token punctuation">&#123;</span>        CHECK_STATE_REQUESTLINE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        CHECK_STATE_HEADER<span class="token punctuation">,</span>        CHECK_STATE_CONTENT    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">HTTP_CODE</span>    <span class="token punctuation">&#123;</span>        NO_REQUEST<span class="token punctuation">,</span>        GET_REQUEST<span class="token punctuation">,</span>        BAD_REQUEST<span class="token punctuation">,</span>        NO_RESOURCE<span class="token punctuation">,</span>        FORBIDDEN_REQUEST<span class="token punctuation">,</span>        FILE_REQUEST<span class="token punctuation">,</span>        INTERNAL_ERROR<span class="token punctuation">,</span>        CLOSED_CONNECTION    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">LINE_STATUS</span>    <span class="token punctuation">&#123;</span>        LINE_OK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        LINE_BAD<span class="token punctuation">,</span>        LINE_OPEN    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">http_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">http_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> sockaddr_in <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passwd<span class="token punctuation">,</span> string sqlname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token keyword">bool</span> real_close <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sockaddr_in <span class="token operator">*</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>m_address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">initmysql_result</span><span class="token punctuation">(</span>connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timer_flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> improv<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> m_read_buf <span class="token operator">+</span> m_start_line<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    LINE_STATUS <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_user_count<span class="token punctuation">;</span>    MYSQL <span class="token operator">*</span>mysql<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_state<span class="token punctuation">;</span>  <span class="token comment">//读为0, 写为1</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_sockfd<span class="token punctuation">;</span>    sockaddr_in m_address<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_read_buf<span class="token punctuation">[</span>READ_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_read_idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_checked_idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_start_line<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_write_buf<span class="token punctuation">[</span>WRITE_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_write_idx<span class="token punctuation">;</span>    CHECK_STATE m_check_state<span class="token punctuation">;</span>    METHOD m_method<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_real_file<span class="token punctuation">[</span>FILENAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_url<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_version<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_host<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_content_length<span class="token punctuation">;</span>    <span class="token keyword">bool</span> m_linger<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_file_address<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stat</span> m_file_stat<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> m_iv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_iv_count<span class="token punctuation">;</span>    <span class="token keyword">int</span> cgi<span class="token punctuation">;</span>        <span class="token comment">//是否启用的POST</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_string<span class="token punctuation">;</span> <span class="token comment">//存储请求头数据</span>    <span class="token keyword">int</span> bytes_to_send<span class="token punctuation">;</span>    <span class="token keyword">int</span> bytes_have_send<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>doc_root<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> m_users<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_user<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_passwd<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http-conn-cpp👇"><a href="#http-conn-cpp👇" class="headerlink" title="http_conn.cpp👇"></a>http_conn.cpp👇</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"http_conn.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token comment">//定义http响应的一些状态信息</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ok_200_title <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_400_title <span class="token operator">=</span> <span class="token string">"Bad Request"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_400_form <span class="token operator">=</span> <span class="token string">"Your request has bad syntax or is inherently impossible to staisfy.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_403_title <span class="token operator">=</span> <span class="token string">"Forbidden"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_403_form <span class="token operator">=</span> <span class="token string">"You do not have permission to get file form this server.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_404_title <span class="token operator">=</span> <span class="token string">"Not Found"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_404_form <span class="token operator">=</span> <span class="token string">"The requested file was not found on this server.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_500_title <span class="token operator">=</span> <span class="token string">"Internal Error"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_500_form <span class="token operator">=</span> <span class="token string">"There was an unusual problem serving the request file.\n"</span><span class="token punctuation">;</span>locker m_lock<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> users<span class="token punctuation">;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">initmysql_result</span><span class="token punctuation">(</span>connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//先从连接池中取一个连接</span>    MYSQL <span class="token operator">*</span>mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在user表中检索username，passwd数据，浏览器端输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> <span class="token string">"SELECT username,passwd FROM user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"SELECT error:%s\n"</span><span class="token punctuation">,</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从表中检索完整的结果集</span>    MYSQL_RES <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回结果集中的列数</span>    <span class="token keyword">int</span> num_fields <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回所有字段结构的数组</span>    MYSQL_FIELD <span class="token operator">*</span>fields <span class="token operator">=</span> <span class="token function">mysql_fetch_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从结果集中获取下一行，将对应的用户名和密码，存入map中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>MYSQL_ROW row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string <span class="token function">temp1</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">temp2</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> temp2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//对文件描述符设置非阻塞</span><span class="token keyword">int</span> <span class="token function">setnonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old_option <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> new_option <span class="token operator">=</span> old_option <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> new_option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> old_option<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将内核事件表注册读事件，ET模式，选择开启EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">addfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">bool</span> one_shot<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> TRIGMode<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>one_shot<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">|=</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setnonblocking</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从内核时间表删除描述符</span><span class="token keyword">void</span> <span class="token function">removefd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_DEL<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将事件重置为EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">modfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> ev<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> TRIGMode<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> ev <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> ev <span class="token operator">|</span> EPOLLONESHOT <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_MOD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> http_conn<span class="token operator">::</span>m_user_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> http_conn<span class="token operator">::</span>m_epollfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//关闭连接，关闭一个连接，客户总量减一</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token keyword">bool</span> real_close<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>real_close <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m_sockfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"close %d\n"</span><span class="token punctuation">,</span> m_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removefd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_sockfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        m_user_count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化连接,外部调用初始化套接字地址</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> sockaddr_in <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">,</span>                     <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passwd<span class="token punctuation">,</span> string sqlname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_sockfd <span class="token operator">=</span> sockfd<span class="token punctuation">;</span>    m_address <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> sockfd<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_user_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//当浏览器出现连接重置时，可能是网站根目录出错或http响应格式出错或者访问的文件中内容完全为空</span>    doc_root <span class="token operator">=</span> root<span class="token punctuation">;</span>    m_TRIGMode <span class="token operator">=</span> TRIGMode<span class="token punctuation">;</span>    m_close_log <span class="token operator">=</span> close_log<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_user<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_passwd<span class="token punctuation">,</span> passwd<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_name<span class="token punctuation">,</span> sqlname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化新接受的连接</span><span class="token comment">//check_state默认为分析请求行状态</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    bytes_have_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_check_state <span class="token operator">=</span> CHECK_STATE_REQUESTLINE<span class="token punctuation">;</span>    m_linger <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    m_method <span class="token operator">=</span> GET<span class="token punctuation">;</span>    m_url <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_content_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_host <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_start_line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_checked_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_read_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_write_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cgi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_read_buf<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> READ_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_write_buf<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> FILENAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从状态机，用于分析出一行内容</span><span class="token comment">//返回值为行的读取状态，有LINE_OK,LINE_BAD,LINE_OPEN</span>http_conn<span class="token operator">::</span>LINE_STATUS http_conn<span class="token operator">::</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> m_checked_idx <span class="token operator">&lt;</span> m_read_idx<span class="token punctuation">;</span> <span class="token operator">++</span>m_checked_idx<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_checked_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> m_read_idx<span class="token punctuation">)</span>                <span class="token keyword">return</span> LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_checked_idx <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> LINE_OPEN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环读取客户数据，直到无数据可读或对方关闭连接</span><span class="token comment">//非阻塞ET工作模式下，需要一次性将数据读完</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_idx <span class="token operator">>=</span> READ_BUFFER_SIZE<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> bytes_read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//LT读取数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET读数据</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求行，获得请求方法，目标url及http版本号</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_url <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_url<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>m_url<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        m_method <span class="token operator">=</span> GET<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_method <span class="token operator">=</span> POST<span class="token punctuation">;</span>        cgi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    m_url <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_version <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_version<span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token operator">*</span>m_version<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    m_version <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"http://"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_url <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>        m_url <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_url <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>        m_url <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_url <span class="token operator">||</span> m_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token comment">//当url为/时，显示判断界面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"judge.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_check_state <span class="token operator">=</span> CHECK_STATE_HEADER<span class="token punctuation">;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求的一个头部信息</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_check_state <span class="token operator">=</span> CHECK_STATE_CONTENT<span class="token punctuation">;</span>            <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Connection:"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">11</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_linger <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Content-length:"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">15</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_content_length <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Host:"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_host <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"oop!unknow header: %s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断http请求是否被完整读入</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_idx <span class="token operator">>=</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">+</span> m_checked_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text<span class="token punctuation">[</span>m_content_length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment">//POST请求中最后为输入的用户名和密码</span>        m_string <span class="token operator">=</span> text<span class="token punctuation">;</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LINE_STATUS line_status <span class="token operator">=</span> LINE_OK<span class="token punctuation">;</span>    HTTP_CODE ret <span class="token operator">=</span> NO_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>text <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_check_state <span class="token operator">==</span> CHECK_STATE_CONTENT <span class="token operator">&amp;&amp;</span> line_status <span class="token operator">==</span> LINE_OK<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line_status <span class="token operator">=</span> <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> LINE_OK<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">=</span> <span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_start_line <span class="token operator">=</span> m_checked_idx<span class="token punctuation">;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>m_check_state<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> CHECK_STATE_REQUESTLINE<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_request_line</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> CHECK_STATE_HEADER<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_headers</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> GET_REQUEST<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> CHECK_STATE_CONTENT<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_content</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> GET_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            line_status <span class="token operator">=</span> LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> INTERNAL_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("m_url:%s\n", m_url);</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理cgi</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cgi <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//根据标志判断是登录检测还是注册检测</span>        <span class="token keyword">char</span> flag <span class="token operator">=</span> m_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> m_url <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> FILENAME_LEN <span class="token operator">-</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将用户名和密码提取出来</span>        <span class="token comment">//user=123&amp;passwd=123</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            name<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        name<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            password<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        password<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是注册，先检测数据库中是否有重名的</span>            <span class="token comment">//没有重名的，进行增加数据</span>            <span class="token keyword">char</span> <span class="token operator">*</span>sql_insert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"INSERT INTO user(username, passwd) VALUES("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"', '"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> sql_insert<span class="token punctuation">)</span><span class="token punctuation">;</span>                users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m_lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果是登录，直接判断</span>        <span class="token comment">//若浏览器端输入的用户名和密码在表中可以查找到，返回1，否则返回0</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> users<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">==</span> password<span class="token punctuation">)</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/welcome.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/logError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/register.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/picture.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/video.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'7'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/fans.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url<span class="token punctuation">,</span> FILENAME_LEN <span class="token operator">-</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_file_stat<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> NO_RESOURCE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IROTH<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> FORBIDDEN_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_file_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> FILE_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_file_address<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">munmap</span><span class="token punctuation">(</span>m_file_address<span class="token punctuation">,</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_file_address <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_to_send <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> <span class="token function">writev</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_iv<span class="token punctuation">,</span> m_iv_count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        bytes_have_send <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        bytes_to_send <span class="token operator">-=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_have_send <span class="token operator">>=</span> m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_file_address <span class="token operator">+</span> <span class="token punctuation">(</span>bytes_have_send <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> bytes_to_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf <span class="token operator">+</span> bytes_have_send<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">-</span> bytes_have_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_to_send <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_linger<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_write_idx <span class="token operator">>=</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    va_list arg_list<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>m_write_buf <span class="token operator">+</span> m_write_idx<span class="token punctuation">,</span> WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">,</span> format<span class="token punctuation">,</span> arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token punctuation">(</span>WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    m_write_idx <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"request:%s"</span><span class="token punctuation">,</span> m_write_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s %d %s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span>content_len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Length:%d\r\n"</span><span class="token punctuation">,</span> content_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Type:%s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Connection:%s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m_linger <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"keep-alive"</span> <span class="token operator">:</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> INTERNAL_ERROR<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> error_500_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> BAD_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> error_404_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> FORBIDDEN_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> error_403_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> FILE_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> ok_200_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_file_address<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            m_iv_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            bytes_to_send <span class="token operator">=</span> m_write_idx <span class="token operator">+</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ok_string <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf<span class="token punctuation">;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    m_iv_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HTTP_CODE read_ret <span class="token operator">=</span> <span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read_ret <span class="token operator">==</span> NO_REQUEST<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> write_ret <span class="token operator">=</span> <span class="token function">process_write</span><span class="token punctuation">(</span>read_ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>write_ret<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="WebServer-h和WebServer-cpp👇"><a href="#WebServer-h和WebServer-cpp👇" class="headerlink" title="WebServer.h和WebServer.cpp👇"></a>WebServer.h和WebServer.cpp👇</h1><h2 id="WebServer-h"><a href="#WebServer-h" class="headerlink" title="WebServer.h"></a>WebServer.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">WEBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WEBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./threadpool/threadpool.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./http/http_conn.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_FD <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">;</span>           <span class="token comment">//最大文件描述符</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_EVENT_NUMBER <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment">//最大事件数</span><span class="token keyword">const</span> <span class="token keyword">int</span> TIMESLOT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>             <span class="token comment">//最小超时单位</span><span class="token keyword">class</span> <span class="token class-name">WebServer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port <span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passWord<span class="token punctuation">,</span> string databaseName<span class="token punctuation">,</span>              <span class="token keyword">int</span> log_write <span class="token punctuation">,</span> <span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span> <span class="token keyword">int</span> trigmode<span class="token punctuation">,</span> <span class="token keyword">int</span> sql_num<span class="token punctuation">,</span>              <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span> <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dealwithsignal</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> timeout<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dealwithread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dealwithwrite</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//基础</span>    <span class="token keyword">int</span> m_port<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_root<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_log_write<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_actormodel<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_pipefd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    http_conn <span class="token operator">*</span>users<span class="token punctuation">;</span>    <span class="token comment">//数据库相关</span>    connection_pool <span class="token operator">*</span>m_connPool<span class="token punctuation">;</span>    string m_user<span class="token punctuation">;</span>         <span class="token comment">//登陆数据库用户名</span>    string m_passWord<span class="token punctuation">;</span>     <span class="token comment">//登陆数据库密码</span>    string m_databaseName<span class="token punctuation">;</span> <span class="token comment">//使用数据库名</span>    <span class="token keyword">int</span> m_sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池相关</span>    threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span> <span class="token operator">*</span>m_pool<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_thread_num<span class="token punctuation">;</span>    <span class="token comment">//epoll_event相关</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_listenfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_OPT_LINGER<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_LISTENTrigmode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//定时器相关</span>    client_data <span class="token operator">*</span>users_timer<span class="token punctuation">;</span>    Utils utils<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebServer-cpp"><a href="#WebServer-cpp" class="headerlink" title="WebServer.cpp"></a>WebServer.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//http_conn类对象</span>    users <span class="token operator">=</span> <span class="token keyword">new</span> http_conn<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//root文件夹路径</span>    <span class="token keyword">char</span> server_path<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">getcwd</span><span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> root<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/root"</span><span class="token punctuation">;</span>    m_root <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>server_path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span> server_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定时器</span>    users_timer <span class="token operator">=</span> <span class="token keyword">new</span> client_data<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users_timer<span class="token punctuation">;</span>    <span class="token keyword">delete</span> m_pool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passWord<span class="token punctuation">,</span> string databaseName<span class="token punctuation">,</span> <span class="token keyword">int</span> log_write<span class="token punctuation">,</span>                      <span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span> <span class="token keyword">int</span> trigmode<span class="token punctuation">,</span> <span class="token keyword">int</span> sql_num<span class="token punctuation">,</span> <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span> <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_port <span class="token operator">=</span> port<span class="token punctuation">;</span>    m_user <span class="token operator">=</span> user<span class="token punctuation">;</span>    m_passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>    m_databaseName <span class="token operator">=</span> databaseName<span class="token punctuation">;</span>    m_sql_num <span class="token operator">=</span> sql_num<span class="token punctuation">;</span>    m_thread_num <span class="token operator">=</span> thread_num<span class="token punctuation">;</span>    m_log_write <span class="token operator">=</span> log_write<span class="token punctuation">;</span>    m_OPT_LINGER <span class="token operator">=</span> opt_linger<span class="token punctuation">;</span>    m_TRIGMode <span class="token operator">=</span> trigmode<span class="token punctuation">;</span>    m_close_log <span class="token operator">=</span> close_log<span class="token punctuation">;</span>    m_actormodel <span class="token operator">=</span> actor_model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//LT + LT</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//LT + ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET + LT</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET + ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化日志</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_log_write<span class="token punctuation">)</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化数据库连接池</span>    m_connPool <span class="token operator">=</span> connection_pool<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_connPool<span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> m_user<span class="token punctuation">,</span> m_passWord<span class="token punctuation">,</span> m_databaseName<span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">,</span> m_sql_num<span class="token punctuation">,</span> m_close_log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化数据库读取表</span>    users<span class="token operator">-></span><span class="token function">initmysql_result</span><span class="token punctuation">(</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//线程池</span>    m_pool <span class="token operator">=</span> <span class="token keyword">new</span> threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span><span class="token punctuation">(</span>m_actormodel<span class="token punctuation">,</span> m_connPool<span class="token punctuation">,</span> m_thread_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//网络编程基础步骤</span>    m_listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_listenfd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭连接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_OPT_LINGER<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_OPT_LINGER<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> address<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>m_port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>flag<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//epoll创建内核事件表</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    m_epollfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_epollfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_listenfd<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> m_LISTENTrigmode<span class="token punctuation">)</span><span class="token punctuation">;</span>    http_conn<span class="token operator">::</span>m_epollfd <span class="token operator">=</span> m_epollfd<span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">socketpair</span><span class="token punctuation">(</span>PF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">setnonblocking</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGPIPE<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGTERM<span class="token punctuation">,</span> utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//工具类,信号和描述符基础操作</span>    Utils<span class="token operator">::</span>u_pipefd <span class="token operator">=</span> m_pipefd<span class="token punctuation">;</span>    Utils<span class="token operator">::</span>u_epollfd <span class="token operator">=</span> m_epollfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    users<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> m_root<span class="token punctuation">,</span> m_CONNTrigmode<span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> m_user<span class="token punctuation">,</span> m_passWord<span class="token punctuation">,</span> m_databaseName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化client_data数据</span>    <span class="token comment">//创建定时器，设置回调函数和超时时间，绑定用户数据，将定时器添加到链表中</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>address <span class="token operator">=</span> client_address<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd <span class="token operator">=</span> connfd<span class="token punctuation">;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> util_timer<span class="token punctuation">;</span>    timer<span class="token operator">-></span>user_data <span class="token operator">=</span> <span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>cb_func <span class="token operator">=</span> cb_func<span class="token punctuation">;</span>    time_t cur <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> TIMESLOT<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> timer<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//若有数据传输，则将定时器往后延迟3个单位</span><span class="token comment">//并对新的定时器在链表上的位置进行调整</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    time_t cur <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> TIMESLOT<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"adjust timer once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    timer<span class="token operator">-></span><span class="token function">cb_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">del_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"close fd %d"</span><span class="token punctuation">,</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>    socklen_t client_addrlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_LISTENTrigmode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span> <span class="token string">"accept error"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count <span class="token operator">>=</span> MAX_FD<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span> <span class="token string">"accept error"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count <span class="token operator">>=</span> MAX_FD<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithsignal</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">&amp;</span>timeout<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">&amp;</span>stop_server<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sig<span class="token punctuation">;</span>    <span class="token keyword">char</span> signals<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> signals<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>signals<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ret<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> SIGALRM<span class="token operator">:</span>            <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> SIGTERM<span class="token operator">:</span>            <span class="token punctuation">&#123;</span>                stop_server <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"deal with the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>            m_pool<span class="token operator">-></span><span class="token function">append_p</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithwrite</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"send data to the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> stop_server <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop_server<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENT_NUMBER<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"epoll failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sockfd <span class="token operator">=</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token comment">//处理新到的客户连接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_listenfd<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>EPOLLRDHUP <span class="token operator">|</span> EPOLLHUP <span class="token operator">|</span> EPOLLERR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//服务器端关闭连接，移除对应的定时器</span>                util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>                <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理信号</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">dealwithsignal</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"dealclientdata failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理客户连接上接收到的数据</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dealwithread</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dealwithwrite</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">timer_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"timer tick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Config-h和Config-cpp👇"><a href="#Config-h和Config-cpp👇" class="headerlink" title="Config.h和Config.cpp👇"></a>Config.h和Config.cpp👇</h1><h2 id="Config-h"><a href="#Config-h" class="headerlink" title="Config.h"></a>Config.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONFIG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//端口号</span>    <span class="token keyword">int</span> PORT<span class="token punctuation">;</span>    <span class="token comment">//日志写入方式</span>    <span class="token keyword">int</span> LOGWrite<span class="token punctuation">;</span>    <span class="token comment">//触发组合模式</span>    <span class="token keyword">int</span> TRIGMode<span class="token punctuation">;</span>    <span class="token comment">//listenfd触发模式</span>    <span class="token keyword">int</span> LISTENTrigmode<span class="token punctuation">;</span>    <span class="token comment">//connfd触发模式</span>    <span class="token keyword">int</span> CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//优雅关闭链接</span>    <span class="token keyword">int</span> OPT_LINGER<span class="token punctuation">;</span>    <span class="token comment">//数据库连接池数量</span>    <span class="token keyword">int</span> sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池内的线程数量</span>    <span class="token keyword">int</span> thread_num<span class="token punctuation">;</span>    <span class="token comment">//是否关闭日志</span>    <span class="token keyword">int</span> close_log<span class="token punctuation">;</span>    <span class="token comment">//并发模型选择</span>    <span class="token keyword">int</span> actor_model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Config-cpp"><a href="#Config-cpp" class="headerlink" title="Config.cpp"></a>Config.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token class-name">Config</span><span class="token operator">::</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//端口号,默认9006</span>    PORT <span class="token operator">=</span> <span class="token number">9006</span><span class="token punctuation">;</span>    <span class="token comment">//日志写入方式，默认同步</span>    LOGWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//触发组合模式,默认listenfd LT + connfd LT</span>    TRIGMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//listenfd触发模式，默认LT</span>    LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//connfd触发模式，默认LT</span>    CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭链接，默认不使用</span>    OPT_LINGER <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//数据库连接池数量,默认8</span>    sql_num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//线程池内的线程数量,默认8</span>    thread_num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//关闭日志,默认不关闭</span>    close_log <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//并发模型,默认是proactor</span>    actor_model <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Config</span><span class="token operator">::</span><span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"p:l:m:o:s:t:c:a:"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'p'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            PORT <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            LOGWrite <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            TRIGMode <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'o'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            OPT_LINGER <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            sql_num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            thread_num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'c'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            close_log <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            actor_model <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WebServer项目代码&quot;&gt;&lt;a href=&quot;#WebServer项目代码&quot; class=&quot;headerlink&quot; title=&quot;WebServer项目代码&quot;&gt;&lt;/a&gt;WebServer项目代码&lt;/h1&gt;&lt;p&gt;这里专门来存放一下我正在做的IO多路复用高并发服务器</summary>
      
    
    
    
    <category term="项目" scheme="http://sakura-pub.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="WebServer" scheme="http://sakura-pub.top/tags/WebServer/"/>
    
    <category term="项目" scheme="http://sakura-pub.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛265场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B265%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B265%E5%9C%BA/</id>
    <published>2021-11-01T12:07:38.000Z</published>
    <updated>2021-11-01T12:56:31.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第265场"><a href="#LeetCode周赛第265场" class="headerlink" title="LeetCode周赛第265场"></a>LeetCode周赛第265场</h1><p>终于有时间来认认真真参加一次周赛了，前几周都是断断续续地参加，好几次都是有会要开给冲突了</p><p>本周周赛比较简单，第一、二题都是送分题，只是第二题稍微麻烦一些，然后第三题需要思考一下，但我做的时候并没有思路，所以这次重点来看第三题</p><h2 id="2057-值相等的最小索引"><a href="#2057-值相等的最小索引" class="headerlink" title="2057. 值相等的最小索引"></a><a href="https://leetcode-cn.com/problems/smallest-index-with-equal-value/">2057. 值相等的最小索引</a></h2><p>首先是简单题，照样也是一道送分题，而且这道题一分钟之内就可以写完，感觉不要太爽</p><img src="https://i.loli.net/2021/11/01/2a7lsy64WCNFXhT.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">smallestEqual</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2058-找出临界点之间的最小和最大距离"><a href="#2058-找出临界点之间的最小和最大距离" class="headerlink" title="2058. 找出临界点之间的最小和最大距离"></a><a href="https://leetcode-cn.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/">2058. 找出临界点之间的最小和最大距离</a></h2><p>这道题我在做的时候也做出来了，思路比较好想，就是代码有点多，比较麻烦</p><p>同时在一开始看题目是快速看的，看错了返回条件，好险是在测试用例时发现了，所以题目长的时候更应该慢慢看题目，不要着急</p><img src="https://i.loli.net/2021/11/01/zK8uh7MiqBbFsYx.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/01/ismdITA5bCnE8w9.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/01/CEGDgenFLxi8NqM.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nodesBetweenCriticalPoints</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> lst<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> minIndex<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token operator">&lt;</span>lst<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>val<span class="token operator">&lt;</span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span>                minIndex<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token operator">></span>lst<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>val<span class="token operator">></span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span>                minIndex<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        lst<span class="token operator">=</span>lst<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>minIndex<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>alen<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>minIndex<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>minIndex<span class="token punctuation">[</span>alen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>minIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> m<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span>minIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minIndex<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                m<span class="token operator">=</span>temp<span class="token operator">&lt;</span>m<span class="token operator">?</span>temp<span class="token operator">:</span>m<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2059-转化数字的最小运算数"><a href="#2059-转化数字的最小运算数" class="headerlink" title="2059. 转化数字的最小运算数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/">2059. 转化数字的最小运算数</a></h2><p>这道题在竞赛时看懂了题目（终于看懂第三题了，泪目😭），但还是没有思路，所以打算竞赛时间过后来复习</p><p>赛后我看了<a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/solution/zhuan-hua-shu-zi-de-zui-xiao-yun-suan-sh-kju7/">官方题解</a>，思路其实还是很容易的，利用了队列来实现<strong>广度优先遍历</strong>，队列中每个元素的类型是一个<code>pair&lt;int,int&gt;</code>，记录的分别是<code>[计算结果，得出该结果所用的步数]</code></p><p>每一次遍历从队列中取出第一个值<code>x</code>，并将其进行<code>+</code>、<code>-</code>、<code>^</code>三种计算，得出结果<code>nx</code>，然后分为四种情况：</p><ul><li>如果<code>nx</code>刚好为我们要求的目标<code>goal</code>，直接返回步数step+1</li><li><code>nx</code>不在题目所给定的[1,1000]范围内，直接跳过，不进行操作</li><li><code>nx</code>在范围内，但是前面计算的数中已经出现过这个结果了，也是直接跳过，不进行操作（❗ 这里就要求我们额外记录一下之前出现的结果，我用的是<code>vector&lt;bool&gt;</code>数组）</li><li><code>nx</code>在范围内，前面也没有出现过这个数，则将得出的<code>nx</code>以<code>pair</code>的方式加到队列中</li></ul><p>❗ 另外一个要注意的是，由于题目还要求计算的数要利用给定数组<code>nums</code>中的数，所以这里要两层遍历，一层是三个操作符，另一层是和<code>nums</code>中的各个数计算</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> goal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span> ops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// 运算符列表</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 可操作范围内整数的访问情况</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 枚举数组中的元素和操作符并计算新生成的数值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> op<span class="token operator">:</span> ops<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> nx <span class="token operator">=</span> <span class="token function">op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果新生成的数值等于目标值，则返回对应操作数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">==</span> goal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 如果新生成的数值位于可操作范围内且未被加入队列，则更改访问情况并加入队列</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不存在从初始值到目标值的转化方案</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第265场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第265场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第265场&quot;&gt;&lt;/a&gt;LeetCode周赛第265场&lt;/h1&gt;&lt;p&gt;终于有时间来认认真真参加一次周赛了，</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛258场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B258%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B258%E5%9C%BA/</id>
    <published>2021-09-12T06:12:39.000Z</published>
    <updated>2021-09-12T07:56:17.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛257场"><a href="#LeetCode周赛257场" class="headerlink" title="LeetCode周赛257场"></a>LeetCode周赛257场</h1><p>这周的周赛第二题卡了挺久的，特别是最后面几个用例</p><p>然后是第三题，虽然没有做但是看了一下，感觉也挺有趣的:ice_cream:</p><h2 id="5867-反转单词前缀-—（简单）"><a href="#5867-反转单词前缀-—（简单）" class="headerlink" title="5867. 反转单词前缀    —（简单）"></a><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/">5867. 反转单词前缀</a>    —（简单）</h2><img src="https://i.loli.net/2021/09/12/AXe5iKohCBj9Uw1.png" style="zoom:80%;" /><p>第一题送分题，怎么舒服怎么来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reversePrefix</span><span class="token punctuation">(</span>string word<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                index<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> word<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5868-可互换矩形的组数-—（中等）"><a href="#5868-可互换矩形的组数-—（中等）" class="headerlink" title="5868. 可互换矩形的组数    —（中等）"></a><a href="https://leetcode-cn.com/problems/number-of-pairs-of-interchangeable-rectangles/">5868. 可互换矩形的组数</a>    —（中等）</h2><img src="https://i.loli.net/2021/09/12/LQGpVs37gmyHbO4.png" style="zoom:80%;" /><p>提示：</p><ul><li>n == rectangles.length</li><li>1 &lt;= n &lt;= 105</li><li>rectangles[i].length == 2</li><li>1 &lt;= widthi, heighti &lt;= 105</li></ul><p>这道题出错好多次，全都是细节问题，刚开始想着暴力解法和记忆表解法，但是都超时了:point_down:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//！！！下面代码是超时的解法！！！</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rlen<span class="token operator">=</span>rectangles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵个数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>rlen<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>rectangles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>rectangles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后题目总共有46个用例，后面一直卡在后面几个，直接痛苦面具:sweat:</p><p>赛后看了一下别人的解法，有两种方案，都是运用了哈希表来实现</p><p>有几个注意事项：</p><ol><li>精度问题，x/y按double求的话应该不会有问题，最好的方法应该是先求最大公约数，然后化简；</li><li>保存结果的话，注意key为<strong>pair时默认不支持unordered_map</strong>;（:warning:这个要注意）</li><li>注意数据范围，该用long long的地方不能犹豫。</li></ol><p>其中一种普通的解法可能会有给卡精度的风险，可能会有多个精度差不多的数而导致<code>res</code>改变，但本题目并没有卡，所以也可以了解一下该解法</p><p>简单来说就是遍历一遍矩形，求出各个矩阵的宽高比并打入哈希表中，哈希表记录的是每一种宽高比的总数</p><p>最后再运用高中知识排列组合的<code>组合公式</code>来求，（在一堆相同的宽高比中选出两个来配对）</p><img src="https://i.loli.net/2021/09/12/HBOSmRXbVlp2AWe.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>map<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> cur<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>map<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token operator">+=</span><span class="token punctuation">(</span>second<span class="token operator">*</span><span class="token punctuation">(</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种解法刚开始我是不太懂的，它是用了<code>gcd()</code>来求宽和高之间<code>最大公因数</code>，再利用它来化简宽高比：将(分子*BASE+分母)作为一个key存入哈希表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>map<span class="token punctuation">;</span>        <span class="token keyword">constexpr</span> <span class="token keyword">long</span> <span class="token keyword">long</span> BASE<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">1e8</span><span class="token punctuation">;</span><span class="token comment">//基数，大一点的数都可以</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> frac<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token operator">*</span>BASE<span class="token operator">+</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//化简，乘上基数以便在哈希表内区分</span>            <span class="token operator">++</span>map<span class="token punctuation">[</span>frac<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">+=</span><span class="token punctuation">(</span>second<span class="token operator">*</span><span class="token punctuation">(</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5869-两个回文子序列长度的最大乘积-—（中等）"><a href="#5869-两个回文子序列长度的最大乘积-—（中等）" class="headerlink" title="5869. 两个回文子序列长度的最大乘积    —（中等）"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/">5869. 两个回文子序列长度的最大乘积</a>    —（中等）</h2><p>给你一个字符串 s ，请你找到 s 中两个 不相交回文子序列 ，使得它们长度的 乘积最大 。两个子序列在原字符串中如果没有任何相同下标的字符，则它们是 不相交 的。</p><p>请你返回两个回文子序列长度可以达到的 最大乘积 。</p><p>子序列 指的是从原字符串中删除若干个字符（可以一个也不删除）后，剩余字符不改变顺序而得到的结果。如果一个字符串从前往后读和从后往前读一模一样，那么这个字符串是一个 回文字符串 。</p><p>示例 1：</p><img src="https://i.loli.net/2021/09/12/lZzOQqu7myNiCaG.png" style="zoom:80%;" /><blockquote><p>输入：s = “leetcodecom”<br>输出：9<br>解释：最优方案是选择 “ete” 作为第一个子序列，”cdc” 作为第二个子序列。<br>它们的乘积为 3 * 3 = 9 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “bb”<br>输出：1<br>解释：最优方案为选择 “b” （第一个字符）作为第一个子序列，”b” （第二个字符）作为第二个子序列。<br>它们的乘积为 1 * 1 = 1 。</p></blockquote><p>示例 3：</p><blockquote><p>输入：s = “accbcaxxcxx”<br>输出：25<br>解释：最优方案为选择 “accca” 作为第一个子序列，”xxcxx” 作为第二个子序列。<br>它们的乘积为 5 * 5 = 25 。</p></blockquote><p>提示：</p><ul><li>2 &lt;= s.length &lt;= 12</li><li>s 只含有小写英文字母</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛257场&quot;&gt;&lt;a href=&quot;#LeetCode周赛257场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛257场&quot;&gt;&lt;/a&gt;LeetCode周赛257场&lt;/h1&gt;&lt;p&gt;这周的周赛第二题卡了挺久的，特别是最后面几个</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛257场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B257%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B257%E5%9C%BA/</id>
    <published>2021-09-05T05:56:24.000Z</published>
    <updated>2021-09-05T08:21:26.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第257场"><a href="#LeetCode周赛第257场" class="headerlink" title="LeetCode周赛第257场"></a><a href="https://leetcode-cn.com/contest/weekly-contest-257/">LeetCode周赛第257场</a></h1><p>由于上一次周赛的时候LeetCode服务器出了问题，所以上次的周赛没有参加到</p><p>而本周的周赛开始前服务器也出了一些问题，好在修复地快进去了</p><img src="C:\Users\ZhaoYJ\AppData\Roaming\Typora\typora-user-images\image-20210905142220496.png" alt="image-20210905142220496" style="zoom:80%;" /><p>这周的周赛又让我从两道选手退化成了一道选手（前两道直接寄）</p><p>前两题都是数组题，后面两题就没怎么看了，这里就先记录前两道题目</p><h2 id="5863-统计特殊四元组"><a href="#5863-统计特殊四元组" class="headerlink" title="5863. 统计特殊四元组"></a><a href="https://leetcode-cn.com/problems/count-special-quadruplets/">5863. 统计特殊四元组</a></h2><p>给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目 ：</p><ul><li>nums[a] + nums[b] + nums[c] == nums[d] ，且</li><li>a &lt; b &lt; c &lt; d</li></ul><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,6]<br>输出：1<br>解释：满足要求的唯一一个四元组是 (0, 1, 2, 3) 因为 1 + 2 + 3 == 6 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [3,3,6,4,5]<br>输出：0<br>解释：[3,3,6,4,5] 中不存在满足要求的四元组。</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [1,1,1,3,5]<br>输出：4<br>解释：满足要求的 4 个四元组如下：</p></blockquote><ul><li>(0, 1, 2, 3): 1 + 1 + 1 == 3</li><li>(0, 1, 3, 4): 1 + 1 + 3 == 5</li><li>(0, 2, 3, 4): 1 + 1 + 3 == 5</li><li>(1, 2, 3, 4): 1 + 1 + 3 == 5</li></ul><p>第一道题因为数组长度最大到50，所以可以直接四重循环暴力解法</p><p>但是要注意是不能sort，因为题目给定了条件，初始下标中<code>a&lt;b&lt;c&lt;d</code>，如果排序的话就会打乱下标顺序了，我在做题中出错了一次也是这个原因</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countQuadruplets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//不能sort</span>        <span class="token keyword">int</span> nlen<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token operator">++</span>res<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N^4)</p><hr><h2 id="5864-游戏中弱角色的数量"><a href="#5864-游戏中弱角色的数量" class="headerlink" title="5864. 游戏中弱角色的数量"></a><a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/">5864. 游戏中弱角色的数量</a></h2><p>你正在参加一个多角色游戏，每个角色都有两个主要属性：攻击 和 防御 。给你一个二维整数数组 properties ，其中 properties[i] = [attacki, defensei] 表示游戏中第 i 个角色的属性。</p><p>如果存在一个其他角色的攻击和防御等级 都严格高于 该角色的攻击和防御等级，则认为该角色为 弱角色 。更正式地，如果认为角色 i 弱于 存在的另一个角色 j ，那么 attackj &gt; attacki 且 defensej &gt; defensei 。</p><p>返回 <strong>弱角色</strong> 的数量。</p><p>这道题当初做的时候想到了一个思路但是没有去实现，觉得会超时，后面结束比赛后去试了一下还真可以过，下面就来记录一下</p><h3 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h3><p>简单点就是在二维数组中先按攻击力<strong>从大到小</strong>排好，如果两个角色的攻击力相同的话就按防御力<strong>从小到大</strong>排序，例如下面的排序结果</p><pre class="line-numbers language-none"><code class="language-none">6 36 45 25 53 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们再遍历一遍，同时记录防御力的最大值<code>dmax</code>，如果当前遍历到的角色防御力小于<code>dmax</code>则找到了一个弱角色</p><p>我们不用担心相同攻击力的情况，因为相同攻击力时防御力是小的在前面的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfWeakCharacters</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>properties<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> plen<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dmax<span class="token operator">=</span>INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> p<span class="token operator">:</span>properties<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//cout&lt;&lt;p[0]&lt;&lt;" "&lt;&lt;p[1]&lt;&lt;"\n";</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>dmax<span class="token punctuation">)</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>            dmax<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dmax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(NlogN)</p><h3 id="其它解法"><a href="#其它解法" class="headerlink" title="其它解法"></a>其它解法</h3><p>这里有个大佬 <a href="https://leetcode-cn.com/u/lucifer1004/">吴自华</a> 的<a href="https://cp-wiki.vercel.app/tutorial/leetcode/WC257/#problem-b-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F">解法</a></p><img src="https://i.loli.net/2021/09/05/AEUhl721HGLRXeo.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfWeakCharacters</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bhi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> properties<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> properties<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> properties<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bhi <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bhi<span class="token punctuation">,</span> properties<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> bhi<span class="token punctuation">)</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第257场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第257场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第257场&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/contest/</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode周赛254场</title>
    <link href="http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/"/>
    <id>http://sakura-pub.top/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/</id>
    <published>2021-08-15T15:51:40.000Z</published>
    <updated>2021-09-05T06:09:43.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第254场"><a href="#LeetCode周赛第254场" class="headerlink" title="LeetCode周赛第254场"></a>LeetCode周赛第254场</h1><p>这场周赛再次给虐惨了，做到第二题就卡住了没有思路，争取下次周赛可以做到第三题<img src="https://i.loli.net/2021/09/05/85EFy4tfaplSvIi.png"></p><h2 id="5843-作为子字符串出现在单词中的字符串数目-—（简单）"><a href="#5843-作为子字符串出现在单词中的字符串数目-—（简单）" class="headerlink" title="5843. 作为子字符串出现在单词中的字符串数目  —（简单）"></a><a href="https://leetcode-cn.com/problems/number-of-strings-that-appear-as-substrings-in-word/">5843. 作为子字符串出现在单词中的字符串数目</a>  —（简单）</h2><p>给你一个字符串数组 patterns 和一个字符串 word ，统计 patterns 中有多少个字符串是 word 的子字符串。返回字符串数目。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><p>示例 1：</p><blockquote><p>输入：patterns = [“a”,”abc”,”bc”,”d”], word = “abc”<br>输出：3<br>解释：</p><ul><li>“a” 是 “abc” 的子字符串。</li><li>“abc” 是 “abc” 的子字符串。</li><li>“bc” 是 “abc” 的子字符串。</li><li>“d” 不是 “abc” 的子字符串。</li></ul><p>patterns 中有 3 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 2：</p><blockquote><p>输入：patterns = [“a”,”b”,”c”], word = “aaaaabbbbb”<br>输出：2<br>解释：</p><ul><li>“a” 是 “aaaaabbbbb” 的子字符串。</li><li>“b” 是 “aaaaabbbbb” 的子字符串。</li><li>“c” 不是 “aaaaabbbbb” 的字符串。</li></ul><p>patterns 中有 2 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 3：</p><blockquote><p>输入：patterns = [“a”,”a”,”a”], word = “ab”<br>输出：3<br>解释：patterns 中的每个字符串都作为子字符串出现在 word “ab” 中。</p></blockquote><p>提示：</p><ul><li>1 &lt;= patterns.length &lt;= 100</li><li>1 &lt;= patterns[i].length &lt;= 100</li><li>1 &lt;= word.length &lt;= 100</li><li>patterns[i] 和 word 由小写英文字母组成</li></ul><p>题目刚开始做的时候脑子没转过来，天真地想自己实现如何查找子字符串，到后面醒悟才想起可以用库函数，直接提交下一题（提交时还错了一次，哭）</p><p>注意这里<code>string::find()</code>可以用来查找子字符串，如果找到了则会返回子串第一个字符的下标序号，找不到则会返回<code>string::npos</code>该定值为<code>string::size_type</code>类型，即<code>size_t==usigned int</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numOfStrings</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> patterns<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token operator">:</span>patterns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string<span class="token operator">::</span>size_type pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5832-构造元素不等于两相邻元素平均值的数组-—（中等）"><a href="#5832-构造元素不等于两相邻元素平均值的数组-—（中等）" class="headerlink" title="5832. 构造元素不等于两相邻元素平均值的数组  —（中等）"></a><a href="https://leetcode-cn.com/problems/array-with-elements-not-equal-to-average-of-neighbors/">5832. 构造元素不等于两相邻元素平均值的数组</a>  —（中等）</h2><p>给你一个 下标从 0 开始 的数组 nums ，数组由若干 互不相同的 整数组成。你打算重新排列数组中的元素以满足：重排后，数组中的每个元素都 不等于 其两侧相邻元素的 平均值 。</p><p>更公式化的说法是，重新排列的数组应当满足这一属性：对于范围 1 &lt;= i &lt; nums.length - 1 中的每个 i ，(nums[i-1] + nums[i+1]) / 2 不等于 nums[i] 均成立 。</p><p>返回满足题意的任一重排结果。</p><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,4,5]<br>输出：[1,2,4,5,3]<br>解释：<br>i=1, nums[i] = 2, 两相邻元素平均值为 (1+4) / 2 = 2.5<br>i=2, nums[i] = 4, 两相邻元素平均值为 (2+5) / 2 = 3.5<br>i=3, nums[i] = 5, 两相邻元素平均值为 (4+3) / 2 = 3.5</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [6,2,0,9,7]<br>输出：[9,7,6,2,0]<br>解释：<br>i=1, nums[i] = 7, 两相邻元素平均值为 (9+6) / 2 = 7.5<br>i=2, nums[i] = 6, 两相邻元素平均值为 (7+2) / 2 = 4.5<br>i=3, nums[i] = 2, 两相邻元素平均值为 (6+0) / 2 = 3</p></blockquote><p>提示：</p><ul><li>3 &lt;= nums.length &lt;= 105</li><li>0 &lt;= nums[i] &lt;= 105</li></ul><p>这一道题刚拿到就写不出来了，完全没有思路，感觉和平时做的题型不一样</p><p>后来看了别人的作答之后才发现是挺简单的一道题，主要脑筋转不过来</p><p>这里拿数组<code>nums=[6,2,0,9,7]</code>来举例，简单的思路就是：</p><ol><li>先把数组排序，从小到大排好，eg：<code>nums=[0,2,6,7,9]</code></li><li>新建一个用来返回的空数组<code>res</code>，并按顺序将<code>nums</code>数组的数填充完<code>res</code>数组的奇数下标位（这里可以用一个指针<code>ans=0</code>指向nums表示填充到哪个数字），eg：<code>res=[0,-1,2,-1,6]</code>其中<code>-1</code>表示还没填充的位</li><li>最后再把偶数位也填充完，<code>res=[0,7,2,9,6]</code></li><li>此时在<code>res</code>数组中任意一位数要么是都大于两边的数，要么是都小于两边的数，即满足题目的要求，该数肯定不会等于两边数之和的平均数</li></ol><p>知道这个方法之后还是觉得挺简单的，主要就是想不到这个方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rearrangeArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>nLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第254场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第254场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第254场&quot;&gt;&lt;/a&gt;LeetCode周赛第254场&lt;/h1&gt;&lt;p&gt;这场周赛再次给虐惨了，做到第二题就卡</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.top/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记29-制作主菜单界面</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/</id>
    <published>2021-08-05T01:15:59.000Z</published>
    <updated>2021-08-05T07:07:43.002Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们来为游戏制作一个主菜单界面</p><h1 id="在新场景中绘制画布"><a href="#在新场景中绘制画布" class="headerlink" title="在新场景中绘制画布"></a>在新场景中绘制画布</h1><p>我们要专门为我们的菜单新建一个场景，而菜单则是在这个新场景中绘制的</p><p>我这里先把场景搭建好了，注意我们在摆放人物的时候可以点击右键菜单进行<code>脱包</code>处理，这样我们移除组件时就不会影响到素材里面的模板了</p><img src="https://i.loli.net/2021/08/05/29wfpAg8ZEyLdDG.png" style="zoom:80%;" /><p>然后我们也把UI摆放好</p><img src="https://i.loli.net/2021/08/05/sHZyaWhDmL6qEvK.png" style="zoom:80%;" /><p>同时我们也可以给UI添加一些视觉效果的处理</p><h2 id="将UI添加立体效果"><a href="#将UI添加立体效果" class="headerlink" title="将UI添加立体效果"></a>将UI添加立体效果</h2><p>这里可以添加一种效果，我想点击new game 时候相机会穿过标题UI然后靠近传送门的样式，下面就来实现一下</p><p>我们选中画布，然后如下图设置，将<code>Render Mode</code>选择为<code>Camera</code>，再把摄像机拖到下面的框框里</p><img src="https://i.loli.net/2021/08/05/VQnMjOfywAeiNTh.png" style="zoom:80%;" /><p>这时候点击运行会发现按钮给场景遮挡住了，这时候我们可以调一下<code>Plane Distance</code>，比如改成1，按钮就又可以看到了</p><p>最后我们再把<code>Render Mode</code>改为<code>World Space</code>，然后尝试向前移动相机，就可以发现达成了相机穿越标题的效果了，之所以要经过上面的步骤是因为可以让Unity自动调节UI的合适位置</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>UI建立好之后我们就要来实现按钮的功能了</p><img src="https://i.loli.net/2021/08/05/uZCjd6oGp7DJqe3.png" style="zoom:80%;" /><p>按钮最主要就是监听事件，下面先单独来写各种功能的方法，最后再配上整个代码文件</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><p>其中最简单的就是退出游戏，一行搞定</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QuitGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//退出游戏功能</span>        Application<span class="token punctuation">.</span><span class="token function">Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NewGame"><a href="#NewGame" class="headerlink" title="NewGame"></a>NewGame</h2><p>然后是创建新游戏，这里就要涉及多个代码文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NewGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//清楚所有存档</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">DeleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转换场景</span>        <span class="token comment">//会在SceneController里面完成</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载第一个场景</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//转换场景，可用于在标题界面过渡到第一个界面中</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> scene<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>scene<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传入参数不为空</span>            <span class="token comment">//加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载人物，在GMaeManager中创建了一个用于获得初始位置的方法</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> player <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//结束协程</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载第一个场景，可以将这个直接放在标题界面的功能里</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token string">"3D RPG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GmaeManager.cs</span><span class="token comment">//获得场景加载入口，这里是标题界面进入主场景时用于获得落地点</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Transform</span> <span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>destinationTag<span class="token operator">==</span>TransitionDestination<span class="token punctuation">.</span>DestinationTag<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>                <span class="token keyword">return</span> item<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意要把几个Manager对象复制到标题场景中</p><h2 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h2><p>由于我们游戏有多个场景，因此在加载功能中我们还要记住上次保存玩家是停留在哪一个场景，从而在加载存档时判断要加载哪一个场景的画面</p><p>也是有多个代码文件需要修改，需要注意区分</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//记录保存场景的名字</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SceneName<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        <span class="token comment">//在保存数据同时保存玩家停留在哪个场景</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//Continue</span>    <span class="token comment">//用于加载游戏的加载方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> sceneName <span class="token operator">=</span> SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>SceneName<span class="token punctuation">;</span><span class="token comment">//获得上次保存场景名称，可能为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sceneName<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不为空的话就加载场景</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//PlayerController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册GmaeManager</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加载人物数据</span>SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ContinueGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//转换场景，读取进度</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游戏中Esc返回主菜单"><a href="#游戏中Esc返回主菜单" class="headerlink" title="游戏中Esc返回主菜单"></a>游戏中Esc返回主菜单</h2><p>我们还有一个功能是在游戏内必要的，就是返回主菜单功能，这里也来实现一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//游戏中Esc回到主菜单</span>           SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>           <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>           <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//加载标题场景协程</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载标题方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这我们就成功实现了主菜单到游戏再到主菜单的过渡效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章我们来为游戏制作一个主菜单界面&lt;/p&gt;
&lt;h1 id=&quot;在新场景中绘制画布&quot;&gt;&lt;a href=&quot;#在新场景中绘制画布&quot; class=&quot;headerlink&quot; title=&quot;在新场景中绘制画布&quot;&gt;&lt;/a&gt;在新场景中绘制画布&lt;/h1&gt;&lt;p&gt;我们要专门为我们的菜单新建一个场景</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记28-保存数据</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/</id>
    <published>2021-08-04T01:32:04.000Z</published>
    <updated>2021-08-04T02:53:20.289Z</updated>
    
    <content type="html"><![CDATA[<p>这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到</p><h1 id="认识API"><a href="#认识API" class="headerlink" title="认识API"></a>认识API</h1><p>这里我们用到两个API，一个是**<a href="https://docs.unity.cn/cn/2020.3/ScriptReference/EditorPrefs.html">PlayerPrefs</a><strong>类，虽然官方文档写的是EditorPrefs，但是他们的方法是一样的，另外一个要用到的API是</strong><a href="https://docs.unity.cn/cn/2020.3/ScriptReference/JsonUtility.ToJson.html">JsonUtility.ToJson</a>**方法</p><p>PlayerPrefs：用于本地持久化保存与读取的类，PlayerPrefs类工作原理非常简单，以键值对的形式将数据保存在文件中，然后程序可以根据这个名称取出上次保存的数值</p><p>JsonUtility.ToJson：生成对象的公共字段的 JSON 表示形式。</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>我们新建一个<code>SaveManager.cs</code>然后来编写专门管理保存读取的类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SaveManager<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切换场景不销毁</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>            <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>            <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Save</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Load</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果键值存在的话就读取</span>            JsonUtility<span class="token punctuation">.</span><span class="token function">FromJsonOverwrite</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以进游戏体验一下了，按<code>S</code>键是保存玩家当前数据，按<code>L</code>键是读取，并且保存后在下一次游戏启动时仍然可以读取数据</p><p>Windows系统可以在注册表上看到保存的数据</p><img src="https://i.loli.net/2021/08/04/jTPgFrdWL1wH96N.png" style="zoom:80%;" /><h1 id="跨场景保存读取"><a href="#跨场景保存读取" class="headerlink" title="跨场景保存读取"></a>跨场景保存读取</h1><p>既然我们在下一次开启游戏也可以读取玩家数据，那么跨场景也不在话下</p><p>去到<code>SceneController.cs</code>修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//保存数据</span>        SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>                        <span class="token comment">//读取玩家数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在加载另外一个场景前会先保存数据，在加载场景完后我们先读取数据再退出协程</p><p>这样就实现了人物数据的保存了，当然这只是保存读取了人物的生命值、经验值等数据，其它数据也可以自由发挥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到&lt;/p&gt;
&lt;h1 id=&quot;认识API&quot;&gt;&lt;a href=&quot;#认识API&quot; class=&quot;headerlink&quot; title=&quot;认识API&quot;&gt;&lt;/a&gt;认识API&lt;/h1&gt;&lt;p&gt;这里我们用到两个A</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记27-不同场景的传送</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-03T01:05:23.000Z</published>
    <updated>2021-08-03T03:25:32.587Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来实现不同场景的传送</p><p>首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧</p><p>搭建好场景后，我们就可以正式开始来实现如何跨场景传送了</p><h1 id="设置好传送门属性"><a href="#设置好传送门属性" class="headerlink" title="设置好传送门属性"></a>设置好传送门属性</h1><p>首先就是要把两个不同场景的传送门属性设置好，注意要选择不同场景传送并把名字填上</p><p>下面是主世界的传送门属性</p><img src="https://i.loli.net/2021/08/03/qSY69TCAibHz8wP.png" style="zoom:80%;" /><p>以及另外一个世界传送门的属性</p><img src="https://i.loli.net/2021/08/03/O4ymdIfH3CVZA2L.png" style="zoom:80%;" /><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>下面的代码可能有点分散，需要修改的文件比较多，会有注释写出来在哪个文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs，添加了不同场景加载时的代码</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> playerPrefab<span class="token punctuation">;</span><span class="token comment">//玩家素材对象，用来不同场景时进行加载</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>                <span class="token comment">//同场景可以不用异步，直接传送</span>                <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>                <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>sceneName<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//TODO:保存数据</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里我们要外界把人物的素材拖进去代码中，以保证传送到另外一个场景时可以加载人物出来</p><img src="https://i.loli.net/2021/08/03/xDbVRIcpGHqTy4h.png" style="zoom:80%;" /><h1 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h1><h2 id="传送报错"><a href="#传送报错" class="headerlink" title="传送报错"></a>传送报错</h2><p>此时我们传送时会报错，有好几个问题我们慢慢来看</p><p>第一个问题是要把场景放在<code>Scene in Build</code>的设置当中</p><img src="https://i.loli.net/2021/08/03/dpRCZcfYrDAUx1V.png" style="zoom:80%;" /><p>第二个问题就是我们传送到新场景后，那些Manager文件都会不存在，因此我们要把它们加入<code>DontDestory</code>的清单里</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//在GameManager.cs  SceneController.cs  MouseManager.cs加上这行代码</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止此Manager文件在切换场景时给销毁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要在<code>GameManager.cs</code>  <code>SceneController.cs</code>  <code>MouseManager.cs</code>加上上面代码，并且是要<strong>继承单例模式的代码文件</strong></p><h2 id="人物传送后无法移动"><a href="#人物传送后无法移动" class="headerlink" title="人物传送后无法移动"></a>人物传送后无法移动</h2><p>这时候人物可以传送到另外一个场景了，但是不能移动，可能有下面问题</p><p>第一个可能存在的问题就是我们第二个场景的地板没有设置成<code>Ground</code>标签，我们要设置一下</p><p>第二个问题是我们在<code>PlayerController.cs</code>中的<code>OnMouseClicked</code>事件没有加载出来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//KeyManager.Instance.OnKeyInputMove+=MoveToTarget;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材禁用时注销事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">-=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">-=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="人物传送回来相机没有跟随"><a href="#人物传送回来相机没有跟随" class="headerlink" title="人物传送回来相机没有跟随"></a>人物传送回来相机没有跟随</h2><p>接着还有一个问题就是当我们从另外一个场景传送回来时，相机的跟随就会失效，这里来修复这个问题</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GameManager.cs</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>        <span class="token comment">//外界人物对象注册同时让相机进行跟随</span>        followCamera <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CinemachineFreeLook<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在地图中查找相机</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>followCamera<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果找到相机就让它跟随</span>            followCamera<span class="token punctuation">.</span>Follow <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>            followCamera<span class="token punctuation">.</span>LookAt <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来实现不同场景的传送&lt;/p&gt;
&lt;p&gt;首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧&lt;/p&gt;
&lt;p&gt;搭建好场景后，我们就可以正式开始来实现如何跨场景传送了&lt;/p&gt;
&lt;h1 id=&quot;设置好传送门属性&quot;&gt;&lt;a href=&quot;#设置好传送门</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记26-实现同场景的传送</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-02T01:49:40.000Z</published>
    <updated>2021-08-02T04:18:18.335Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们实现同场景的传送效果</p><h1 id="调整传送门"><a href="#调整传送门" class="headerlink" title="调整传送门"></a>调整传送门</h1><p>在这之前，我们要把不同的传送门摆放好先</p><p>另外我们可能会发现点击不了传送门，这是因为传送门的box collider挡住了我们鼠标的射线，这里把它的大小改一下就行了</p><img src="https://i.loli.net/2021/08/02/LHvS6JN4idPbQOA.png" style="zoom:80%;" /><p>给传送门加上<code>Portal</code>的标签，然后再去<code>MouseManager.cs</code>修改一下鼠标的图样</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//TODO:切换鼠标贴图</span><span class="token keyword">switch</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">"Ground"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>地面行走的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>arrow<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Enemy"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击敌人的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>attack<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Portal"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击传送门图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>doorway<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//if</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Portal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//点击传送门</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写传送管理代码"><a href="#编写传送管理代码" class="headerlink" title="编写传送管理代码"></a>编写传送管理代码</h1><p>我们创建一个<code>SceneController.cs</code>，之所以不是用Manager是因为在Unity有个<code>SceneManager</code>同名的文件存在</p><img src="https://i.loli.net/2021/08/02/FLvOK3csbIP45Xz.png" style="zoom:80%;" /><p>注意此文件继承的是<strong>单例模式</strong>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>SceneManagement</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SceneController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SceneController<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">GameObject</span> player<span class="token punctuation">;</span><span class="token comment">//玩家</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>            <span class="token comment">//同场景可以不用异步，直接传送</span>            <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>            <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先获得玩家的对象</span>        player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>        <span class="token comment">//获得目的地传送门对象</span>        <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象的坐标和旋转角度</span>        player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//恢复导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">TransitionDestination</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过传送门目的地的标签寻找目的地传送门所在位置</span>        <span class="token class-name"><span class="token keyword">var</span></span> entrances <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>entrances<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>destinationTag <span class="token operator">==</span> destinationTag<span class="token punctuation">)</span><span class="token comment">//目的地传送门标签匹配的话</span>                <span class="token keyword">return</span> entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外当我们玩家到达传送门，我希望它可以按键触发传送的，所以这里去到<code>TransitionPoint.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//触发器设置</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>E<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> canTrans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//按键触发传送</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个工作就是要把我们的<code>TransitionDestination.cs</code>作为组件添加在传送门子对象的点上</p><img src="https://i.loli.net/2021/08/02/3Jm9QXySOEiqdRF.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/02/Hen9PBroRJYcFjp.png" style="zoom:80%;" /><p>这个点是用来设置当前的点是属于哪一个标签的，我们就把一个传送门当做入口设为<code>ENTER</code>，另一个传送门当做目的地设为<code>A</code></p><p>另外去到传送门中，目的地也要进行对应的设置，入口传送门的目的地是<code>A</code>，反过来另外一个传送门想过来就要设置目的地为<code>ENTER</code></p><p><strong>注意</strong>：我们最好不要设置多个同一标签的传送门，可能会出现问题</p><p>最后，建立一个空对象，并把<code>SceneController.cs</code>作为组件附上去</p><img src="https://i.loli.net/2021/08/02/caN1CyLrJU76bnI.png" style="zoom:80%;" /><h1 id="Trigger无法触发问题"><a href="#Trigger无法触发问题" class="headerlink" title="Trigger无法触发问题"></a>Trigger无法触发问题</h1><p>如果函数内的Trigger事件没有触发的话，可能是玩家上没有添加钢体的原因，把钢体添加在主动碰撞的物体上（这里是玩家），然后把传送门和玩家的碰撞体组件中<code>IsTrigger</code>勾选上就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里我们实现同场景的传送效果&lt;/p&gt;
&lt;h1 id=&quot;调整传送门&quot;&gt;&lt;a href=&quot;#调整传送门&quot; class=&quot;headerlink&quot; title=&quot;调整传送门&quot;&gt;&lt;/a&gt;调整传送门&lt;/h1&gt;&lt;p&gt;在这之前，我们要把不同的传送门摆放好先&lt;/p&gt;
&lt;p&gt;另外我们可能会发现</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记25-制作传送门</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/</id>
    <published>2021-08-01T01:53:22.000Z</published>
    <updated>2021-08-01T03:53:51.612Z</updated>
    
    <content type="html"><![CDATA[<p>我们这一章来制作一个传送门以供后面玩家切换不同场景时使用</p><h1 id="制作传送门Shader"><a href="#制作传送门Shader" class="headerlink" title="制作传送门Shader"></a>制作传送门Shader</h1><p>首先就是要来制作传送门的Shader，新建一个<code>Lit Shader Graph</code>，这是一个有光影响的shader，菜单中还有一个叫做Unlit Shader Graph就是没有光影响的</p><p>这里建好后起名为<code>Portal Shader</code></p><img src="https://i.loli.net/2021/08/01/pd7nMhKZHVBm4ar.png" style="zoom:80%;" /><p>注意里边的设置，Surface选择<code>Transparent</code>就是有透明通道的意思，然后勾选<code>Two Sided</code>显示两面</p><img src="https://i.loli.net/2021/08/01/k7eZSNDKwTt2Y43.png" style="zoom:80%;" /><p>这里直接上做好的图，颜色的属性面板中注意要选择<code>HDR</code></p><img src="https://i.loli.net/2021/08/01/nwoQLuWKhYSR8lp.png" style="zoom:80%;" /><p>做好后点击左上角<code>Save Asset</code>保存，然后右键<code>Shder Graph</code>创建为一个<code>Materials</code></p><img src="https://i.loli.net/2021/08/01/ecxz9EY5KfGgMOq.png" style="zoom:80%;" /><p>这样一个传送门的Shader就创建好了</p><h1 id="制作传送门"><a href="#制作传送门" class="headerlink" title="制作传送门"></a>制作传送门</h1><p>回到地图上，我们创建一个<code>Quad</code></p><img src="https://i.loli.net/2021/08/01/1ULfhYbuIgzD529.png" style="zoom:80%;" /><p>然后把刚刚的传送门材质附上去，然后就可以看到传送门的雏形了</p><img src="https://i.loli.net/2021/08/01/oGMurVFip1O8sjA.png" style="zoom:80%;" /><p>之后可以创建一个子对象，表示传送点，以后当玩家触碰这个点便可以触发传送事件</p><img src="https://i.loli.net/2021/08/01/z65KBjWylxAvGIo.png" style="zoom:80%;" /><p>如图我还将这个点附上了一个蓝色图标，代表这两个传送门是互通的，一对的，可以起到一个标记作用</p><h1 id="编写传送门基本代码"><a href="#编写传送门基本代码" class="headerlink" title="编写传送门基本代码"></a>编写传送门基本代码</h1><p>这里编写一下基本的传送门代码，详细的代码完善留在下一章节</p><img src="https://i.loli.net/2021/08/01/aVGXZyRzq36d8pt.png" style="zoom:80%;" /><p>这里的<code>TransitionPoint</code>挂载在传送门上，而<code>TransitionDestination</code>挂载在蓝色的点上</p><p>我们先来编辑TransitionPoint.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionPoint.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionPoint</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TransitionType</span><span class="token punctuation">&#123;</span><span class="token comment">//传送状态</span>        SameScene<span class="token punctuation">,</span>DifferentScene    <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Transition Info（传送门设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">;</span><span class="token comment">//记录场景名称</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionType</span> transitionType<span class="token punctuation">;</span><span class="token comment">//记录传送状态，同场景传送就外边选择第一个，不同场景就选择第二个</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token comment">//传送点目的地</span>    <span class="token comment">//触发器设置</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerStay</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家在传送门区域内</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerExit</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家离开了传送门区域</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中传送点目的地对应的在TransitionDestination.cs中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionDestination.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionDestination</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DestinationTag</span><span class="token punctuation">&#123;</span><span class="token comment">//传送点标签</span>        ENTER<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的A,B,C可以自行修改，表示的是不同传送门中的不同地方，类似于一个站牌</p><p>我们还注意到在前面<code>TransitionPoint.cs</code>中有触发的代码，这里要到Unity属性面板中把触发<code>isTrigger</code>选项勾上，否则不能触发<code>OnTriggerStay()</code>和<code>OnTriggerExit()</code>方法</p><img src="https://i.loli.net/2021/08/01/G7DPlvBtNd5Lw9Y.png" style="zoom:80%;" /><p>当然，现在用到的是<code>Mesh Collider</code>，这里触发面积只是一个平面，我们可以换成<code>Box Collider</code>，让它的触发面积更大一些</p><img src="https://i.loli.net/2021/08/01/mPRClNHWdA6jufi.png" style="zoom:80%;" /><p>弄好这些后，记得把传送门保存为一个素材</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们这一章来制作一个传送门以供后面玩家切换不同场景时使用&lt;/p&gt;
&lt;h1 id=&quot;制作传送门Shader&quot;&gt;&lt;a href=&quot;#制作传送门Shader&quot; class=&quot;headerlink&quot; title=&quot;制作传送门Shader&quot;&gt;&lt;/a&gt;制作传送门Shader&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记24-制作玩家状态条</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/</id>
    <published>2021-07-31T02:35:09.000Z</published>
    <updated>2021-09-05T08:17:41.684Z</updated>
    
    <content type="html"><![CDATA[<p>本章来制作玩家的状态条，如血量条，经验条等</p><h1 id="编辑UI布局"><a href="#编辑UI布局" class="headerlink" title="编辑UI布局"></a>编辑UI布局</h1><p>第一步也是建立一个画布，模式使用默认的<code>Screen Space</code>覆盖屏幕</p><p>值得注意是为了使状态条可以随着屏幕的分辨率大小而切换，我们的<code>UI Scale Mode</code>要设置成<code>Scale With Scree</code></p><img src="https://www.hualigs.cn/image/6104bb2a28b1d.jpg" style="zoom:80%;" /><p>之后创建好UI，可以在<code>Scene</code>视图的2D模式下调整到合适的位置，然后在<code>Game</code>视图下预览效果，可以自行多多尝试</p><p>最后的效果如下</p><img src="https://i.loli.net/2021/07/31/xh2a6d1GFWIAQB3.png" style="zoom:80%;" /><p>注意这里的文字我用了自定义的字体，在Unity中只用把你想要用的物体拖拽进来分类好，就可以直接在文字UI设置面板上选择使用了</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>接下来就是编写代码来管理我们的UI了</p><img src="https://i.loli.net/2021/07/31/WEluxrQkRazFKf5.png" style="zoom:80%;" /><p>然后把代码作为组件添加到上面创建的画布当中，接着就是编写代码了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>UI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerHealthUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于我们的人物信息栏最终会保存为一个prefab</span>    <span class="token comment">//因此我们可以不使用拖拽gameobject方式来获得对象</span>    <span class="token comment">//可以直接使用获得对象的子对象方式</span>    <span class="token class-name">Text</span> levelText<span class="token punctuation">;</span><span class="token comment">//获得text文本</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//生命值拖拽条</span>    <span class="token class-name">Image</span> expSlider<span class="token punctuation">;</span><span class="token comment">//经验拖拽条</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注意GetChild填写的参数类似于数组下标，第一个对象的索引是0</span>        levelText <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Text<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得文字对象</span>        healthSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得生命拖拽条</span>        expSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得经验值拖拽条</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        levelText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Level  "</span> <span class="token operator">+</span>             GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//00是规定给它的一个格式，比如01 02....</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过GameManager类来获得player的states</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>currentHealth<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>MaxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentExp<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>baseExp<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        expSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是借助了<code>GameManager.cs</code>中的单例模式实例化的方式来获得player的状态信息，因为先前我用了外界注册的方式把玩家的信息赋予了GameManager里面的成员变量</p><p>到这我们就大功告成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章来制作玩家的状态条，如血量条，经验条等&lt;/p&gt;
&lt;h1 id=&quot;编辑UI布局&quot;&gt;&lt;a href=&quot;#编辑UI布局&quot; class=&quot;headerlink&quot; title=&quot;编辑UI布局&quot;&gt;&lt;/a&gt;编辑UI布局&lt;/h1&gt;&lt;p&gt;第一步也是建立一个画布，模式使用默认的&lt;code&gt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记23-制作玩家的升级</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/</id>
    <published>2021-07-30T02:05:51.000Z</published>
    <updated>2021-07-31T04:10:05.890Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中我们来制作玩家的经验系统，并附有升级功能</p><h1 id="扩展CharacterData-SO"><a href="#扩展CharacterData-SO" class="headerlink" title="扩展CharacterData_SO"></a>扩展CharacterData_SO</h1><p>我们首先打开<code>CharacterData_SO.cs</code>添加一些额外的属性进去，同时写一个升级时处理的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Character States/Data"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"States Info（属性信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">;</span><span class="token comment">//最大生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">;</span><span class="token comment">//当前生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseDefence<span class="token punctuation">;</span><span class="token comment">//基础防御值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentDefence<span class="token punctuation">;</span><span class="token comment">//当前防御值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Kill（击杀信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> killPoint<span class="token punctuation">;</span><span class="token comment">//击杀后掉落的经验值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Level（等级信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentLevel<span class="token punctuation">;</span><span class="token comment">//当前等级</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxLevel<span class="token punctuation">;</span><span class="token comment">//最大等级数</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseExp<span class="token punctuation">;</span><span class="token comment">//基础经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentExp<span class="token punctuation">;</span><span class="token comment">//当前经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> levelBuff<span class="token punctuation">;</span><span class="token comment">//每次升级整体属性提升的百分比</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> LevelMultiplier<span class="token punctuation">&#123;</span>        <span class="token comment">//升级提升属性加的倍率</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>currentLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> levelBuff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentExp <span class="token operator">+=</span> point<span class="token punctuation">;</span><span class="token comment">//把外界的经验加进来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentExp <span class="token operator">>=</span> baseExp<span class="token punctuation">)</span>            <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这个方法中添加升级时想提升的数据</span>        <span class="token comment">//将current+1限制在[0,maxLevel]闭区间中</span>        currentLevel <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>currentLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>maxLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将经验和生命值按照每一等级不同倍率增长（也可以使用固定值level buff）</span>        baseExp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>baseExp<span class="token operator">*</span>LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxHealth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>maxHealth <span class="token operator">*</span> LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentHealth <span class="token operator">=</span> maxHealth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再去到<code>CharacterStates.cs</code>做最后的修改</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//打死怪后加经验</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        attacker<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//石头反击石头人的攻击方式</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//TODO:加经验</span>    <span class="token comment">//可以通过GameManager来访问玩家的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们去到人物的<code>PlayerData</code>还有每个敌人的<code>Data</code>添加属性就可以了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/bc33680758884eb88e5bfed71402eaa5.png" alt="1.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本章中我们来制作玩家的经验系统，并附有升级功能&lt;/p&gt;
&lt;h1 id=&quot;扩展CharacterData-SO&quot;&gt;&lt;a href=&quot;#扩展CharacterData-SO&quot; class=&quot;headerlink&quot; title=&quot;扩展CharacterData_SO&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记22-制作血量条UI</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/</id>
    <published>2021-07-29T01:28:59.000Z</published>
    <updated>2021-07-29T10:01:08.942Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来制作一下敌人的血量条</p><h1 id="创建血条UI"><a href="#创建血条UI" class="headerlink" title="创建血条UI"></a>创建血条UI</h1><h2 id="创建血条基础形状（Canvas与Image）"><a href="#创建血条基础形状（Canvas与Image）" class="headerlink" title="创建血条基础形状（Canvas与Image）"></a>创建血条基础形状（Canvas与Image）</h2><p>首先在<code>Hierachy</code>窗口中创建一个<code>Canvas</code>（画布），并将它命名为<code>HealthBarCanvas</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/a4bddbb255de4c87825a7866dd064269.png" alt="1.png" style="zoom:80%;" /><p>之后我们改一下<code>HealthBarCanvas</code>设置，并把坐标重置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c8fa921e76f4decb29167a49ad882f1.png" alt="2.png" style="zoom:80%;" /><p>随后我们在这个画布的基础上创建一个<code>Image</code>，并将它命名为<code>Bar Holder</code>，然后在把它的坐标改一下，改成像一个血条的大小</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/48339de2f8e6417f94b09466da3b7428.png" alt="3.png" style="zoom:80%;" /><p>我们就可以在Scene窗口上看到血条的初始样子了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/ccf344e88ab44a2e92fc6563d1339523.png" alt="4.png" style="zoom:80%;" /><h2 id="创建血条底层图像（Source-Image）"><a href="#创建血条底层图像（Source-Image）" class="headerlink" title="创建血条底层图像（Source Image）"></a>创建血条底层图像（Source Image）</h2><p>接着我们要为<code>Bar Holder</code>导入一个<code>Source Image</code>作为血条的底层，这里就选择自己创建一个图像作为它的底层</p><p>首先要打开<code>Package Manager</code>安装一下<code>2D Sprite</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c103cd1256d4e5cb07ed10165846528.png" alt="5.png" style="zoom:80%;" /><p>接着我们创建一个路径专门存放UI相关的对象，这里创建一个<code>Square</code>方形图像</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/73d842b512f940698760bf2547bbf82c.png" alt="6.png" style="zoom:80%;" /><p>再把这个方形图像应用在刚刚的<code>Source Image</code>中就行了</p><p>由于现在我们创建出来的是一个血条的底层，那么我们可以把它的颜色设置为红色底，待会有个上层图像设置成绿色，这样弄出来就有血条的样子了</p><p>因此我们这里把颜色改为红色（这里我把颜色的透明度改成了 150 ）</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/9d082235f7dc478ca60891914aaa2de1.png" alt="7.png" style="zoom:80%;" /><h2 id="创建血条上层图像"><a href="#创建血条上层图像" class="headerlink" title="创建血条上层图像"></a>创建血条上层图像</h2><p>我们在<code>Bar Holder</code>的基础上再创建一个图像<code>Image</code>，命名为<code>Current Health</code>，并将宽度和高度设置成和底层一样（2.5和0.25）</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/13abb2c92ea14215973e66d999182fa4.png" alt="8.png" style="zoom:80%;" /><p>同时<code>Source Image</code>还是和刚刚一样，颜色调为绿色</p><p>唯一不同的是图片的类型<code>Image Type</code>要调为<strong>填充</strong><code>Filled</code>，填充的方式为<strong>水平填充</strong><code>Horizontal</code>，之后我们就可以通过调节填充数量<code>Fill Amount</code>来控制绿色条的长度，从而代表血量的多少了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/f5d505bfb9e74b98a2e2ffdaa4b81b15.png" alt="9.png" style="zoom:80%;" /><p>效果图如下</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/72681600544d4713a09b34e971078333.png" alt="10.png" style="zoom:80%;" /><p>这样一个简陋的血条就弄好了，我们将它保存为一个素材</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/7d681c103df74db1921f9235c27f02e1.png" alt="11.png" style="zoom:80%;" /><h2 id="设置血条在敌人上方的位置"><a href="#设置血条在敌人上方的位置" class="headerlink" title="设置血条在敌人上方的位置"></a>设置血条在敌人上方的位置</h2><p>由于我们每个敌人高矮不同，就导致了血条在不同敌人的位置也不一样，同时也是为了方便我们后面的代码，这里我们要为每个敌人设置一下血条应该出现的位置</p><p>最直接的办法就是为每个敌人对象再创建一个子对象来记录血条位置</p><p>我们打开<code>Prefabs ---&gt; Characters</code>目录编辑敌人素材，这里拿史莱姆为例子</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/a4ed16108baa4e62a2c591cb1d263eb6.png" alt="13.png" style="zoom:80%;" /><p>像上面图片这样，我们创建了一个<code>HealthBar Point</code>的空对象来记录血条的位置，这样就很方便我们代码的编写了</p><p>最后按照同样的方式给每个敌人都安放<code>HealthBar Point</code></p><h1 id="编写血条代码"><a href="#编写血条代码" class="headerlink" title="编写血条代码"></a>编写血条代码</h1><h2 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h2><p>在创建血条代码之前，我们先在<code>CharacterStates.cs</code>中创建一个事件，即在造成伤害时要触发的血条变动事件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//造成伤害时血条改变的事件</span><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">></span></span> UpdateHealthBarOnAttack<span class="token punctuation">;</span><span class="token comment">//在造成伤害时调用</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO:血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建血条代码"><a href="#创建血条代码" class="headerlink" title="创建血条代码"></a>创建血条代码</h2><p>接下来我们就来写控制血条的脚本代码</p><p>在下图目录创建一个脚本，起名为<code>HealthBarUI.cs</code></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/19ea0718eaf34586b42b44476b56da6c.png" alt="12.png" style="zoom:80%;" /><p>然后打开编写代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HealthBarUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> healthUIPrefab<span class="token punctuation">;</span><span class="token comment">//供外界提供一个血条素材</span>    <span class="token keyword">public</span> <span class="token class-name">Transform</span> barPoint<span class="token punctuation">;</span><span class="token comment">//记录血量条该显示在敌人的哪个位置</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"血条显示设置"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> alwaysVisible<span class="token punctuation">;</span><span class="token comment">//血条是否一直可见</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> visibleTime<span class="token punctuation">;</span><span class="token comment">//血条显示时间（如果不是一直可见的情况下）</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> timeLeft<span class="token punctuation">;</span><span class="token comment">//剩余的显示时间</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//拿到血条上层图像</span>    <span class="token class-name">Transform</span> UIbar<span class="token punctuation">;</span><span class="token comment">//记录生成的血条在的位置</span>    <span class="token class-name">Transform</span> cam<span class="token punctuation">;</span><span class="token comment">//拿到摄像机位置以处理血条一直面向我们摄像机</span>    <span class="token class-name">CharacterStates</span> currentStates<span class="token punctuation">;</span><span class="token comment">//获取当前人物的states</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentStates<span class="token punctuation">.</span>UpdateHealthBarOnAttack <span class="token operator">+=</span> UpdateHealthBar<span class="token punctuation">;</span><span class="token comment">//注册事件</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//OnEnable在每次切换地图时都会调用一次</span>        cam <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">;</span><span class="token comment">//获取主相机位置</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Canvas<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//遍历每一个画布</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>renderMode <span class="token operator">==</span> RenderMode<span class="token punctuation">.</span>WorldSpace<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//找到血条所在的画布，有多种方法来获得</span>                <span class="token comment">//也可以供外界提供此画布，更严谨一点</span>                UIbar <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>healthUIPrefab<span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">;</span>                <span class="token comment">//获得上层图像（绿色条）的对象，下标为0</span>                healthSlider <span class="token operator">=</span> UIbar<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//是否一直可见</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealthBar</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//更新血量</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果当前血量小于等于0，就销毁UIbar</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每次更新时必然可见</span>        UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到血量百分比</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>currentHealth <span class="token operator">/</span> maxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新血条长度</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在Update后一帧执行</span>        <span class="token comment">//更新血条跟随敌人位置</span>        <span class="token comment">//这里先检测UIbar有没有给销毁</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>UIbar <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            UIbar<span class="token punctuation">.</span>position <span class="token operator">=</span> barPoint<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//更新到敌人位置</span>            UIbar<span class="token punctuation">.</span>forward <span class="token operator">=</span> cam<span class="token punctuation">.</span>forward<span class="token punctuation">;</span><span class="token comment">//面朝摄像机（即摄像机的方向）</span>            <span class="token comment">//血条剩余显示时间</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>timeLeft <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                timeLeft <span class="token operator">=</span> visibleTime<span class="token punctuation">;</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                timeLeft <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后把代码脚本挂载到每个敌人身上，再调整数据就可以运行试试看效果了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来制作一下敌人的血量条&lt;/p&gt;
&lt;h1 id=&quot;创建血条UI&quot;&gt;&lt;a href=&quot;#创建血条UI&quot; class=&quot;headerlink&quot; title=&quot;创建血条UI&quot;&gt;&lt;/a&gt;创建血条UI&lt;/h1&gt;&lt;h2 id=&quot;创建血条基础形状（Canvas与Image）&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记21-反击石头人</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/</id>
    <published>2021-07-27T13:54:34.000Z</published>
    <updated>2021-07-28T01:59:34.199Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人</p><h1 id="实现石头击飞玩家并造成伤害"><a href="#实现石头击飞玩家并造成伤害" class="headerlink" title="实现石头击飞玩家并造成伤害"></a>实现石头击飞玩家并造成伤害</h1><p>我们打开<code>Rock.cs</code>，我们要有区分性的触发伤害，对于玩家和敌人可以造成伤害，但是对于丢到地面的情况是不能造成伤害的，所以这里可以利用一个枚举来区分开来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RockStates</span><span class="token punctuation">&#123;</span>HitPlayer<span class="token punctuation">,</span>HitEnemy<span class="token punctuation">,</span>HitNothing<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token class-name">RockStates</span> rockStates<span class="token punctuation">;</span><span class="token comment">//枚举实例</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">;</span><span class="token comment">//造成的伤害是多少</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//other指被石头打到的对象</span>    <span class="token comment">//当发生碰撞时会执行这个函数</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>rockStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitPlayer<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction <span class="token operator">*</span> force<span class="token punctuation">;</span><span class="token comment">//击退玩家</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//眩晕</span>                <span class="token comment">//这里的TakeDamage是重载的其中一个方法</span>                <span class="token comment">//造成伤害</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span><span class="token comment">//复原状态以防一直执行</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end switch</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到其中的<code>TakeDamage()</code>是一个重载方法，打开<code>CharacterStates.cs</code>我们这里补充一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//函数重载</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后保存关闭，别忘了要在外边石头对象上赋予一个初始伤害值</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/87f552555d2d4f60b4fe62d0d9c10da6.png" alt="1.png" style="zoom:80%;" /><p>这样我们就实现了石头的第一个状态</p><h1 id="实现石头攻击石头人"><a href="#实现石头攻击石头人" class="headerlink" title="实现石头攻击石头人"></a>实现石头攻击石头人</h1><p>先把代码完善好</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们这里是反击石头人，所以要有个判断鼠标点击到了石头，一个最直接的办法就是给我们的石头添加一个标签，然后再修改一下鼠标点击时的方法</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/e18b4dde9c5b4129bba36dd1c9f553b2.png" alt="2.png" style="zoom:80%;" /><p>回到<code>PlayerController.cs</code>修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果点击的对象不是敌人而是其它另类可攻击对象，如石头</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates            <span class="token operator">==</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果是石头并且石头不在空中而是落地之后</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates <span class="token operator">=</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">;</span>            <span class="token comment">//防止攻击那一刹那速度小于1导致石头状态发生改变</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span>                        <span class="token comment">//添加一个玩家朝向的力，力的大小暂时定 40</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到条件中有一个是判断是否为<code>HitNothing</code>，我们可以利用判断石头是否为接近于静止时为条件，这里我们就要回去<code>Rock.cs</code>做一些修改了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rb<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span><span class="token comment">//防止石头一生成时速度为0导致状态发生改变</span>    <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//固定帧更新</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>sqrMagnitude <span class="token operator">&lt;</span> <span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向量的平方</span>        rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后别忘了在<code>MouseManager.cs</code>加上代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> point <span class="token operator">=</span> hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//点击石头等对象用</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="为石头加上爆裂特效"><a href="#为石头加上爆裂特效" class="headerlink" title="为石头加上爆裂特效"></a>为石头加上爆裂特效</h1><p>最后我们想在石头打到石头人时有一个爆裂碎石特效，这里就要用到<code>Particle System</code>了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/efcac51c11a3459cb6e1cfad55ff677a.png" alt="3.png" style="zoom:80%;" /><p>创建好之后我们按照下图参考设置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/2a5fef602fe948eab2649b98a3f07f83.png" alt="5.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/529e6ea5fe1141afb30b34135e7b8018.png" alt="6.png" style="zoom:80%;" /><img src="https://p6-tt.byteimg.com/origin/pgc-image/e34343a1983440909f77ce88719261e3.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/973530a9742240a7bc989b50a5ce86fb.png" alt="8.png" style="zoom:80%;" /><p>自己多多测试一下效果，满意之后我们就可以改个名将它保存为一个素材放好先，然后不要忘了把地图上刚刚调试的删除</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/4b40b473872f4223a4aafecdb889c930.png" alt="9.png" style="zoom:80%;" /><p>最后再在<code>Rock.cs</code>上修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">GameObject</span> RockBreakParticle<span class="token punctuation">;</span><span class="token comment">//石头爆裂特效，供外界拖拽进来</span><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    Instantiate        <span class="token punctuation">(</span>RockBreakParticle<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//击中敌人时产生爆裂特效</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后不要忘了把石头爆裂的特效拖进去设置面板里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/272290cea6af4b3a8f67fbe952186662.png" alt="10.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人&lt;/p&gt;
&lt;h1 id=&quot;实现石头击飞玩家并造成伤害&quot;&gt;&lt;a href=&quot;#实现石头击飞玩家并造成伤害&quot; class=&quot;headerlink&quot; title=&quot;实现石头击飞玩家并造</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记20-实现石头人丢出石头</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/</id>
    <published>2021-07-26T01:12:34.000Z</published>
    <updated>2021-07-26T03:00:21.294Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家</p><h1 id="编辑石头"><a href="#编辑石头" class="headerlink" title="编辑石头"></a>编辑石头</h1><p>首先我们找到石头素材拖出来，由于我们要给它施加一个力，因此这里就要用到<code>Rigidbody(钢体)</code>组件了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/63ea4e8d49e540acb69a7ded75d37782.png" alt="2.png" style="zoom:80%;" /><p>同时石头还要与地面发生碰撞，因此还要添加一个碰撞体，这里选择的是<code>MeshCollider</code>，勾选<code>Convex</code>可以看到碰撞体积刚好适配我们的石头形状</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/ddc484a234c94603b2b16b9dd5ea0a42.png" alt="3.png" style="zoom:80%;" /><p>然后我们就要来进行写代码了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/0a42c8f078f8441ea47b3ef4af3302f8.png" alt="1.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Rigidbody</span> rb<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings(扔出石头参数设置)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> force<span class="token punctuation">;</span><span class="token comment">//丢出去的冲击力大小</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> target<span class="token punctuation">;</span><span class="token comment">//丢向的目标</span>    <span class="token keyword">private</span> <span class="token class-name">Vector3</span> direction<span class="token punctuation">;</span><span class="token comment">//丢出去的方向</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//防止丢出去那一刹那玩家脱离丢失目标导致石头生成不出来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PlayerController<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>                <span class="token comment">//Vector3.up是想在石头丢出去的时候上升一个高度</span>        direction <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position <span class="token operator">+</span> Vector3<span class="token punctuation">.</span>up<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>        <span class="token comment">//Impulse是冲击力的模式</span>        rb<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>direction <span class="token operator">*</span> force<span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们将石头素材保存一个模板对象</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/735c192da1924614a7f5e0f0ee01b428.png" alt="4.png" style="zoom:80%;" /><h1 id="进一步完善石头人"><a href="#进一步完善石头人" class="headerlink" title="进一步完善石头人"></a>进一步完善石头人</h1><p>随后我们再次编辑石头人，因为我们的石头是从石头人的手上丢出去的，因此我们就要获得手的坐标，即下面的对象坐标</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/0cdbbddf408c42e6a443e151c343ce6b.png" alt="5.png" style="zoom:80%;" /><p>知道这个后我们暂时放在一边，来编写一下石头人的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Rock Settings（丢石头攻击的相关设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> rockPrefab<span class="token punctuation">;</span><span class="token comment">//石头素材</span><span class="token keyword">public</span> <span class="token class-name">Transform</span> handPos<span class="token punctuation">;</span><span class="token comment">//丢出石头的手的坐标</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ThrowRock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建石头对象，第三个参数是旋转，这里选择维持初始旋转</span>        <span class="token class-name">GameObject</span> rock <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>rockPrefab<span class="token punctuation">,</span>handPos<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>        rock<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>target <span class="token operator">=</span> attackTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把石头人的动画事件添加上去</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/6ec880f34ce24caab5c2270d61e5d04a.png" alt="6.png" style="zoom:80%;" /><p>最后别忘了还要选择石头的素材（就是我们刚刚保存好的素材模板），以及手的坐标</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/29b7a5e0ae72481a933c5728c35ca1b9.png" alt="7.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家&lt;/p&gt;
&lt;h1 id=&quot;编辑石头&quot;&gt;&lt;a href=&quot;#编辑石头&quot; class=&quot;headerlink&quot; title=&quot;编辑石头&quot;&gt;&lt;/a&gt;编辑石头&lt;/h1&gt;&lt;p&gt;首先我们找到石头素材拖出来，由于我们要</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记19-设置石头人</title>
    <link href="http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
    <id>http://sakura-pub.top/UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/</id>
    <published>2021-07-25T04:09:19.000Z</published>
    <updated>2021-07-25T06:52:30.857Z</updated>
    
    <content type="html"><![CDATA[<p>这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少</p><h1 id="设置动画"><a href="#设置动画" class="headerlink" title="设置动画"></a>设置动画</h1><p>我们去浏览石头人的动画可以发现，<code>Attack01</code>是类似拿起石头丢我们，它才是技能攻击，而<code>Attack02</code>是击晕玩家的攻击动画，可以作为普通攻击来使，因此我们在调整攻击动画时要注意分清</p><p>我们的动画控制器文件就选择是基于<code>兽人</code>的动画来完成，创建一个<code>New Animator Override Controller</code>，模板选择为兽人，然后再一个个动画替换上去</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/cbf3634f05844a5f98fed856698b1a5a.png" alt="1.png" style="zoom:80%;" /><p>其中<code>Run</code>并没有自带动画，我们可以用<code>Walk</code>代替</p><h1 id="编写代码文件"><a href="#编写代码文件" class="headerlink" title="编写代码文件"></a>编写代码文件</h1><p>我们像兽人代码文件那样单独创一个代码文件给石头人用，并且也是要继承<code>EnemyController</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Golem</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（石头人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//石头人击飞玩家</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> targetState <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> <span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>            targetState<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>characterStates<span class="token punctuation">,</span>targetState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再添加动画事件就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少&lt;/p&gt;
&lt;h1 id=&quot;设置动画&quot;&gt;&lt;a href=&quot;#设置动画&quot; class=&quot;headerlink&quot; title=&quot;设置动画&quot;&gt;&lt;/a&gt;设置动画&lt;/h1&gt;&lt;p&gt;我们去浏览石头人的动画可以发现，&lt;code&gt;At</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.top/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.top/tags/Unity/"/>
    
  </entry>
  
</feed>
