<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🌸樱花酒吧🍻</title>
  
  <subtitle>🌸Sakura-Pub🍻</subtitle>
  <link href="http://sakura-pub.ltd/atom.xml" rel="self"/>
  
  <link href="http://sakura-pub.ltd/"/>
  <updated>2021-08-15T15:52:19.237Z</updated>
  <id>http://sakura-pub.ltd/</id>
  
  <author>
    <name>Sakura.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode周赛254场</title>
    <link href="http://sakura-pub.ltd/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/"/>
    <id>http://sakura-pub.ltd/LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/</id>
    <published>2021-08-15T15:51:40.000Z</published>
    <updated>2021-08-15T15:52:19.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode周赛第254场"><a href="#LeetCode周赛第254场" class="headerlink" title="LeetCode周赛第254场"></a>LeetCode周赛第254场</h1><p>这场周赛再次给虐惨了，做到第二题就卡住了没有思路，争取下次周赛可以做到第三题<img src="https://i0.hdslb.com/bfs/emote/f2b3aee7e521de7799d4e3aa379b01be032698ac.png@112w_112h.webp" alt="[跪了]"></p><h2 id="5843-作为子字符串出现在单词中的字符串数目-—（简单）"><a href="#5843-作为子字符串出现在单词中的字符串数目-—（简单）" class="headerlink" title="5843. 作为子字符串出现在单词中的字符串数目  —（简单）"></a><a href="https://leetcode-cn.com/problems/number-of-strings-that-appear-as-substrings-in-word/">5843. 作为子字符串出现在单词中的字符串数目</a>  —（简单）</h2><p>给你一个字符串数组 patterns 和一个字符串 word ，统计 patterns 中有多少个字符串是 word 的子字符串。返回字符串数目。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><p>示例 1：</p><blockquote><p>输入：patterns = [“a”,”abc”,”bc”,”d”], word = “abc”<br>输出：3<br>解释：</p><ul><li>“a” 是 “abc” 的子字符串。</li><li>“abc” 是 “abc” 的子字符串。</li><li>“bc” 是 “abc” 的子字符串。</li><li>“d” 不是 “abc” 的子字符串。</li></ul><p>patterns 中有 3 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 2：</p><blockquote><p>输入：patterns = [“a”,”b”,”c”], word = “aaaaabbbbb”<br>输出：2<br>解释：</p><ul><li>“a” 是 “aaaaabbbbb” 的子字符串。</li><li>“b” 是 “aaaaabbbbb” 的子字符串。</li><li>“c” 不是 “aaaaabbbbb” 的字符串。</li></ul><p>patterns 中有 2 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 3：</p><blockquote><p>输入：patterns = [“a”,”a”,”a”], word = “ab”<br>输出：3<br>解释：patterns 中的每个字符串都作为子字符串出现在 word “ab” 中。</p></blockquote><p>提示：</p><ul><li>1 &lt;= patterns.length &lt;= 100</li><li>1 &lt;= patterns[i].length &lt;= 100</li><li>1 &lt;= word.length &lt;= 100</li><li>patterns[i] 和 word 由小写英文字母组成</li></ul><p>题目刚开始做的时候脑子没转过来，天真地想自己实现如何查找子字符串，到后面醒悟才想起可以用库函数，直接提交下一题（提交时还错了一次，哭）</p><p>注意这里<code>string::find()</code>可以用来查找子字符串，如果找到了则会返回子串第一个字符的下标序号，找不到则会返回<code>string::npos</code>该定值为<code>string::size_type</code>类型，即<code>size_t==usigned int</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numOfStrings</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> patterns<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token operator">:</span>patterns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string<span class="token operator">::</span>size_type pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5832-构造元素不等于两相邻元素平均值的数组-—（中等）"><a href="#5832-构造元素不等于两相邻元素平均值的数组-—（中等）" class="headerlink" title="5832. 构造元素不等于两相邻元素平均值的数组  —（中等）"></a><a href="https://leetcode-cn.com/problems/array-with-elements-not-equal-to-average-of-neighbors/">5832. 构造元素不等于两相邻元素平均值的数组</a>  —（中等）</h2><p>给你一个 下标从 0 开始 的数组 nums ，数组由若干 互不相同的 整数组成。你打算重新排列数组中的元素以满足：重排后，数组中的每个元素都 不等于 其两侧相邻元素的 平均值 。</p><p>更公式化的说法是，重新排列的数组应当满足这一属性：对于范围 1 &lt;= i &lt; nums.length - 1 中的每个 i ，(nums[i-1] + nums[i+1]) / 2 不等于 nums[i] 均成立 。</p><p>返回满足题意的任一重排结果。</p><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,4,5]<br>输出：[1,2,4,5,3]<br>解释：<br>i=1, nums[i] = 2, 两相邻元素平均值为 (1+4) / 2 = 2.5<br>i=2, nums[i] = 4, 两相邻元素平均值为 (2+5) / 2 = 3.5<br>i=3, nums[i] = 5, 两相邻元素平均值为 (4+3) / 2 = 3.5</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [6,2,0,9,7]<br>输出：[9,7,6,2,0]<br>解释：<br>i=1, nums[i] = 7, 两相邻元素平均值为 (9+6) / 2 = 7.5<br>i=2, nums[i] = 6, 两相邻元素平均值为 (7+2) / 2 = 4.5<br>i=3, nums[i] = 2, 两相邻元素平均值为 (6+0) / 2 = 3</p></blockquote><p>提示：</p><ul><li>3 &lt;= nums.length &lt;= 105</li><li>0 &lt;= nums[i] &lt;= 105</li></ul><p>这一道题刚拿到就写不出来了，完全没有思路，感觉和平时做的题型不一样</p><p>后来看了别人的作答之后才发现是挺简单的一道题，主要脑筋转不过来</p><p>这里拿数组<code>nums=[6,2,0,9,7]</code>来举例，简单的思路就是：</p><ol><li>先把数组排序，从小到大排好，eg：<code>nums=[0,2,6,7,9]</code></li><li>新建一个用来返回的空数组<code>res</code>，并按顺序将<code>nums</code>数组的数填充完<code>res</code>数组的奇数下标位（这里可以用一个指针<code>ans=0</code>指向nums表示填充到哪个数字），eg：<code>res=[0,-1,2,-1,6]</code>其中<code>-1</code>表示还没填充的位</li><li>最后再把偶数位也填充完，<code>res=[0,7,2,9,6]</code></li><li>此时在<code>res</code>数组中任意一位数要么是都大于两边的数，要么是都小于两边的数，即满足题目的要求，该数肯定不会等于两边数之和的平均数</li></ol><p>知道这个方法之后还是觉得挺简单的，主要就是想不到这个方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rearrangeArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>nLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode周赛第254场&quot;&gt;&lt;a href=&quot;#LeetCode周赛第254场&quot; class=&quot;headerlink&quot; title=&quot;LeetCode周赛第254场&quot;&gt;&lt;/a&gt;LeetCode周赛第254场&lt;/h1&gt;&lt;p&gt;这场周赛再次给虐惨了，做到第二题就卡</summary>
      
    
    
    
    <category term="LeetCode刷题笔记" scheme="http://sakura-pub.ltd/categories/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="http://sakura-pub.ltd/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记30-渐入渐出效果</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B030-%E6%B8%90%E5%85%A5%E6%B8%90%E5%87%BA%E6%95%88%E6%9E%9C/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B030-%E6%B8%90%E5%85%A5%E6%B8%90%E5%87%BA%E6%95%88%E6%9E%9C/</id>
    <published>2021-08-06T00:43:07.000Z</published>
    <updated>2021-08-06T02:08:23.952Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们再来完善下游戏从菜单到场景中的过渡动画</p><h1 id="用TimeLine制作菜单过渡动画"><a href="#用TimeLine制作菜单过渡动画" class="headerlink" title="用TimeLine制作菜单过渡动画"></a>用TimeLine制作菜单过渡动画</h1><p>上一章节说过，我想要制作一个当玩家点击New Game按钮时，相机有一个穿越标题的动画，同时标题界面的小狗也会朝着传送门前进，这时候我们就可以用到<code>TimeLine</code>来制作动画了</p><img src="https://i.loli.net/2021/08/06/LtZ83H1fDnNyxw9.png" style="zoom:80%;" /><p>我们新建一个Empty Object，选中它然后在TimeLine中点击<code>Create</code>，找个地方保存文件</p><img src="https://i.loli.net/2021/08/06/ZAPzcGDjSE1vLti.png" style="zoom:80%;" /><p>选中我们的相机，拖拽到TimeLine中，选择<code>Add Animation Track</code></p><img src="https://i.loli.net/2021/08/06/eRFhrvz6bAtsOBZ.png" style="zoom:80%;" /><p>这时候就可以进行录制了，录制前后是我们相机的坐标，记录的就是整个相机的移动过程，这时候我们对着相机的<code>Position</code>和<code>Rotation</code>右键菜单选择<code>Add Key</code>即可以记录当前坐标位置和旋转角度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里我们再来完善下游戏从菜单到场景中的过渡动画&lt;/p&gt;
&lt;h1 id=&quot;用TimeLine制作菜单过渡动画&quot;&gt;&lt;a href=&quot;#用TimeLine制作菜单过渡动画&quot; class=&quot;headerlink&quot; title=&quot;用TimeLine制作菜单过渡动画&quot;&gt;&lt;/a&gt;用Tim</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记29-制作主菜单界面</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/</id>
    <published>2021-08-05T01:15:59.000Z</published>
    <updated>2021-08-05T07:07:43.002Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们来为游戏制作一个主菜单界面</p><h1 id="在新场景中绘制画布"><a href="#在新场景中绘制画布" class="headerlink" title="在新场景中绘制画布"></a>在新场景中绘制画布</h1><p>我们要专门为我们的菜单新建一个场景，而菜单则是在这个新场景中绘制的</p><p>我这里先把场景搭建好了，注意我们在摆放人物的时候可以点击右键菜单进行<code>脱包</code>处理，这样我们移除组件时就不会影响到素材里面的模板了</p><img src="https://i.loli.net/2021/08/05/29wfpAg8ZEyLdDG.png" style="zoom:80%;" /><p>然后我们也把UI摆放好</p><img src="https://i.loli.net/2021/08/05/sHZyaWhDmL6qEvK.png" style="zoom:80%;" /><p>同时我们也可以给UI添加一些视觉效果的处理</p><h2 id="将UI添加立体效果"><a href="#将UI添加立体效果" class="headerlink" title="将UI添加立体效果"></a>将UI添加立体效果</h2><p>这里可以添加一种效果，我想点击new game 时候相机会穿过标题UI然后靠近传送门的样式，下面就来实现一下</p><p>我们选中画布，然后如下图设置，将<code>Render Mode</code>选择为<code>Camera</code>，再把摄像机拖到下面的框框里</p><img src="https://i.loli.net/2021/08/05/VQnMjOfywAeiNTh.png" style="zoom:80%;" /><p>这时候点击运行会发现按钮给场景遮挡住了，这时候我们可以调一下<code>Plane Distance</code>，比如改成1，按钮就又可以看到了</p><p>最后我们再把<code>Render Mode</code>改为<code>World Space</code>，然后尝试向前移动相机，就可以发现达成了相机穿越标题的效果了，之所以要经过上面的步骤是因为可以让Unity自动调节UI的合适位置</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>UI建立好之后我们就要来实现按钮的功能了</p><img src="https://i.loli.net/2021/08/05/uZCjd6oGp7DJqe3.png" style="zoom:80%;" /><p>按钮最主要就是监听事件，下面先单独来写各种功能的方法，最后再配上整个代码文件</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><p>其中最简单的就是退出游戏，一行搞定</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QuitGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//退出游戏功能</span>        Application<span class="token punctuation">.</span><span class="token function">Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NewGame"><a href="#NewGame" class="headerlink" title="NewGame"></a>NewGame</h2><p>然后是创建新游戏，这里就要涉及多个代码文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NewGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//清楚所有存档</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">DeleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转换场景</span>        <span class="token comment">//会在SceneController里面完成</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载第一个场景</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//转换场景，可用于在标题界面过渡到第一个界面中</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> scene<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>scene<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传入参数不为空</span>            <span class="token comment">//加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载人物，在GMaeManager中创建了一个用于获得初始位置的方法</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> player <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//结束协程</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载第一个场景，可以将这个直接放在标题界面的功能里</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token string">"3D RPG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GmaeManager.cs</span><span class="token comment">//获得场景加载入口，这里是标题界面进入主场景时用于获得落地点</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Transform</span> <span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>destinationTag<span class="token operator">==</span>TransitionDestination<span class="token punctuation">.</span>DestinationTag<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>                <span class="token keyword">return</span> item<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意要把几个Manager对象复制到标题场景中</p><h2 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h2><p>由于我们游戏有多个场景，因此在加载功能中我们还要记住上次保存玩家是停留在哪一个场景，从而在加载存档时判断要加载哪一个场景的画面</p><p>也是有多个代码文件需要修改，需要注意区分</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//记录保存场景的名字</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SceneName<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        <span class="token comment">//在保存数据同时保存玩家停留在哪个场景</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//Continue</span>    <span class="token comment">//用于加载游戏的加载方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> sceneName <span class="token operator">=</span> SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>SceneName<span class="token punctuation">;</span><span class="token comment">//获得上次保存场景名称，可能为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sceneName<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不为空的话就加载场景</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//PlayerController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册GmaeManager</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加载人物数据</span>SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ContinueGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//转换场景，读取进度</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游戏中Esc返回主菜单"><a href="#游戏中Esc返回主菜单" class="headerlink" title="游戏中Esc返回主菜单"></a>游戏中Esc返回主菜单</h2><p>我们还有一个功能是在游戏内必要的，就是返回主菜单功能，这里也来实现一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//游戏中Esc回到主菜单</span>           SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>           <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>           <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//加载标题场景协程</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载标题方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这我们就成功实现了主菜单到游戏再到主菜单的过渡效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章我们来为游戏制作一个主菜单界面&lt;/p&gt;
&lt;h1 id=&quot;在新场景中绘制画布&quot;&gt;&lt;a href=&quot;#在新场景中绘制画布&quot; class=&quot;headerlink&quot; title=&quot;在新场景中绘制画布&quot;&gt;&lt;/a&gt;在新场景中绘制画布&lt;/h1&gt;&lt;p&gt;我们要专门为我们的菜单新建一个场景</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记28-保存数据</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/</id>
    <published>2021-08-04T01:32:04.000Z</published>
    <updated>2021-08-04T02:53:20.289Z</updated>
    
    <content type="html"><![CDATA[<p>这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到</p><h1 id="认识API"><a href="#认识API" class="headerlink" title="认识API"></a>认识API</h1><p>这里我们用到两个API，一个是**<a href="https://docs.unity.cn/cn/2020.3/ScriptReference/EditorPrefs.html">PlayerPrefs</a><strong>类，虽然官方文档写的是EditorPrefs，但是他们的方法是一样的，另外一个要用到的API是</strong><a href="https://docs.unity.cn/cn/2020.3/ScriptReference/JsonUtility.ToJson.html">JsonUtility.ToJson</a>**方法</p><p>PlayerPrefs：用于本地持久化保存与读取的类，PlayerPrefs类工作原理非常简单，以键值对的形式将数据保存在文件中，然后程序可以根据这个名称取出上次保存的数值</p><p>JsonUtility.ToJson：生成对象的公共字段的 JSON 表示形式。</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>我们新建一个<code>SaveManager.cs</code>然后来编写专门管理保存读取的类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SaveManager<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切换场景不销毁</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>            <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>            <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Save</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Load</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果键值存在的话就读取</span>            JsonUtility<span class="token punctuation">.</span><span class="token function">FromJsonOverwrite</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以进游戏体验一下了，按<code>S</code>键是保存玩家当前数据，按<code>L</code>键是读取，并且保存后在下一次游戏启动时仍然可以读取数据</p><p>Windows系统可以在注册表上看到保存的数据</p><img src="https://i.loli.net/2021/08/04/jTPgFrdWL1wH96N.png" style="zoom:80%;" /><h1 id="跨场景保存读取"><a href="#跨场景保存读取" class="headerlink" title="跨场景保存读取"></a>跨场景保存读取</h1><p>既然我们在下一次开启游戏也可以读取玩家数据，那么跨场景也不在话下</p><p>去到<code>SceneController.cs</code>修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//保存数据</span>        SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>                        <span class="token comment">//读取玩家数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在加载另外一个场景前会先保存数据，在加载场景完后我们先读取数据再退出协程</p><p>这样就实现了人物数据的保存了，当然这只是保存读取了人物的生命值、经验值等数据，其它数据也可以自由发挥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到&lt;/p&gt;
&lt;h1 id=&quot;认识API&quot;&gt;&lt;a href=&quot;#认识API&quot; class=&quot;headerlink&quot; title=&quot;认识API&quot;&gt;&lt;/a&gt;认识API&lt;/h1&gt;&lt;p&gt;这里我们用到两个A</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记27-不同场景的传送</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-03T01:05:23.000Z</published>
    <updated>2021-08-03T03:25:32.587Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来实现不同场景的传送</p><p>首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧</p><p>搭建好场景后，我们就可以正式开始来实现如何跨场景传送了</p><h1 id="设置好传送门属性"><a href="#设置好传送门属性" class="headerlink" title="设置好传送门属性"></a>设置好传送门属性</h1><p>首先就是要把两个不同场景的传送门属性设置好，注意要选择不同场景传送并把名字填上</p><p>下面是主世界的传送门属性</p><img src="https://i.loli.net/2021/08/03/qSY69TCAibHz8wP.png" style="zoom:80%;" /><p>以及另外一个世界传送门的属性</p><img src="https://i.loli.net/2021/08/03/O4ymdIfH3CVZA2L.png" style="zoom:80%;" /><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>下面的代码可能有点分散，需要修改的文件比较多，会有注释写出来在哪个文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs，添加了不同场景加载时的代码</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> playerPrefab<span class="token punctuation">;</span><span class="token comment">//玩家素材对象，用来不同场景时进行加载</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>                <span class="token comment">//同场景可以不用异步，直接传送</span>                <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>                <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>sceneName<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//TODO:保存数据</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里我们要外界把人物的素材拖进去代码中，以保证传送到另外一个场景时可以加载人物出来</p><img src="https://i.loli.net/2021/08/03/xDbVRIcpGHqTy4h.png" style="zoom:80%;" /><h1 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h1><h2 id="传送报错"><a href="#传送报错" class="headerlink" title="传送报错"></a>传送报错</h2><p>此时我们传送时会报错，有好几个问题我们慢慢来看</p><p>第一个问题是要把场景放在<code>Scene in Build</code>的设置当中</p><img src="https://i.loli.net/2021/08/03/dpRCZcfYrDAUx1V.png" style="zoom:80%;" /><p>第二个问题就是我们传送到新场景后，那些Manager文件都会不存在，因此我们要把它们加入<code>DontDestory</code>的清单里</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//在GameManager.cs  SceneController.cs  MouseManager.cs加上这行代码</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止此Manager文件在切换场景时给销毁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要在<code>GameManager.cs</code>  <code>SceneController.cs</code>  <code>MouseManager.cs</code>加上上面代码，并且是要<strong>继承单例模式的代码文件</strong></p><h2 id="人物传送后无法移动"><a href="#人物传送后无法移动" class="headerlink" title="人物传送后无法移动"></a>人物传送后无法移动</h2><p>这时候人物可以传送到另外一个场景了，但是不能移动，可能有下面问题</p><p>第一个可能存在的问题就是我们第二个场景的地板没有设置成<code>Ground</code>标签，我们要设置一下</p><p>第二个问题是我们在<code>PlayerController.cs</code>中的<code>OnMouseClicked</code>事件没有加载出来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//KeyManager.Instance.OnKeyInputMove+=MoveToTarget;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材禁用时注销事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">-=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">-=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="人物传送回来相机没有跟随"><a href="#人物传送回来相机没有跟随" class="headerlink" title="人物传送回来相机没有跟随"></a>人物传送回来相机没有跟随</h2><p>接着还有一个问题就是当我们从另外一个场景传送回来时，相机的跟随就会失效，这里来修复这个问题</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GameManager.cs</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>        <span class="token comment">//外界人物对象注册同时让相机进行跟随</span>        followCamera <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CinemachineFreeLook<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在地图中查找相机</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>followCamera<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果找到相机就让它跟随</span>            followCamera<span class="token punctuation">.</span>Follow <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>            followCamera<span class="token punctuation">.</span>LookAt <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来实现不同场景的传送&lt;/p&gt;
&lt;p&gt;首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧&lt;/p&gt;
&lt;p&gt;搭建好场景后，我们就可以正式开始来实现如何跨场景传送了&lt;/p&gt;
&lt;h1 id=&quot;设置好传送门属性&quot;&gt;&lt;a href=&quot;#设置好传送门</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记26-实现同场景的传送</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</id>
    <published>2021-08-02T01:49:40.000Z</published>
    <updated>2021-08-02T04:18:18.335Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们实现同场景的传送效果</p><h1 id="调整传送门"><a href="#调整传送门" class="headerlink" title="调整传送门"></a>调整传送门</h1><p>在这之前，我们要把不同的传送门摆放好先</p><p>另外我们可能会发现点击不了传送门，这是因为传送门的box collider挡住了我们鼠标的射线，这里把它的大小改一下就行了</p><img src="https://i.loli.net/2021/08/02/LHvS6JN4idPbQOA.png" style="zoom:80%;" /><p>给传送门加上<code>Portal</code>的标签，然后再去<code>MouseManager.cs</code>修改一下鼠标的图样</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//TODO:切换鼠标贴图</span><span class="token keyword">switch</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">"Ground"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>地面行走的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>arrow<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Enemy"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击敌人的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>attack<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Portal"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击传送门图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>doorway<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//if</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Portal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//点击传送门</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写传送管理代码"><a href="#编写传送管理代码" class="headerlink" title="编写传送管理代码"></a>编写传送管理代码</h1><p>我们创建一个<code>SceneController.cs</code>，之所以不是用Manager是因为在Unity有个<code>SceneManager</code>同名的文件存在</p><img src="https://i.loli.net/2021/08/02/FLvOK3csbIP45Xz.png" style="zoom:80%;" /><p>注意此文件继承的是<strong>单例模式</strong>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>SceneManagement</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SceneController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SceneController<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">GameObject</span> player<span class="token punctuation">;</span><span class="token comment">//玩家</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>            <span class="token comment">//同场景可以不用异步，直接传送</span>            <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>            <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先获得玩家的对象</span>        player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>        <span class="token comment">//获得目的地传送门对象</span>        <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象的坐标和旋转角度</span>        player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//恢复导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">TransitionDestination</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过传送门目的地的标签寻找目的地传送门所在位置</span>        <span class="token class-name"><span class="token keyword">var</span></span> entrances <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>entrances<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>destinationTag <span class="token operator">==</span> destinationTag<span class="token punctuation">)</span><span class="token comment">//目的地传送门标签匹配的话</span>                <span class="token keyword">return</span> entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外当我们玩家到达传送门，我希望它可以按键触发传送的，所以这里去到<code>TransitionPoint.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//触发器设置</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>E<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> canTrans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//按键触发传送</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个工作就是要把我们的<code>TransitionDestination.cs</code>作为组件添加在传送门子对象的点上</p><img src="https://i.loli.net/2021/08/02/3Jm9QXySOEiqdRF.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/02/Hen9PBroRJYcFjp.png" style="zoom:80%;" /><p>这个点是用来设置当前的点是属于哪一个标签的，我们就把一个传送门当做入口设为<code>ENTER</code>，另一个传送门当做目的地设为<code>A</code></p><p>另外去到传送门中，目的地也要进行对应的设置，入口传送门的目的地是<code>A</code>，反过来另外一个传送门想过来就要设置目的地为<code>ENTER</code></p><p><strong>注意</strong>：我们最好不要设置多个同一标签的传送门，可能会出现问题</p><p>最后，建立一个空对象，并把<code>SceneController.cs</code>作为组件附上去</p><img src="https://i.loli.net/2021/08/02/caN1CyLrJU76bnI.png" style="zoom:80%;" /><h1 id="Trigger无法触发问题"><a href="#Trigger无法触发问题" class="headerlink" title="Trigger无法触发问题"></a>Trigger无法触发问题</h1><p>如果函数内的Trigger事件没有触发的话，可能是玩家上没有添加钢体的原因，把钢体添加在主动碰撞的物体上（这里是玩家），然后把传送门和玩家的碰撞体组件中<code>IsTrigger</code>勾选上就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里我们实现同场景的传送效果&lt;/p&gt;
&lt;h1 id=&quot;调整传送门&quot;&gt;&lt;a href=&quot;#调整传送门&quot; class=&quot;headerlink&quot; title=&quot;调整传送门&quot;&gt;&lt;/a&gt;调整传送门&lt;/h1&gt;&lt;p&gt;在这之前，我们要把不同的传送门摆放好先&lt;/p&gt;
&lt;p&gt;另外我们可能会发现</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记25-制作传送门</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/</id>
    <published>2021-08-01T01:53:22.000Z</published>
    <updated>2021-08-01T03:53:51.612Z</updated>
    
    <content type="html"><![CDATA[<p>我们这一章来制作一个传送门以供后面玩家切换不同场景时使用</p><h1 id="制作传送门Shader"><a href="#制作传送门Shader" class="headerlink" title="制作传送门Shader"></a>制作传送门Shader</h1><p>首先就是要来制作传送门的Shader，新建一个<code>Lit Shader Graph</code>，这是一个有光影响的shader，菜单中还有一个叫做Unlit Shader Graph就是没有光影响的</p><p>这里建好后起名为<code>Portal Shader</code></p><img src="https://i.loli.net/2021/08/01/pd7nMhKZHVBm4ar.png" style="zoom:80%;" /><p>注意里边的设置，Surface选择<code>Transparent</code>就是有透明通道的意思，然后勾选<code>Two Sided</code>显示两面</p><img src="https://i.loli.net/2021/08/01/k7eZSNDKwTt2Y43.png" style="zoom:80%;" /><p>这里直接上做好的图，颜色的属性面板中注意要选择<code>HDR</code></p><img src="https://i.loli.net/2021/08/01/nwoQLuWKhYSR8lp.png" style="zoom:80%;" /><p>做好后点击左上角<code>Save Asset</code>保存，然后右键<code>Shder Graph</code>创建为一个<code>Materials</code></p><img src="https://i.loli.net/2021/08/01/ecxz9EY5KfGgMOq.png" style="zoom:80%;" /><p>这样一个传送门的Shader就创建好了</p><h1 id="制作传送门"><a href="#制作传送门" class="headerlink" title="制作传送门"></a>制作传送门</h1><p>回到地图上，我们创建一个<code>Quad</code></p><img src="https://i.loli.net/2021/08/01/1ULfhYbuIgzD529.png" style="zoom:80%;" /><p>然后把刚刚的传送门材质附上去，然后就可以看到传送门的雏形了</p><img src="https://i.loli.net/2021/08/01/oGMurVFip1O8sjA.png" style="zoom:80%;" /><p>之后可以创建一个子对象，表示传送点，以后当玩家触碰这个点便可以触发传送事件</p><img src="https://i.loli.net/2021/08/01/z65KBjWylxAvGIo.png" style="zoom:80%;" /><p>如图我还将这个点附上了一个蓝色图标，代表这两个传送门是互通的，一对的，可以起到一个标记作用</p><h1 id="编写传送门基本代码"><a href="#编写传送门基本代码" class="headerlink" title="编写传送门基本代码"></a>编写传送门基本代码</h1><p>这里编写一下基本的传送门代码，详细的代码完善留在下一章节</p><img src="https://i.loli.net/2021/08/01/aVGXZyRzq36d8pt.png" style="zoom:80%;" /><p>这里的<code>TransitionPoint</code>挂载在传送门上，而<code>TransitionDestination</code>挂载在蓝色的点上</p><p>我们先来编辑TransitionPoint.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionPoint.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionPoint</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TransitionType</span><span class="token punctuation">&#123;</span><span class="token comment">//传送状态</span>        SameScene<span class="token punctuation">,</span>DifferentScene    <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Transition Info（传送门设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">;</span><span class="token comment">//记录场景名称</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionType</span> transitionType<span class="token punctuation">;</span><span class="token comment">//记录传送状态，同场景传送就外边选择第一个，不同场景就选择第二个</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token comment">//传送点目的地</span>    <span class="token comment">//触发器设置</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerStay</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家在传送门区域内</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerExit</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家离开了传送门区域</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中传送点目的地对应的在TransitionDestination.cs中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionDestination.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionDestination</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DestinationTag</span><span class="token punctuation">&#123;</span><span class="token comment">//传送点标签</span>        ENTER<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的A,B,C可以自行修改，表示的是不同传送门中的不同地方，类似于一个站牌</p><p>我们还注意到在前面<code>TransitionPoint.cs</code>中有触发的代码，这里要到Unity属性面板中把触发<code>isTrigger</code>选项勾上，否则不能触发<code>OnTriggerStay()</code>和<code>OnTriggerExit()</code>方法</p><img src="https://i.loli.net/2021/08/01/G7DPlvBtNd5Lw9Y.png" style="zoom:80%;" /><p>当然，现在用到的是<code>Mesh Collider</code>，这里触发面积只是一个平面，我们可以换成<code>Box Collider</code>，让它的触发面积更大一些</p><img src="https://i.loli.net/2021/08/01/mPRClNHWdA6jufi.png" style="zoom:80%;" /><p>弄好这些后，记得把传送门保存为一个素材</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们这一章来制作一个传送门以供后面玩家切换不同场景时使用&lt;/p&gt;
&lt;h1 id=&quot;制作传送门Shader&quot;&gt;&lt;a href=&quot;#制作传送门Shader&quot; class=&quot;headerlink&quot; title=&quot;制作传送门Shader&quot;&gt;&lt;/a&gt;制作传送门Shader&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记24-制作玩家状态条</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/</id>
    <published>2021-07-31T02:35:09.000Z</published>
    <updated>2021-07-31T03:56:36.736Z</updated>
    
    <content type="html"><![CDATA[<p>本章来制作玩家的状态条，如血量条，经验条等</p><h1 id="编辑UI布局"><a href="#编辑UI布局" class="headerlink" title="编辑UI布局"></a>编辑UI布局</h1><p>第一步也是建立一个画布，模式使用默认的<code>Screen Space</code>覆盖屏幕</p><p>值得注意是为了使状态条可以随着屏幕的分辨率大小而切换，我们的<code>UI Scale Mode</code>要设置成<code>Scale With Scree</code></p><img src="https://www.hualigs.cn/image/6104bb2a28b1d.jpg" style="zoom:80%;" /><p>之后创建好UI，可以在<code>Scene</code>视图的2D模式下调整到合适的位置，然后在<code>Game</code>视图下预览效果，可以自行多多尝试</p><p>最后的效果如下</p><img src="https://i.loli.net/2021/07/31/xh2a6d1GFWIAQB3.png" style="zoom:80%;" /><p>注意这里的文字我用了自定义的字体，在Unity中只用把你想要用的物体拖拽进来分类好，就可以直接在文字UI设置面板上选择使用了</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>接下来就是编写代码来管理我们的UI了</p><img src="https://i.loli.net/2021/07/31/WEluxrQkRazFKf5.png" style="zoom:80%;" /><p>然后把代码作为组件添加到上面创建的画布当中，接着就是编写代码了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>UI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerHealthUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于我们的人物信息栏最终会保存为一个prefab</span>    <span class="token comment">//因此我们可以不使用拖拽gameobject方式来获得对象</span>    <span class="token comment">//可以直接使用获得对象的子对象方式</span>    <span class="token class-name">Text</span> levelText<span class="token punctuation">;</span><span class="token comment">//获得text文本</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//生命值拖拽条</span>    <span class="token class-name">Image</span> expSlider<span class="token punctuation">;</span><span class="token comment">//经验拖拽条</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注意GetChild填写的参数类似于数组下标，第一个对象的索引是0</span>        levelText <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Text<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得文字对象</span>        healthSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得生命拖拽条</span>        expSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得经验值拖拽条</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        levelText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Level  "</span> <span class="token operator">+</span>             GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//00是规定给它的一个格式，比如01 02....</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过GameManager类来获得player的states</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>currentHealth<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>MaxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentExp<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>baseExp<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        expSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是借助了<code>GameManager.cs</code>中的单例模式实例化的方式来获得player的状态信息，因为先前我用了外界注册的方式把玩家的信息赋予了GameManager里面的成员变量</p><p>到这我们就大功告成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本章来制作玩家的状态条，如血量条，经验条等&lt;/p&gt;
&lt;h1 id=&quot;编辑UI布局&quot;&gt;&lt;a href=&quot;#编辑UI布局&quot; class=&quot;headerlink&quot; title=&quot;编辑UI布局&quot;&gt;&lt;/a&gt;编辑UI布局&lt;/h1&gt;&lt;p&gt;第一步也是建立一个画布，模式使用默认的&lt;code&gt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记23-制作玩家的升级</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/</id>
    <published>2021-07-30T02:05:51.000Z</published>
    <updated>2021-07-31T04:10:05.890Z</updated>
    
    <content type="html"><![CDATA[<p>在本章中我们来制作玩家的经验系统，并附有升级功能</p><h1 id="扩展CharacterData-SO"><a href="#扩展CharacterData-SO" class="headerlink" title="扩展CharacterData_SO"></a>扩展CharacterData_SO</h1><p>我们首先打开<code>CharacterData_SO.cs</code>添加一些额外的属性进去，同时写一个升级时处理的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Character States/Data"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"States Info（属性信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">;</span><span class="token comment">//最大生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">;</span><span class="token comment">//当前生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseDefence<span class="token punctuation">;</span><span class="token comment">//基础防御值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentDefence<span class="token punctuation">;</span><span class="token comment">//当前防御值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Kill（击杀信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> killPoint<span class="token punctuation">;</span><span class="token comment">//击杀后掉落的经验值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Level（等级信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentLevel<span class="token punctuation">;</span><span class="token comment">//当前等级</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxLevel<span class="token punctuation">;</span><span class="token comment">//最大等级数</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseExp<span class="token punctuation">;</span><span class="token comment">//基础经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentExp<span class="token punctuation">;</span><span class="token comment">//当前经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> levelBuff<span class="token punctuation">;</span><span class="token comment">//每次升级整体属性提升的百分比</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> LevelMultiplier<span class="token punctuation">&#123;</span>        <span class="token comment">//升级提升属性加的倍率</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>currentLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> levelBuff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentExp <span class="token operator">+=</span> point<span class="token punctuation">;</span><span class="token comment">//把外界的经验加进来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentExp <span class="token operator">>=</span> baseExp<span class="token punctuation">)</span>            <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这个方法中添加升级时想提升的数据</span>        <span class="token comment">//将current+1限制在[0,maxLevel]闭区间中</span>        currentLevel <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>currentLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>maxLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将经验和生命值按照每一等级不同倍率增长（也可以使用固定值level buff）</span>        baseExp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>baseExp<span class="token operator">*</span>LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxHealth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>maxHealth <span class="token operator">*</span> LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentHealth <span class="token operator">=</span> maxHealth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再去到<code>CharacterStates.cs</code>做最后的修改</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//打死怪后加经验</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        attacker<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//石头反击石头人的攻击方式</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//TODO:加经验</span>    <span class="token comment">//可以通过GameManager来访问玩家的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们去到人物的<code>PlayerData</code>还有每个敌人的<code>Data</code>添加属性就可以了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/bc33680758884eb88e5bfed71402eaa5.png" alt="1.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本章中我们来制作玩家的经验系统，并附有升级功能&lt;/p&gt;
&lt;h1 id=&quot;扩展CharacterData-SO&quot;&gt;&lt;a href=&quot;#扩展CharacterData-SO&quot; class=&quot;headerlink&quot; title=&quot;扩展CharacterData_SO&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记22-制作血量条UI</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/</id>
    <published>2021-07-29T01:28:59.000Z</published>
    <updated>2021-07-29T10:01:08.942Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来制作一下敌人的血量条</p><h1 id="创建血条UI"><a href="#创建血条UI" class="headerlink" title="创建血条UI"></a>创建血条UI</h1><h2 id="创建血条基础形状（Canvas与Image）"><a href="#创建血条基础形状（Canvas与Image）" class="headerlink" title="创建血条基础形状（Canvas与Image）"></a>创建血条基础形状（Canvas与Image）</h2><p>首先在<code>Hierachy</code>窗口中创建一个<code>Canvas</code>（画布），并将它命名为<code>HealthBarCanvas</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/a4bddbb255de4c87825a7866dd064269.png" alt="1.png" style="zoom:80%;" /><p>之后我们改一下<code>HealthBarCanvas</code>设置，并把坐标重置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c8fa921e76f4decb29167a49ad882f1.png" alt="2.png" style="zoom:80%;" /><p>随后我们在这个画布的基础上创建一个<code>Image</code>，并将它命名为<code>Bar Holder</code>，然后在把它的坐标改一下，改成像一个血条的大小</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/48339de2f8e6417f94b09466da3b7428.png" alt="3.png" style="zoom:80%;" /><p>我们就可以在Scene窗口上看到血条的初始样子了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/ccf344e88ab44a2e92fc6563d1339523.png" alt="4.png" style="zoom:80%;" /><h2 id="创建血条底层图像（Source-Image）"><a href="#创建血条底层图像（Source-Image）" class="headerlink" title="创建血条底层图像（Source Image）"></a>创建血条底层图像（Source Image）</h2><p>接着我们要为<code>Bar Holder</code>导入一个<code>Source Image</code>作为血条的底层，这里就选择自己创建一个图像作为它的底层</p><p>首先要打开<code>Package Manager</code>安装一下<code>2D Sprite</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c103cd1256d4e5cb07ed10165846528.png" alt="5.png" style="zoom:80%;" /><p>接着我们创建一个路径专门存放UI相关的对象，这里创建一个<code>Square</code>方形图像</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/73d842b512f940698760bf2547bbf82c.png" alt="6.png" style="zoom:80%;" /><p>再把这个方形图像应用在刚刚的<code>Source Image</code>中就行了</p><p>由于现在我们创建出来的是一个血条的底层，那么我们可以把它的颜色设置为红色底，待会有个上层图像设置成绿色，这样弄出来就有血条的样子了</p><p>因此我们这里把颜色改为红色（这里我把颜色的透明度改成了 150 ）</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/9d082235f7dc478ca60891914aaa2de1.png" alt="7.png" style="zoom:80%;" /><h2 id="创建血条上层图像"><a href="#创建血条上层图像" class="headerlink" title="创建血条上层图像"></a>创建血条上层图像</h2><p>我们在<code>Bar Holder</code>的基础上再创建一个图像<code>Image</code>，命名为<code>Current Health</code>，并将宽度和高度设置成和底层一样（2.5和0.25）</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/13abb2c92ea14215973e66d999182fa4.png" alt="8.png" style="zoom:80%;" /><p>同时<code>Source Image</code>还是和刚刚一样，颜色调为绿色</p><p>唯一不同的是图片的类型<code>Image Type</code>要调为<strong>填充</strong><code>Filled</code>，填充的方式为<strong>水平填充</strong><code>Horizontal</code>，之后我们就可以通过调节填充数量<code>Fill Amount</code>来控制绿色条的长度，从而代表血量的多少了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/f5d505bfb9e74b98a2e2ffdaa4b81b15.png" alt="9.png" style="zoom:80%;" /><p>效果图如下</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/72681600544d4713a09b34e971078333.png" alt="10.png" style="zoom:80%;" /><p>这样一个简陋的血条就弄好了，我们将它保存为一个素材</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/7d681c103df74db1921f9235c27f02e1.png" alt="11.png" style="zoom:80%;" /><h2 id="设置血条在敌人上方的位置"><a href="#设置血条在敌人上方的位置" class="headerlink" title="设置血条在敌人上方的位置"></a>设置血条在敌人上方的位置</h2><p>由于我们每个敌人高矮不同，就导致了血条在不同敌人的位置也不一样，同时也是为了方便我们后面的代码，这里我们要为每个敌人设置一下血条应该出现的位置</p><p>最直接的办法就是为每个敌人对象再创建一个子对象来记录血条位置</p><p>我们打开<code>Prefabs ---&gt; Characters</code>目录编辑敌人素材，这里拿史莱姆为例子</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/a4ed16108baa4e62a2c591cb1d263eb6.png" alt="13.png" style="zoom:80%;" /><p>像上面图片这样，我们创建了一个<code>HealthBar Point</code>的空对象来记录血条的位置，这样就很方便我们代码的编写了</p><p>最后按照同样的方式给每个敌人都安放<code>HealthBar Point</code></p><h1 id="编写血条代码"><a href="#编写血条代码" class="headerlink" title="编写血条代码"></a>编写血条代码</h1><h2 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h2><p>在创建血条代码之前，我们先在<code>CharacterStates.cs</code>中创建一个事件，即在造成伤害时要触发的血条变动事件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//造成伤害时血条改变的事件</span><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">></span></span> UpdateHealthBarOnAttack<span class="token punctuation">;</span><span class="token comment">//在造成伤害时调用</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO:血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建血条代码"><a href="#创建血条代码" class="headerlink" title="创建血条代码"></a>创建血条代码</h2><p>接下来我们就来写控制血条的脚本代码</p><p>在下图目录创建一个脚本，起名为<code>HealthBarUI.cs</code></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/19ea0718eaf34586b42b44476b56da6c.png" alt="12.png" style="zoom:80%;" /><p>然后打开编写代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HealthBarUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> healthUIPrefab<span class="token punctuation">;</span><span class="token comment">//供外界提供一个血条素材</span>    <span class="token keyword">public</span> <span class="token class-name">Transform</span> barPoint<span class="token punctuation">;</span><span class="token comment">//记录血量条该显示在敌人的哪个位置</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"血条显示设置"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> alwaysVisible<span class="token punctuation">;</span><span class="token comment">//血条是否一直可见</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> visibleTime<span class="token punctuation">;</span><span class="token comment">//血条显示时间（如果不是一直可见的情况下）</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> timeLeft<span class="token punctuation">;</span><span class="token comment">//剩余的显示时间</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//拿到血条上层图像</span>    <span class="token class-name">Transform</span> UIbar<span class="token punctuation">;</span><span class="token comment">//记录生成的血条在的位置</span>    <span class="token class-name">Transform</span> cam<span class="token punctuation">;</span><span class="token comment">//拿到摄像机位置以处理血条一直面向我们摄像机</span>    <span class="token class-name">CharacterStates</span> currentStates<span class="token punctuation">;</span><span class="token comment">//获取当前人物的states</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentStates<span class="token punctuation">.</span>UpdateHealthBarOnAttack <span class="token operator">+=</span> UpdateHealthBar<span class="token punctuation">;</span><span class="token comment">//注册事件</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//OnEnable在每次切换地图时都会调用一次</span>        cam <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">;</span><span class="token comment">//获取主相机位置</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Canvas<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//遍历每一个画布</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>renderMode <span class="token operator">==</span> RenderMode<span class="token punctuation">.</span>WorldSpace<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//找到血条所在的画布，有多种方法来获得</span>                <span class="token comment">//也可以供外界提供此画布，更严谨一点</span>                UIbar <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>healthUIPrefab<span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">;</span>                <span class="token comment">//获得上层图像（绿色条）的对象，下标为0</span>                healthSlider <span class="token operator">=</span> UIbar<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//是否一直可见</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealthBar</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//更新血量</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果当前血量小于等于0，就销毁UIbar</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每次更新时必然可见</span>        UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到血量百分比</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>currentHealth <span class="token operator">/</span> maxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新血条长度</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在Update后一帧执行</span>        <span class="token comment">//更新血条跟随敌人位置</span>        <span class="token comment">//这里先检测UIbar有没有给销毁</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>UIbar <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            UIbar<span class="token punctuation">.</span>position <span class="token operator">=</span> barPoint<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//更新到敌人位置</span>            UIbar<span class="token punctuation">.</span>forward <span class="token operator">=</span> cam<span class="token punctuation">.</span>forward<span class="token punctuation">;</span><span class="token comment">//面朝摄像机（即摄像机的方向）</span>            <span class="token comment">//血条剩余显示时间</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>timeLeft <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                timeLeft <span class="token operator">=</span> visibleTime<span class="token punctuation">;</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                timeLeft <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后把代码脚本挂载到每个敌人身上，再调整数据就可以运行试试看效果了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来制作一下敌人的血量条&lt;/p&gt;
&lt;h1 id=&quot;创建血条UI&quot;&gt;&lt;a href=&quot;#创建血条UI&quot; class=&quot;headerlink&quot; title=&quot;创建血条UI&quot;&gt;&lt;/a&gt;创建血条UI&lt;/h1&gt;&lt;h2 id=&quot;创建血条基础形状（Canvas与Image）&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记21-反击石头人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/</id>
    <published>2021-07-27T13:54:34.000Z</published>
    <updated>2021-07-28T01:59:34.199Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人</p><h1 id="实现石头击飞玩家并造成伤害"><a href="#实现石头击飞玩家并造成伤害" class="headerlink" title="实现石头击飞玩家并造成伤害"></a>实现石头击飞玩家并造成伤害</h1><p>我们打开<code>Rock.cs</code>，我们要有区分性的触发伤害，对于玩家和敌人可以造成伤害，但是对于丢到地面的情况是不能造成伤害的，所以这里可以利用一个枚举来区分开来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RockStates</span><span class="token punctuation">&#123;</span>HitPlayer<span class="token punctuation">,</span>HitEnemy<span class="token punctuation">,</span>HitNothing<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token class-name">RockStates</span> rockStates<span class="token punctuation">;</span><span class="token comment">//枚举实例</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">;</span><span class="token comment">//造成的伤害是多少</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//other指被石头打到的对象</span>    <span class="token comment">//当发生碰撞时会执行这个函数</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>rockStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitPlayer<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction <span class="token operator">*</span> force<span class="token punctuation">;</span><span class="token comment">//击退玩家</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//眩晕</span>                <span class="token comment">//这里的TakeDamage是重载的其中一个方法</span>                <span class="token comment">//造成伤害</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span><span class="token comment">//复原状态以防一直执行</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end switch</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到其中的<code>TakeDamage()</code>是一个重载方法，打开<code>CharacterStates.cs</code>我们这里补充一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//函数重载</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后保存关闭，别忘了要在外边石头对象上赋予一个初始伤害值</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/87f552555d2d4f60b4fe62d0d9c10da6.png" alt="1.png" style="zoom:80%;" /><p>这样我们就实现了石头的第一个状态</p><h1 id="实现石头攻击石头人"><a href="#实现石头攻击石头人" class="headerlink" title="实现石头攻击石头人"></a>实现石头攻击石头人</h1><p>先把代码完善好</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们这里是反击石头人，所以要有个判断鼠标点击到了石头，一个最直接的办法就是给我们的石头添加一个标签，然后再修改一下鼠标点击时的方法</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/e18b4dde9c5b4129bba36dd1c9f553b2.png" alt="2.png" style="zoom:80%;" /><p>回到<code>PlayerController.cs</code>修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果点击的对象不是敌人而是其它另类可攻击对象，如石头</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates            <span class="token operator">==</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果是石头并且石头不在空中而是落地之后</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates <span class="token operator">=</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">;</span>            <span class="token comment">//防止攻击那一刹那速度小于1导致石头状态发生改变</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span>                        <span class="token comment">//添加一个玩家朝向的力，力的大小暂时定 40</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到条件中有一个是判断是否为<code>HitNothing</code>，我们可以利用判断石头是否为接近于静止时为条件，这里我们就要回去<code>Rock.cs</code>做一些修改了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rb<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span><span class="token comment">//防止石头一生成时速度为0导致状态发生改变</span>    <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//固定帧更新</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>sqrMagnitude <span class="token operator">&lt;</span> <span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向量的平方</span>        rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后别忘了在<code>MouseManager.cs</code>加上代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> point <span class="token operator">=</span> hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//点击石头等对象用</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="为石头加上爆裂特效"><a href="#为石头加上爆裂特效" class="headerlink" title="为石头加上爆裂特效"></a>为石头加上爆裂特效</h1><p>最后我们想在石头打到石头人时有一个爆裂碎石特效，这里就要用到<code>Particle System</code>了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/efcac51c11a3459cb6e1cfad55ff677a.png" alt="3.png" style="zoom:80%;" /><p>创建好之后我们按照下图参考设置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/2a5fef602fe948eab2649b98a3f07f83.png" alt="5.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/529e6ea5fe1141afb30b34135e7b8018.png" alt="6.png" style="zoom:80%;" /><img src="https://p6-tt.byteimg.com/origin/pgc-image/e34343a1983440909f77ce88719261e3.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/973530a9742240a7bc989b50a5ce86fb.png" alt="8.png" style="zoom:80%;" /><p>自己多多测试一下效果，满意之后我们就可以改个名将它保存为一个素材放好先，然后不要忘了把地图上刚刚调试的删除</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/4b40b473872f4223a4aafecdb889c930.png" alt="9.png" style="zoom:80%;" /><p>最后再在<code>Rock.cs</code>上修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">GameObject</span> RockBreakParticle<span class="token punctuation">;</span><span class="token comment">//石头爆裂特效，供外界拖拽进来</span><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    Instantiate        <span class="token punctuation">(</span>RockBreakParticle<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//击中敌人时产生爆裂特效</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后不要忘了把石头爆裂的特效拖进去设置面板里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/272290cea6af4b3a8f67fbe952186662.png" alt="10.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人&lt;/p&gt;
&lt;h1 id=&quot;实现石头击飞玩家并造成伤害&quot;&gt;&lt;a href=&quot;#实现石头击飞玩家并造成伤害&quot; class=&quot;headerlink&quot; title=&quot;实现石头击飞玩家并造</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记20-实现石头人丢出石头</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/</id>
    <published>2021-07-26T01:12:34.000Z</published>
    <updated>2021-07-26T03:00:21.294Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家</p><h1 id="编辑石头"><a href="#编辑石头" class="headerlink" title="编辑石头"></a>编辑石头</h1><p>首先我们找到石头素材拖出来，由于我们要给它施加一个力，因此这里就要用到<code>Rigidbody(钢体)</code>组件了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/63ea4e8d49e540acb69a7ded75d37782.png" alt="2.png" style="zoom:80%;" /><p>同时石头还要与地面发生碰撞，因此还要添加一个碰撞体，这里选择的是<code>MeshCollider</code>，勾选<code>Convex</code>可以看到碰撞体积刚好适配我们的石头形状</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/ddc484a234c94603b2b16b9dd5ea0a42.png" alt="3.png" style="zoom:80%;" /><p>然后我们就要来进行写代码了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/0a42c8f078f8441ea47b3ef4af3302f8.png" alt="1.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Rigidbody</span> rb<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings(扔出石头参数设置)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> force<span class="token punctuation">;</span><span class="token comment">//丢出去的冲击力大小</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> target<span class="token punctuation">;</span><span class="token comment">//丢向的目标</span>    <span class="token keyword">private</span> <span class="token class-name">Vector3</span> direction<span class="token punctuation">;</span><span class="token comment">//丢出去的方向</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//防止丢出去那一刹那玩家脱离丢失目标导致石头生成不出来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PlayerController<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>                <span class="token comment">//Vector3.up是想在石头丢出去的时候上升一个高度</span>        direction <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position <span class="token operator">+</span> Vector3<span class="token punctuation">.</span>up<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>        <span class="token comment">//Impulse是冲击力的模式</span>        rb<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>direction <span class="token operator">*</span> force<span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们将石头素材保存一个模板对象</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/735c192da1924614a7f5e0f0ee01b428.png" alt="4.png" style="zoom:80%;" /><h1 id="进一步完善石头人"><a href="#进一步完善石头人" class="headerlink" title="进一步完善石头人"></a>进一步完善石头人</h1><p>随后我们再次编辑石头人，因为我们的石头是从石头人的手上丢出去的，因此我们就要获得手的坐标，即下面的对象坐标</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/0cdbbddf408c42e6a443e151c343ce6b.png" alt="5.png" style="zoom:80%;" /><p>知道这个后我们暂时放在一边，来编写一下石头人的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Rock Settings（丢石头攻击的相关设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> rockPrefab<span class="token punctuation">;</span><span class="token comment">//石头素材</span><span class="token keyword">public</span> <span class="token class-name">Transform</span> handPos<span class="token punctuation">;</span><span class="token comment">//丢出石头的手的坐标</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ThrowRock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建石头对象，第三个参数是旋转，这里选择维持初始旋转</span>        <span class="token class-name">GameObject</span> rock <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>rockPrefab<span class="token punctuation">,</span>handPos<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>        rock<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>target <span class="token operator">=</span> attackTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把石头人的动画事件添加上去</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/6ec880f34ce24caab5c2270d61e5d04a.png" alt="6.png" style="zoom:80%;" /><p>最后别忘了还要选择石头的素材（就是我们刚刚保存好的素材模板），以及手的坐标</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/29b7a5e0ae72481a933c5728c35ca1b9.png" alt="7.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家&lt;/p&gt;
&lt;h1 id=&quot;编辑石头&quot;&gt;&lt;a href=&quot;#编辑石头&quot; class=&quot;headerlink&quot; title=&quot;编辑石头&quot;&gt;&lt;/a&gt;编辑石头&lt;/h1&gt;&lt;p&gt;首先我们找到石头素材拖出来，由于我们要</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记19-设置石头人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/</id>
    <published>2021-07-25T04:09:19.000Z</published>
    <updated>2021-07-25T06:52:30.857Z</updated>
    
    <content type="html"><![CDATA[<p>这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少</p><h1 id="设置动画"><a href="#设置动画" class="headerlink" title="设置动画"></a>设置动画</h1><p>我们去浏览石头人的动画可以发现，<code>Attack01</code>是类似拿起石头丢我们，它才是技能攻击，而<code>Attack02</code>是击晕玩家的攻击动画，可以作为普通攻击来使，因此我们在调整攻击动画时要注意分清</p><p>我们的动画控制器文件就选择是基于<code>兽人</code>的动画来完成，创建一个<code>New Animator Override Controller</code>，模板选择为兽人，然后再一个个动画替换上去</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/cbf3634f05844a5f98fed856698b1a5a.png" alt="1.png" style="zoom:80%;" /><p>其中<code>Run</code>并没有自带动画，我们可以用<code>Walk</code>代替</p><h1 id="编写代码文件"><a href="#编写代码文件" class="headerlink" title="编写代码文件"></a>编写代码文件</h1><p>我们像兽人代码文件那样单独创一个代码文件给石头人用，并且也是要继承<code>EnemyController</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Golem</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（石头人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//石头人击飞玩家</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> targetState <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> <span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>            targetState<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>characterStates<span class="token punctuation">,</span>targetState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再添加动画事件就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少&lt;/p&gt;
&lt;h1 id=&quot;设置动画&quot;&gt;&lt;a href=&quot;#设置动画&quot; class=&quot;headerlink&quot; title=&quot;设置动画&quot;&gt;&lt;/a&gt;设置动画&lt;/h1&gt;&lt;p&gt;我们去浏览石头人的动画可以发现，&lt;code&gt;At</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记18-扩展方法</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B018-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B018-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-24T04:55:12.000Z</published>
    <updated>2021-07-24T06:02:15.450Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来熟悉一下扩展方法，所谓扩展方法就是在不继承一个类，但是可以额外编写一个类来扩展这个类的功能，比如这一章我们想让我们控制主角在兽人后面时兽人攻击不会造成伤害，这里就要用到<code>transfrom</code>类，但是<code>transfrom</code>里边没有这个方法，我们就要来扩展它</p><h1 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h1><p>要想我们的兽人敌人对身后玩家造成不了伤害，我们就可以来写一个方法，这个方法专门来判断玩家是否在兽人正前方扇形区域，如果在则返回<code>true</code>否则返回<code>false</code>，然后我们可以将这个方法加到计算伤害的<code>Hit()</code>函数里边进行一个判断，玩家在兽人视野范围内就造成伤害，反之不造成</p><p>这个扩展方法我们创建一个新的代码文件</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/1d4a90fb719d4281b68a709f01232cd2.png" alt="1.png" style="zoom:80%;" /><p>打开编写它</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionMethod</span><span class="token punctuation">&#123;</span>    <span class="token comment">//扩展方法类</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">float</span></span> dotThreshold <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment">//视野范围大小</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFacingTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Transform</span> transform <span class="token punctuation">,</span> <span class="token class-name">Transform</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//判断目标是否在视野范围内</span>        <span class="token class-name"><span class="token keyword">var</span></span> vectorToTarget <span class="token operator">=</span> target<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//获得敌人和玩家的相对位置</span>        vectorToTarget<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向量化</span>        <span class="token comment">//Dot:两个矢量的点积。 点积是一个浮点值，等于两个矢量的大小相乘，然后乘以它们之间的角度的余弦。</span>        <span class="token class-name"><span class="token keyword">float</span></span> dot <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>vectorToTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dot <span class="token operator">></span> dotThreshold<span class="token punctuation">;</span><span class="token comment">//如果玩家在敌人夹角120°(cos120 = 0.5)视野范围内则返回true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们使用<code>Vector3.Dot()</code>方法，官方API在<a href="http://docs.unity3d.com/ScriptReference/Vector3.Dot.html">这里</a>，同时也用了<code>transform.forward</code>来表示敌人面对的方向</p><p>同时还要注意到参数有个<code>this</code>，这样可以让方法加入到<code>Transform</code>类里面，变成它的一个方法</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f180df5587214500b2f7e3cb8e63072a.png" alt="2.png" style="zoom:80%;" /><p>最后我们回到<code>Hit()</code>函数中，把判断条件加上就完成了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于在敌人追主角的过程中主角可能会跑开，这时候如果攻击的话目标就丢失了</span>    <span class="token comment">//所以我们在攻击前判断目标是否为空，以防报错</span>    <span class="token comment">//同时还判断了玩家是否在敌人的视野范围内，在的话才造成伤害</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>characterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当我们的玩家走到敌人后边的时候就不会受到伤害</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来熟悉一下扩展方法，所谓扩展方法就是在不继承一个类，但是可以额外编写一个类来扩展这个类的功能，比如这一章我们想让我们控制主角在兽人后面时兽人攻击不会造成伤害，这里就要用到&lt;code&gt;transfrom&lt;/code&gt;类，但是&lt;code&gt;transfrom&lt;/code</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记17-设置兽人敌人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B017-%E8%AE%BE%E7%BD%AE%E5%85%BD%E4%BA%BA%E6%95%8C%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B017-%E8%AE%BE%E7%BD%AE%E5%85%BD%E4%BA%BA%E6%95%8C%E4%BA%BA/</id>
    <published>2021-07-23T02:01:51.000Z</published>
    <updated>2021-07-23T03:47:43.441Z</updated>
    
    <content type="html"><![CDATA[<p> 在这一章节中我们来设置一下兽人敌人，由于它的<code>Attack02</code>动画包含一个推人的效果，我们可以对它进行单独的测试，而不是继续沿用之前的<code>EnemyController</code>，但是我们可以在它基础上进行添加，所以可以选择继承类方式改写</p><h1 id="继承EnemyController并添加推开人物方法"><a href="#继承EnemyController并添加推开人物方法" class="headerlink" title="继承EnemyController并添加推开人物方法"></a>继承EnemyController并添加推开人物方法</h1><p>因为兽人是用继承的代码，我们要专门创建一个文件夹放特定敌人的<code>EnemyController</code>子类代码</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/2a7f1d824413463f8bbb1701fb464525.png" alt="1.png" style="zoom:80%;" /><p>同时也把这个代码挂载到兽人身上</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Grunt</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（兽人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果访问不了attackTarget要返回父类修改为protect属性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token operator">-</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>            direction<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//量化推开的方向</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">//velocity表示速度，这里给了主角一个反向速度，达到给推开的效果</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>                        attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//人物进入眩晕状态</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把动画事件添加上，<code>Attack02</code>用的事件是我们上面写的<code>kickOff()</code></p><p>同时这里有个眩晕状态，我们把眩晕动画如下添加好，同时眩晕动画速度我改为了2，让它播放快一点</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/e375df607aa64f32b0779527e3494c29.png" alt="2.png" style="zoom:80%;" /><h1 id="替换动画并且添加一个动画行为"><a href="#替换动画并且添加一个动画行为" class="headerlink" title="替换动画并且添加一个动画行为"></a>替换动画并且添加一个动画行为</h1><p>我们把史莱姆的动画复制一份给兽人，然后为了保持兽人在推开人物时人物进入眩晕状态并且不能移动，我们还要添加一个动画行为（<code>Behaviour</code>）</p><p>替换动画过程不再描述，但是注意这里<strong>不能</strong>采用动画控制器继承的方式</p><p>这里就说一下动画行为，找到人物的<code>Dizzy</code>动画，点击<code>Add Behaviour</code>，创建一个叫做<code>Stop Agent</code>的行为，实际上就是一个代码文件，创建好后我们把这个代码文件归类放好</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/3b6e539cae684b47ae1971d9d95485de.png" alt="3.png" style="zoom:80%;" /><img src="https://p9-tt.byteimg.com/origin/pgc-image/752bc9fca53d4a6a80c77a7381d9a0f0.png" alt="4.png" style="zoom:80%;" /><p>这个代码文件打开就已经有一些注释在那了，我们可以直接取消我们要用方法的注释，这里用到的就是进入动画、动画播放时以及动画结束时刻的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopAgent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">StateMachineBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// OnStateEnter is called when a transition starts and the state machine starts to evaluate this state</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateEnter</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateUpdate</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateExit is called when a transition ends and the state machine finishes evaluating this state</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateExit</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateMove is called right after Animator.OnAnimatorMove()</span>    <span class="token comment">//override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//    // Implement code that processes and affects root motion</span>    <span class="token comment">//&#125;</span>    <span class="token comment">// OnStateIK is called right after Animator.OnAnimatorIK()</span>    <span class="token comment">//override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//    // Implement code that sets up animation IK (inverse kinematics)</span>    <span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们可以把行为放进人物的眩晕、受伤等动画，甚至是敌人的攻击动画</p><p>注意的是添加到敌人攻击动画时可能会有一个报错，原因是我们可能把敌人打死了，导致行为无法获得agent，解决办法如下，我们去到<code>EnemyController.cs</code>修改敌人死了之后的状态</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>collider<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防止时候开业再次攻击</span><span class="token comment">//agent.enabled = false;//直接关闭导航组件</span>agent<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//把agent的范围缩小</span><span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁游戏对象，延迟为2秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们原本想关闭agent以达到agent没有体积效果，所以可以把agent.enabled = false;语句改为了直接把agent范围缩小到0，也是同样的效果</p><p>到这我们就初步设置好了兽人了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 在这一章节中我们来设置一下兽人敌人，由于它的&lt;code&gt;Attack02&lt;/code&gt;动画包含一个推人的效果，我们可以对它进行单独的测试，而不是继续沿用之前的&lt;code&gt;EnemyController&lt;/code&gt;，但是我们可以在它基础上进行添加，所以可以选择继承类方式改</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记16-制作更多的敌人</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B016-%E5%88%B6%E4%BD%9C%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%8C%E4%BA%BA/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B016-%E5%88%B6%E4%BD%9C%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%8C%E4%BA%BA/</id>
    <published>2021-07-22T01:53:09.000Z</published>
    <updated>2021-07-22T15:31:27.489Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章我们把我们的敌人数量制作地多一些，更加地去完善游戏</p><h1 id="制作多一个史莱姆"><a href="#制作多一个史莱姆" class="headerlink" title="制作多一个史莱姆"></a>制作多一个史莱姆</h1><p>制作多一个史莱姆很简单，只用对着之前的史莱姆<code>Ctrl + D</code>复制一下就可以</p><p>但是这之中也有存在问题，就是史莱姆会共用一个<code>Character Data</code>，这可以在每次开始游戏时创建一个临时<code>Data</code>给他们来解决</p><p>打开<code>Character States.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">CharacterData_SO</span> characterData<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CharacterData_SO</span> templateData<span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>templateData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//复制一个临时模板Data</span>        characterData <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>templateData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成多一个data</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后史莱姆身上的<code>Data</code>如下设置</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/e780aba5845e41caa4a1b38673b38708.png" alt="2.png" style="zoom:80%;" /><h1 id="放置一个刺刺龟"><a href="#放置一个刺刺龟" class="headerlink" title="放置一个刺刺龟"></a>放置一个刺刺龟</h1><p>我们的史莱姆素材文件夹下有另外一个敌人刺刺龟，我们也可以把它放置上来</p><p>由于它也是依赖<code>EnemyController.cs</code>的，所以我们在之前还要添加一行强制附带组件代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequireComponent</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CharacterStates</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以强制附带<code>CharacterStates</code>代码组件了</p><p>在素材中找到刺刺龟把它放置在地图上</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/c0a6ab51762547b5855e2d4d808bb14c.png" alt="3.png" style="zoom:80%;" /><p>然后为它添加<code>EnemyController.cs</code>，以及设置好基本信息</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/82f0fc3573f7434aa1a235f4fbe931c3.png" alt="4.png" style="zoom:80%;" /><p>还有一个关键的地方在于动画的切换，这里我们可以利用一个技巧，把史莱姆原来的<code>Animations</code>复制一个出来直接覆盖替换动画</p><p>我们在右键创建时选择<code>Animator Override Controller</code>就可以了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/61c8eb67c769464eb07f58ab37b2c59d.png" alt="5.png" style="zoom:80%;" /><p>然后属性面板中第一个选项就会问我们要依靠哪个<code>Animation</code>为模板，我们选择史莱姆原来的动画</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/60d1f5873d4b440ba04764b3bdfd5cda.png" alt="6.png" style="zoom:80%;" /><p>之后再将它们替换就可以了，别忘了<code>Attack01</code>和<code>Attack02</code>要单独复制出来以及添加帧事件</p><h1 id="兽人和石头人"><a href="#兽人和石头人" class="headerlink" title="兽人和石头人"></a>兽人和石头人</h1><p>还有需要添加的就是兽人和石头人，这里我们暂时添加好素材再把它们移到地图上就好了，之后的事情下一章节再处理</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/712fe6fd05d24f17a782e3bbd8937ab7.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/c884e6e35d714f3988fb0a5b4109a5cc.png" alt="8.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章我们把我们的敌人数量制作地多一些，更加地去完善游戏&lt;/p&gt;
&lt;h1 id=&quot;制作多一个史莱姆&quot;&gt;&lt;a href=&quot;#制作多一个史莱姆&quot; class=&quot;headerlink&quot; title=&quot;制作多一个史莱姆&quot;&gt;&lt;/a&gt;制作多一个史莱姆&lt;/h1&gt;&lt;p&gt;制作多一个史莱姆很</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记15-使用接口实现观察者模式的订阅和广播</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B015-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%B9%BF%E6%92%AD/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B015-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%B9%BF%E6%92%AD/</id>
    <published>2021-07-21T01:30:13.000Z</published>
    <updated>2021-07-22T04:22:22.553Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章我们使用接口来实现观察者模式的订阅和广播，同时也来实现玩家死了游戏结束之后敌人的获胜动画</p><h1 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h1><p>在<code>Tools</code>文件夹下我们新建一个代码文件<code>IEndGameObserver.cs</code>表示游戏结束之后的接口</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEndGameObserver</span><span class="token punctuation">&#123;</span>    <span class="token comment">//注意接口只写声明不写定义</span>    <span class="token comment">//游戏结束要操作的都在这个接口实现</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来到<code>EnemyController.cs</code>编写一个广播方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span><span class="token punctuation">,</span><span class="token class-name">IEndGameObserver</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获胜动画</span>        <span class="token comment">//停止所有移动</span>        <span class="token comment">//停止Agent</span>        isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        attackTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它要在游戏结束时要有操作的代码也可以像这种方式来继承接口并实现操作</p><h1 id="订阅接口"><a href="#订阅接口" class="headerlink" title="订阅接口"></a>订阅接口</h1><p>因为我们会有很多不同的代码文件都会继承这个接口，怎样来管理订阅也是值得考虑的事情</p><p>打开上一章创建的<code>GameManager.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>GameManager<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CharacterStates</span> playerStates<span class="token punctuation">;</span>    <span class="token comment">//游戏结束时调用的方法的数组</span>    List<span class="token operator">&lt;</span>IEndGameObserver<span class="token operator">></span>endGameObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IEndGameObserver<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddObserve</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//加入待操作数组</span>        endGameObservers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>gameObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RemoveObserve</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将特定的观察者在待操作数组中删除</span>        endGameObservers<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>gameObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyObserves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//调用待操作数组中每一个观察者</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver <span class="token keyword">in</span> endGameObservers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            gameObserver<span class="token punctuation">.</span><span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们是要在主角死了之后开始游戏结束的操作，所以回到<code>PlayerController.cs</code>在判断主角死了之后调用广播</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断死亡</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">NotifyObserves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们在<code>EnemyController.cs</code>中还要补充一个加入待操作数组方法和移除方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//void OnEnable()&#123;//Unity的一个启动游戏时自动调用的函数</span><span class="token comment">//  GameManager.Instance.AddObserve(this);</span><span class="token comment">// &#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//开始游戏时先检测是否勾选了守卫状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isGuard<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>        <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//FIXME:场景切换做好后修改掉</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddObserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>GameManager<span class="token punctuation">.</span>IsInitialized<span class="token punctuation">)</span>         <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果GameManager没有给构建的话就直接return</span>        GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RemoveObserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>OnEnable()</code>是在游戏开始时早期就调用的，这时候我们这样写会发生报错，我们要等到后面写场景加载时才用这种方法，这里暂时把加入待操作数组代码单独写到<code>Start()</code>里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/5e902802764e44b099915b6323377dfb.png" alt="1.png" style="zoom:80%;" /><h1 id="配置敌人胜利动画"><a href="#配置敌人胜利动画" class="headerlink" title="配置敌人胜利动画"></a>配置敌人胜利动画</h1><p>我们打开动画管理器，配置敌人在打死主角后的动画</p><p>新建一个<code>Victory Layer</code>（注意权重值为1），以及一个<code>Win</code>布尔值控制动画触发</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/85512e9ac113448c808c81d1b29dc079.png" alt="1.png" style="zoom:80%;" /><p>返回<code>EnemyController.cs</code>代码我们要配置动画变量什么时候触发</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//血量变0则死亡状态为真</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//加了个else是防止死后敌人在胜利动画下一帧又给切换回普通动画</span>        <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastAttackTime<span class="token operator">-=</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span><span class="token comment">//每一帧都减冷却</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获胜动画</span>    <span class="token comment">//停止所有移动</span>    <span class="token comment">//停止Agent</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Win"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    attackTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们发现主角死了之后还是可以控制移动，这里我们在<code>PlyaerController.cs</code>修复一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveToTarget</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果死了就不能移动</span><span class="token function">StopAllCoroutines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止其它移动命令</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果死了就不能移动</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token comment">//判断是否暴击</span>charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章我们使用接口来实现观察者模式的订阅和广播，同时也来实现玩家死了游戏结束之后敌人的获胜动画&lt;/p&gt;
&lt;h1 id=&quot;编写接口&quot;&gt;&lt;a href=&quot;#编写接口&quot; class=&quot;headerlink&quot; title=&quot;编写接口&quot;&gt;&lt;/a&gt;编写接口&lt;/h1&gt;&lt;p&gt;在&lt;code</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记14-泛型单例模式</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B014-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B014-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-20T01:52:36.000Z</published>
    <updated>2021-07-21T01:34:24.792Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们来编写一个泛型单例模式的代码，这是因为我们的项目中会有很多的<code>Manager</code>，如果每个都使用单例模式会更好地去管理和使用</p><p>例如其中控制我们游戏的开始暂停等一般是用<code>Game Manager</code>来命名，我们来创建一个代码文件以及一个空对象使得代码可以依附在它上面</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/d8bf83d3ad554952a66a0b00aafc1b96.png" alt="1.png" style="zoom:80%;" /><p>这个代码我们先放在一边之后再补充，先把泛型单例模式代码写了先</p><h1 id="泛型单例模式"><a href="#泛型单例模式" class="headerlink" title="泛型单例模式"></a>泛型单例模式</h1><p>创建目录文件如下</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/86a804f3de9a4c9b960af8c63dd89626.png" alt="2.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> Instance<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//允许子类对Awake进行重写</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            instance <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//检测单例是否生成</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsInitialized<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//允许子类修改销毁时的操作</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一旦一个A类继承了<code>Sigltion&lt;A&gt;</code>之后，我们就可以在其它类中调用A类的单例，如：<code>A.Instance</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一章我们来编写一个泛型单例模式的代码，这是因为我们的项目中会有很多的&lt;code&gt;Manager&lt;/code&gt;，如果每个都使用单例模式会更好地去管理和使用&lt;/p&gt;
&lt;p&gt;例如其中控制我们游戏的开始暂停等一般是用&lt;code&gt;Game Manager&lt;/code&gt;来命名，我们来</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记13-敌人的守卫状态和死亡状态</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B013-%E6%95%8C%E4%BA%BA%E7%9A%84%E5%AE%88%E5%8D%AB%E7%8A%B6%E6%80%81%E5%92%8C%E6%AD%BB%E4%BA%A1%E7%8A%B6%E6%80%81/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B013-%E6%95%8C%E4%BA%BA%E7%9A%84%E5%AE%88%E5%8D%AB%E7%8A%B6%E6%80%81%E5%92%8C%E6%AD%BB%E4%BA%A1%E7%8A%B6%E6%80%81/</id>
    <published>2021-07-19T01:43:57.000Z</published>
    <updated>2021-07-19T04:08:52.903Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章节我们来制作敌人的守卫状态和死亡状态</p><h1 id="敌人的守卫状态（Guard）"><a href="#敌人的守卫状态（Guard）" class="headerlink" title="敌人的守卫状态（Guard）"></a>敌人的守卫状态（Guard）</h1><p>打开<code>EnemyController.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Quaternion</span> guardRotation<span class="token punctuation">;</span><span class="token comment">//记录敌人最初的旋转角度，用于脱离追击回去守卫点砖头转头</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    guardRotation <span class="token operator">=</span> transform<span class="token punctuation">.</span>rotation<span class="token punctuation">;</span><span class="token comment">//获得最初旋转角度</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>守卫状态            isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//脱离追击状态</span>            <span class="token comment">//如果在追击主角时回到守卫状态，就要跑回守卫点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position <span class="token operator">!=</span> guardPos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//播放走路动画</span>                agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment">//导航回最初守卫点</span>                agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> guardPos<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">SqrMagnitude</span><span class="token punctuation">(</span>guardPos <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">&lt;=</span>agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//SqrMagnitude也是可以用于比较距离的方法，比起Distance稍微快一些</span>                    <span class="token comment">//这里是判断是否到达最初守卫点可以停止范围</span>                    isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token comment">//慢慢转头。第三个参数越接近1转得越快</span>                    transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Lerp</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span>guardRotation<span class="token punctuation">,</span><span class="token number">0.01f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们就写好了守卫状态的代码，其中<code>SqrMagnitude()</code>作用和<code>Distance()</code>一样都是比较两个点的距离，然后我们还加了慢慢转头的效果，否则敌人回到守卫点是不会转头的</p><h1 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h1><p>我们希望当敌人血量为0时播放死亡动画并且尸体消失掉</p><h2 id="设置死亡动画"><a href="#设置死亡动画" class="headerlink" title="设置死亡动画"></a>设置死亡动画</h2><p>打开动画控制器，我们新建一个<code>Death Layer</code>，不要忘了权重设为1</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/32be87ac0205413280a7f42a61d7296e.png" alt="1.png" style="zoom:80%;" /><p>这里有个<code>GetHit</code>是用来做暴击伤害受伤效果的，它有左边的<code>Hit</code>触发，而我们的死亡动画<code>Die</code>连着<code>Any State</code>表示任何状态都能转移过来，由布尔值<code>Death</code>控制</p><p><strong>特别要注意的地方：</strong>关于死亡动画的设置<code>Can Transition To</code>一定不能勾选，不然会发生鬼畜</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/497e554f53c24b17be551acb0694058c.png" alt="2.png" style="zoom:80%;" /><p>接下来主角的动画也是如此设置</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/66e702dd2c644d058b5e628fbcf052c6.png" alt="3.png" style="zoom:80%;" /><h2 id="编写动画状态转移代码"><a href="#编写动画状态转移代码" class="headerlink" title="编写动画状态转移代码"></a>编写动画状态转移代码</h2><p>回到我们的<code>EnemyController.cs</code>中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Collider</span> collider<span class="token punctuation">;</span><span class="token comment">//碰撞体组件</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isDead<span class="token punctuation">;</span><span class="token comment">//死亡状态控制</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    collider <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Collider<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//血量变0则死亡状态为真</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Death"</span><span class="token punctuation">,</span>isDead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否播放死亡动画</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//第一个判断是否为死亡</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果发现player 切换到CHASE</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">;</span>        <span class="token comment">//Debug.LogFormat("敌人&#123;0&#125;发现了玩家",this.name);//测试代码</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>    collider<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防止时候开业再次攻击</span>    agent<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//直接关闭导航组件</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁游戏对象，延迟为2秒</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们设置了<code>Death</code>的动画状态，注意开头<code>if(isDead)</code>的下一个是<code>else if</code>，而<code>Hit</code>的状态可以去到<code>CharcterStates.cs</code>中设置</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharcterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharcterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//TODO:血量条UI</span>    <span class="token comment">//TODO:打死怪后加经验</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在中间我们打了一行代码，用来获取被打者的Animator并设置动画<code>Hit</code>状态，这样就可以集中管理暴击受伤动画了</p><p>最后对于主角我们也用相同的办法来写这些代码就大功告成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章节我们来制作敌人的守卫状态和死亡状态&lt;/p&gt;
&lt;h1 id=&quot;敌人的守卫状态（Guard）&quot;&gt;&lt;a href=&quot;#敌人的守卫状态（Guard）&quot; class=&quot;headerlink&quot; title=&quot;敌人的守卫状态（Guard）&quot;&gt;&lt;/a&gt;敌人的守卫状态（Guard）</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity笔记12-实现攻击数值计算</title>
    <link href="http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B012-%E5%AE%9E%E7%8E%B0%E6%94%BB%E5%87%BB%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <id>http://sakura-pub.ltd/UnityNotes/Unity%E7%AC%94%E8%AE%B012-%E5%AE%9E%E7%8E%B0%E6%94%BB%E5%87%BB%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/</id>
    <published>2021-07-18T01:29:45.000Z</published>
    <updated>2021-07-26T01:10:45.401Z</updated>
    
    <content type="html"><![CDATA[<p> 这一章节中我们来实现攻击伤害的计算，给予人物或敌人真实的攻击伤害</p><h1 id="补充人物攻击动画"><a href="#补充人物攻击动画" class="headerlink" title="补充人物攻击动画"></a>补充人物攻击动画</h1><p>在之前我们要给人物添加一下暴击动画，和上一章节设置敌人动画类似，注意要设置动画切换效果</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/db2c7f3914614d4ea5ec93211e2b47a7.png" alt="1.png" style="zoom:80%;" /><p>打开<code>PlayerController.cs</code>，修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span>          charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//攻击动画和CD都在下面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lastAttactTime<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//CD冷却完成可执行攻击</span>        animator<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Critical"</span><span class="token punctuation">,</span>charcterStates<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加了传递是否暴击</span>        animator<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//普通攻击</span>        lastAttactTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span><span class="token comment">//修改了这里的CD时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们修改了两个地方，一个是增加了暴击判断，另一个是修改了CD时间判断</p><h1 id="增加攻击数值计算"><a href="#增加攻击数值计算" class="headerlink" title="增加攻击数值计算"></a>增加攻击数值计算</h1><p>前面补充完成后，我们就可以正式来写攻击伤害的数值计算了</p><p>打开<code>CharcterStates.cs</code>，我们在最下面加上我们的伤害计算代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>        attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment">//随机暴击率语句</span>        charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//伤害计算区</span><span class="token preprocessor property">#<span class="token directive keyword">region</span> Charcter Combat</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharcterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharcterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>            defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将来要做的事情</span>    <span class="token comment">//TODO:血量条UI</span>    <span class="token comment">//TODO:打死怪后加经验</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在攻击力范围内取随机数返回一个随机攻击力</span>    <span class="token class-name"><span class="token keyword">float</span></span> coreDamage <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>attackData<span class="token punctuation">.</span>minDamage<span class="token punctuation">,</span>attackData<span class="token punctuation">.</span>maxDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果暴击的话还要计算上暴击率</span>        coreDamage <span class="token operator">*=</span>attackData<span class="token punctuation">.</span>criticalMultiplier<span class="token punctuation">;</span><span class="token comment">//乘等于</span>        Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"暴击了！伤害为（不算目标防御力）：&#123;0&#125;"</span><span class="token punctuation">,</span>coreDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>coreDamage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用伤害计算方法"><a href="#调用伤害计算方法" class="headerlink" title="调用伤害计算方法"></a>调用伤害计算方法</h1><p>伤害计算代码写好后，我们就要去想如何调用它，在哪里调用它了</p><p>参考一些RPG游戏，一般都是当你的武器挥出去后接触到敌人那一瞬间计算伤害，我们也可以按照这样来做</p><h2 id="在人物身上调用"><a href="#在人物身上调用" class="headerlink" title="在人物身上调用"></a>在人物身上调用</h2><p>首先要调出<code>Animation</code>窗口</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/42623310028b4fbcafc6c49ce9fbc6a6.png" alt="2.png" style="zoom:80%;" /><p>然后窗口左上角选择上我们的攻击动画<code>Attack01</code>，我们就可以在攻击动画里面的某个特定帧添加事件了</p><p>我们再次编辑一下<code>PlayerController.cs</code>代码加一个用来调用的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//Animation Event</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//计算伤害</span>    targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到<code>Animation</code>窗口，将它添加为事件</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/3ebdba5a85864a339407b9a8d21a740f.png" alt="4.png" style="zoom:80%;" /><p><strong>注意：同样的暴击动画也要加上</strong></p><h2 id="在敌人身上调用"><a href="#在敌人身上调用" class="headerlink" title="在敌人身上调用"></a>在敌人身上调用</h2><p>然后在敌人身上我们也要进行同样的操作，打开<code>EnemyController.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//EnemyController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于在敌人追主角的过程中主角可能会跑开，这时候如果攻击的话目标就丢失了</span>    <span class="token comment">//所以我们在攻击前判断目标是否为空，以防报错</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在为<code>Animation</code>添加动画时我们发现当前史莱姆的动画是<code>只读</code>属性的，对于这种情况我们可以把动画单独复制到其它地方，再将复制出来的动画替换原来的，就可以进行事件添加了</p><p>如图对着动画文件按<code>Ctrl+D</code>可以快速复制</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/3831ed71b8dc46cc8d7ce464438e15b3.png" alt="5.png" style="zoom:80%;" /><p>然后我们将复制出来的动画（这里有两个）分类放好</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/cded851a377744a2a2c53f78e2573698.png" alt="6.png" style="zoom:80%;" /><p>然后进行动画替换</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/99667e3e7b754c4f8b286410045bac15.png" alt="7.png" style="zoom:80%;" /><p>最后再进行动画帧事件添加操作就行了</p><p>到这我们就把伤害计算代码和效果都写出来了，下一章节中我们还会去补充如果敌人或人物血量到0了时候的状态</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这一章节中我们来实现攻击伤害的计算，给予人物或敌人真实的攻击伤害&lt;/p&gt;
&lt;h1 id=&quot;补充人物攻击动画&quot;&gt;&lt;a href=&quot;#补充人物攻击动画&quot; class=&quot;headerlink&quot; title=&quot;补充人物攻击动画&quot;&gt;&lt;/a&gt;补充人物攻击动画&lt;/h1&gt;&lt;p&gt;在之前我们</summary>
      
    
    
    
    <category term="Unity学习笔记" scheme="http://sakura-pub.ltd/categories/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Unity" scheme="http://sakura-pub.ltd/tags/Unity/"/>
    
  </entry>
  
</feed>
