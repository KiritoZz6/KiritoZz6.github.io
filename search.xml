<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>投递简历记录</title>
      <link href="%E9%9D%A2%E8%AF%95/%E6%8A%95%E9%80%92%E7%AE%80%E5%8E%86%E8%AE%B0%E5%BD%95/"/>
      <url>%E9%9D%A2%E8%AF%95/%E6%8A%95%E9%80%92%E7%AE%80%E5%8E%86%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>待更新。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++面经总结</title>
      <link href="%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/"/>
      <url>%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 在写这个文章的时候已经是大三的寒假了，因此也要开始为实习的工作做准备了，这里就专门开了个文章来记录我在网上找到的一些<strong>C++面经</strong>，文章也是不断进行更新的，希望到时候能够找到一个满意的Offer📝</p><h1 id="C-语言问答题"><a href="#C-语言问答题" class="headerlink" title="C++语言问答题"></a>C++语言问答题</h1><p>首先是C++的语言特性问题，有许多问题都是经常问到的，这里逐个记录下来</p><h2 id="strcpy-函数有什么缺陷，如何优化"><a href="#strcpy-函数有什么缺陷，如何优化" class="headerlink" title="strcpy 函数有什么缺陷，如何优化"></a>strcpy 函数有什么缺陷，如何优化</h2><p><code>strcpy</code>是c语言头文件中的<code>&lt;string.h&gt;</code>的库函数，是用来复制字符串，它的函数原型为<code>char * strcpy( char * dst, const char * src )</code>，这个函数把字符串src复制到一分配好的字符串空间dst中，复制的时候包括标志字符串结尾的空字符一起复制。操作成功，返回dst，否则返回NULL</p><p>它的<strong>缺陷</strong>则是没有字符串长度的判断，当复制进去的字符串<code>src</code>长度大于了原来分配好空间的字符串<code>dst</code>长度时，函数会把字符串后面的空间也覆盖掉，造成<strong>缓冲溢出</strong>情况</p><p>想要优化这个缺陷其实很简单，只需要自己加一个判断长度语句就行了</p><h2 id="指针和引用区别"><a href="#指针和引用区别" class="headerlink" title="指针和引用区别"></a>指针和引用区别</h2><p>这里指针和引用区别有四个点</p><ol><li>指针所指向的内存可以在程序运行期间改变，而引用所绑定的对象一旦绑定之后不允许改变（是否可变）</li><li>指针本身在内存中是占空间的（32位系统指针占4字节，64位系统指针占8字节），引用相当于变量别名，在内存中不占空间（是否占空间）</li><li>指针可以为空，引用则必须绑定对象（是否可为空）</li><li>指针可以有多级，引用只能有一级（是否能为多级）</li></ol><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p>这里的堆和栈是指内存中的堆栈，堆栈是一个特定的存储区或寄存器</p><ol><li>申请方式：栈是系统自动分配的，而堆则是程序员主动申请的</li><li>申请后系统的响应方式：分配栈空间，如果剩余空间大于申请空间，则分配成功，否则分配失败栈溢出；分配堆空间，堆在内存中呈现的方式类似于链表（每个节点记录着空闲的空间），在链表中寻求第一个大于申请空间的节点分配给程序，并将该节点删除；值得注意的是，大多数系统中该块空间的首地址存放的是本次的是本次分配空间的大小，便于释放时将该块空间重新添加到链表上。</li><li>栈在内存中是一块连续的空间（向低地址扩展），最大的容量是系统预定好的；堆是不连续的空间（向高地址扩展）</li><li>申请效率：栈是系统自动分配的，申请效率高，但是程序员无法控制；堆是由程序员自主申请分配的，效率较低，并且容易产生碎片空间</li><li>存放的内容：栈中存放的是局部变量，函数的参数；堆存放的内容由程序员控制</li></ol><h2 id="new和delete是怎么实现的，new和malloc有什么区别"><a href="#new和delete是怎么实现的，new和malloc有什么区别" class="headerlink" title="new和delete是怎么实现的，new和malloc有什么区别"></a>new和delete是怎么实现的，new和malloc有什么区别</h2><p>new/delete和malloc/free都是很熟悉的，经常要用到</p><ol><li>属性：malloc和free是库函数，需要头文件的支持；new和delete是关键字，要编译器的支持</li><li>参数：使用new分配空间时，无需指定分配空间的大小，编译器会根据数据类型自动计算；而使用malloc申请分配空间时，则需确定所要分配空间的大小</li><li>返回值：new所分配后返回的是一个对应数据类型的指针，无需强制类型转换，符合类型安全的操作符；而malloc申请空间时，返回的是void*类型的指针，需要进行强制类型转换，转换为对象类型指针</li><li>分配失败情况：new分配失败会抛出<code>bad_alloc</code>异常，malloc分配失败则返回空指针</li><li>重载：new/delete均可进行重载，而malloc/free不能</li><li>自定义类型实现：new 首先调用 operator new() 函数申请空间（底层通过 malloc 实现），然后调用构造函数进行初始化，最后返回自定义类型的指针；delete 首先调用析构函数，然后调用 operator delete() 释放空间（底层通过 free 实现）。malloc/free 无法进行自定义类型的对象的构造和析构</li><li>内存区域：new操作符从<strong>自由存储区</strong>上为对象分配空间，而malloc则是在<strong>堆</strong>上分配空间。（<strong>自由存储区不等于堆</strong>）</li></ol><h2 id="C和C-的区别"><a href="#C和C-的区别" class="headerlink" title="C和C++的区别"></a>C和C++的区别</h2><ul><li><p>C 是面向过程的编程，特点是函数；C++ 是面向对象的编程，特点是类。（特性）</p></li><li><p>C 主要用在嵌入式开发、驱动开发和硬件直接打交道的领域；C++ 可以用于应用层的开发、用户界面开发等和操作系统直接打交道的领域。（应用领域）</p></li><li><p>C++ 继承了C的底层操作特性，增加了面向对象的机制，增加了泛型编程、异常处理、运算符重载，还增加了命名空间，避免了命名冲突。（相较于 C 的升级）</p></li></ul><h2 id="C-、Java-的联系与区别，包括语言特性、垃圾回收、应用场景等（java-的垃圾回收机制）"><a href="#C-、Java-的联系与区别，包括语言特性、垃圾回收、应用场景等（java-的垃圾回收机制）" class="headerlink" title="C++、Java 的联系与区别，包括语言特性、垃圾回收、应用场景等（java 的垃圾回收机制）"></a>C++、Java 的联系与区别，包括语言特性、垃圾回收、应用场景等（java 的垃圾回收机制）</h2><h3 id="二者在语言特性上有很大的区别："><a href="#二者在语言特性上有很大的区别：" class="headerlink" title="二者在语言特性上有很大的区别："></a>二者在语言特性上有很大的区别：</h3><ul><li>指针：C++ 可以直接操作指针，容易产生内存泄漏以及非法指针引用的问题；JAVA 并不是没有指针，虚拟机(JVM)内部还是使用了指针，只是编程人员不能直接使用指针，不能通过指针来直接访问内存，并且 JAVA 增加了内存管理机制</li><li>多重继承：C++ 支持多重继承，允许多个父类派生一个类，虽然功能很强大，但是如果使用的不当会造成很多问题，例如：菱形继承；JAVA 不支持多重继承，但允许一个类可以继承多个接口，可以实现 C++ 多重继承的功能，但又避免了多重继承带来的许多不便</li><li>数据类型和类：C++ 可以将变量或函数定义成全局，但是JAVA是完全面向对象的语言，除了基本的数据类型之外，其他的都作为类的对象，包括数组。</li></ul><h3 id="垃圾回收："><a href="#垃圾回收：" class="headerlink" title="垃圾回收："></a>垃圾回收：</h3><ul><li>JAVA 语言一个显著的特点就是垃圾回收机制，编程人员无需考虑内存管理的问题，可以有效的防止内存泄漏，有效的使用空闲的内存</li><li>JAVA 所有的对象都是用 new 操作符建立在内存堆栈上，类似于 C++ 中的 new 操作符，但是当要释放该申请的内存空间时，JAVA 自动进行内存回收操作，C++ 需要程序员自己释放内存空间，并且 JAVA 中的内存回收是以线程的方式在后台运行的，利用空闲时间。</li></ul><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul><li><p>java 运行在虚拟机上，和开发平台无关，C++ 直接编译成可执行文件，是否跨平台在于用到的编译器的特性是否有多平台的支持，</p></li><li><p>C++ 可以直接编译成可执行文件，运行效率比 JAVA 高</p></li><li><p>JAVA 主要用来开发 web 应用</p></li><li><p>C++ 主要用在嵌入式开发、网络、并发编程的方面</p></li></ul><h2 id="Struct和Class的区别"><a href="#Struct和Class的区别" class="headerlink" title="Struct和Class的区别"></a>Struct和Class的区别</h2><p>C++中的struct是对C中的struct进行了扩充，它可以包含成员函数、能够继承、也能够实现多态，而struct与class最本质的区别在于默认的访问控制：struct默认继承访问权限是<strong>public</strong>，class的默认继承访问权限是<strong>private</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//B是class，所以是private继承</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//C是struct，所以是public继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class A"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">&#123;</span><span class="token comment">//由于 B 是 struct，A的继承级别为 public(取决于B的默认继承级别)</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token comment">//由于 C 是 class，B的继承级别为 private(取决于C的默认继承级别)，所以无法访问基类B中的printB函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A ex1<span class="token punctuation">;</span>    ex1<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class A</span>    B ex2<span class="token punctuation">;</span>    ex2<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class A</span>    ex2<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class B</span>    C ex3<span class="token punctuation">;</span>    ex3<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: 'B' is not an accessible base of 'C'</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，class可以使用模板，而struct不能</p><h2 id="define和const的区别（编译阶段、安全性、内存占用等）"><a href="#define和const的区别（编译阶段、安全性、内存占用等）" class="headerlink" title="define和const的区别（编译阶段、安全性、内存占用等）"></a>define和const的区别（编译阶段、安全性、内存占用等）</h2><ul><li>编译阶段：define是在编译预处理阶段起作用，const是在编译阶段和程序运行阶段起作用</li><li>安全性：define定义的宏常量没有数据类型，只是进行简单的替换，不会进行类型安全的检测；const定义的只读变量是有类型的，会进行判断，可以避免低级错误</li><li>内存占用：define所定义的常量，在程序中使用多少次就会替换多少次，内存中有多个备份；const定义的只读变量在程序运行过程中只有一份</li><li>调试：define定义的常量不能进行调试，因为在预编译阶段就已经替换了；const定义的只读变量可以进行调试</li></ul><p>const的优点：</p><ul><li>有数据类型，在定义式可进行安全性检查</li><li>可调式</li><li>占用较少的空间</li></ul><h1 id="数据结构问题"><a href="#数据结构问题" class="headerlink" title="数据结构问题"></a>数据结构问题</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>常见的排序算法如选择、插入、冒泡、快速、归并等都是面试经常问的问题，这里也将它们代码写一下</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序<strong>O(n^2)、不稳定</strong></p><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，以此类推</p><p>不稳定原因：如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。</p><p>举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//选择排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> alen<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录本轮中最小数的下标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>                minIndex<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minIndex<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果最小数不是标兵数本身</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序(InsertionSort)，一般也被称为直接插入排序。时间复杂度为：<strong>O(N^2)</strong></p><p>对于少量元素的排序，它是一个有效的算法。插入排序是一种最简单的排序方法，它的基本思想是将一个记录插入到已经排好序的有序表中，从而一个新的、记录数增 1 的有序表</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/InsertSort-03.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> insertValue<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>insertValue<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效、<strong>稳定</strong>的排序算法，该算法是采用分治法(Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p>时间复杂度为 <strong>O(nlogn)</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/MergeSort-01.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">temp</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1<span class="token operator">=</span>start<span class="token punctuation">;</span>    <span class="token keyword">int</span> p2<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>start<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法，在平均状况下，排序 n 个项目要 <strong>Ο(nlogn)</strong> 次比较。在最坏状况下则需要 <strong>Ο(n^2)</strong> 次比较，但这种状况并不常见。</p><p><em>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序</em></p><p>算法步骤：</p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">>=</span>end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token operator">=</span>end<span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token operator">=</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">>=</span>key<span class="token punctuation">)</span>            <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key<span class="token punctuation">)</span>            <span class="token operator">++</span>l<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>array<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛268场</title>
      <link href="LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B268%E5%9C%BA/"/>
      <url>LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B268%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode周赛268场"><a href="#LeetCode周赛268场" class="headerlink" title="LeetCode周赛268场"></a>LeetCode周赛268场</h1><p>这周的周赛题都比较简单，前两题可以直接暴力和模拟，而第三题也是可以稍微想一下就做出来，简直不要太舒服</p><h2 id="2078-两栋颜色不同且距离最远的房子"><a href="#2078-两栋颜色不同且距离最远的房子" class="headerlink" title="2078. 两栋颜色不同且距离最远的房子"></a><a href="https://leetcode-cn.com/problems/two-furthest-houses-with-different-colors/">2078. 两栋颜色不同且距离最远的房子</a></h2><img src="https://i.loli.net/2021/11/26/oTdO5KVy9SRCjJA.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/eSAYdFw7fWrxtKg.png" style="zoom:80%;" /><p>这题的暴力解法可以直接写出来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> clen<span class="token operator">=</span>colors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>clen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>clen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时还有一个稍微贪心的做法，分三种情况</p><ol><li>如果最左边和最右边房子颜色不一样，则直接返回<code>(n-1)-0</code></li><li>固定下标为<code>0</code>位置，向后面找与它最大距离的不同颜色房子</li><li>固定下标为<code>n-1</code>位置，向前找最大距离的不同颜色房子，并与第二步的数值作比较，得出最大距离</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 如果首位颜色不同直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> colors<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 获取左边第一个不相同的位置</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取右边第一个不相同的位置</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 0～right 的长度 和 left～length-1 的长度取最大值</span>        <span class="token comment">// 因为要最大，所以不可能在中间，要么就是左边，要么就是右边</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2079-给植物浇水"><a href="#2079-给植物浇水" class="headerlink" title="2079. 给植物浇水"></a><a href="https://leetcode-cn.com/problems/watering-plants/">2079. 给植物浇水</a></h2><img src="https://i.loli.net/2021/11/26/v8UbFT4hyziVG7P.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/k9UMTJw5QI7jAx6.png" style="zoom:80%;" /><p>这道题是一个模拟题，直接按照题意做就好了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">wateringPlants</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> plants<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> plen<span class="token operator">=</span>plants<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>plen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fullWater<span class="token operator">=</span>capacity<span class="token punctuation">;</span><span class="token comment">//水池</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                capacity<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//不够水</span>                res<span class="token operator">+=</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                capacity<span class="token operator">=</span>fullWater<span class="token punctuation">;</span>                capacity<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2080-区间内查询数字的频率"><a href="#2080-区间内查询数字的频率" class="headerlink" title="2080. 区间内查询数字的频率"></a><a href="https://leetcode-cn.com/problems/range-frequency-queries/">2080. 区间内查询数字的频率</a></h2><img src="https://i.loli.net/2021/11/26/qM9VxosD2Zf7caS.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/26/uSXRqy7Mb9lhnYx.png" style="zoom:80%;" /><p>这道题需要提前处理一下，存放的容器有两种方案<code>vector</code>和<code>unordered_map</code></p><p>预处理是为了记录每个数在哪些位置出现过</p><p>两个版本在<code>query()</code>函数查找都运用了C++算法的内置函数<code>lower_bound()</code>和<code>upper_bound()</code>，这里可以了解一下它们的作用，它们都是运用了二分查找方法，需要用在有特定顺序的容器中</p><p>这里举个栗子，在数组<code>vector&lt;int&gt; arr=[10 10 10 20 20 20 30 30]</code>，然后分别调用两个函数，并且第三个参数<code>val</code>填入<code>20</code>，最后输出迭代器的位置<code>iter-arr.begin()</code></p><ul><li><code>lower_bound()</code>：找出容器中第一个大于等于<code>val</code>的数的位置，在这个例子中我们输出迭代器的位置为<code>3</code></li><li><code>upper_bound()</code>：找出容器中第一个大于<code>val</code>的数的位置，在这个例子中输出的迭代器位置为<code>6</code></li></ul><p><code>unordered_map</code>版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//unordered_map</span><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> map<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>arr<span class="token operator">=</span>vec<span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//预处理</span>            <span class="token keyword">int</span> cur<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录每个数字分别出现的位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> curArr<span class="token operator">=</span>map<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>curArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>alen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">auto</span> l<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>curArr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curArr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> r<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>curArr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curArr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token operator">-</span>l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your RangeFreqQuery object will be instantiated and called as such: * RangeFreqQuery* obj = new RangeFreqQuery(arr); * int param_1 = obj->query(left,right,value); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector&lt;vector&lt;int&gt;&gt;</code>版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span>  vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> data<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">upper_bound</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛266场</title>
      <link href="LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B266%E5%9C%BA/"/>
      <url>LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B266%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode周赛266场"><a href="#LeetCode周赛266场" class="headerlink" title="LeetCode周赛266场"></a>LeetCode周赛266场</h1><p>本周的周赛题目看上去挺难的，但赛后看了一下别人的解答发现其实也并不复杂，终究还是得多做题多思考💦</p><h2 id="2062-统计字符串中的元音子字符串"><a href="#2062-统计字符串中的元音子字符串" class="headerlink" title="2062. 统计字符串中的元音子字符串"></a><a href="https://leetcode-cn.com/problems/count-vowel-substrings-of-a-string/">2062. 统计字符串中的元音子字符串</a></h2><img src="https://i.loli.net/2021/11/09/ng5oS9MrtU3XKDJ.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/QAnk9YMCWuNGDc3.png" style="zoom:80%;" /><p>第一题经典可以暴力解法，但需要注意看清题目，我在做的时候第一次看题跳着看导致看错了题意，所以简单题更应该小心，不能太着急</p><p>下面是我的暴力解法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countVowelSubstrings</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> w<span class="token operator">=</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">bool</span> sig<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    w<span class="token operator">=</span>word<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>temp<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span>                            sig<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>sig<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>sig<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2063-所有子字符串中的元音"><a href="#2063-所有子字符串中的元音" class="headerlink" title="2063. 所有子字符串中的元音"></a><a href="https://leetcode-cn.com/problems/vowels-of-all-substrings/">2063. 所有子字符串中的元音</a></h2><img src="https://i.loli.net/2021/11/09/ojNTOd4J9l2VuFz.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/GbS93UM7IRAd4Kt.png" style="zoom:80%;" /><p>这道题在竞赛做的时候觉得挺复杂挺难的，但看了题解之后其实并不难，只是一道dp问题，只可惜当时做的时候没有想到</p><p>这里的dp转移条件可以直接当成返回条件，即<code>res</code>，但是要注意它是一个<code>long long</code>类型的</p><p>随后是状态转移方程，我们在遍历字符串的时候，设当前遍历到的字符为<code>cur</code>，如果<code>cur</code>是元音字符，则到此字符为止的<code>res</code>状态是由前一个字符的<code>res</code>状态再加上当前包含<code>cur</code>的子字符串个数，即<code>if(cur==元音) -&gt; res=res+包含cur子串个数</code></p><p>那么现在问题来到了怎么求包含<code>cur</code>子串个数问题，我们可以将<code>cur</code>在字符串中位置视为中点，例如它的位置为<code>i</code></p><p>则在它左边可以选择第<em>0,1,2,3…i-1,i</em>个字符与<code>cur</code>构成一个子串，这里一共有<code>i+1</code>种情况</p><p>在它右边可以选择<em>i,i+1,i+2….n-2,n-1</em>，一共<code>n-i</code>种情况</p><p>总共加起来的子字符串个数就是<code>(i+1)(n-i)</code>，这里为什么要用乘法呢，是因为字符<code>cur</code>两边可以互相连接，例如在<em>a b c d e</em>字符串中，以<em>b</em>为中心，可以构成以下子串 <em>a b c</em> 或  <em>b c d</em> 等，两边选择一些字符然后构成其中一个子串，所以这是数学中排列组合的 <strong>组合问题</strong></p><p>了解了这些就可以很轻易写出代码来了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">countVowels</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> vowels<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> cur<span class="token operator">=</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>vowels<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//遍历到的字母是元音字母</span>                    res<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>wlen<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2064-分配给商店的最多商品的最小值"><a href="#2064-分配给商店的最多商品的最小值" class="headerlink" title="2064. 分配给商店的最多商品的最小值"></a><a href="https://leetcode-cn.com/problems/minimized-maximum-of-products-distributed-to-any-store/">2064. 分配给商店的最多商品的最小值</a></h2><img src="https://i.loli.net/2021/11/09/L8MljnYs4i1cRdp.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/09/k3mcabiyPAlSfzv.png" style="zoom:80%;" /><p>这道题也是当时做不出来的，觉得题目似懂非懂的样子，导致也没有思路</p><p>其实这道题本质是一个二分题，要找出可以满足分配店铺情况下，每家店最大可以分配的商品数</p><p>我们就可以通过循环不断寻找这个值，这里设每一回合分配<code>mid</code>个商品时，最后需要的店铺数为<code>cnt</code>，在一轮分配结束后，判断<code>cnt</code>与题目所给的<code>n</code>的关系</p><p>如果：</p><ul><li><code>cnt</code>&gt;<code>n</code>，则一定不合法，因为店铺数量过多证明商品分配太少了，可以再进一步压缩店铺数</li><li><code>cnt</code>=<code>n</code>，刚好满足分配店铺数要求，但是要注意商品数不能有剩余，即<code>mod=0</code></li><li><code>cnt</code>&lt;<code>n</code>，说明不能对每个商店都分配 mid 商品，但剩余的商品种类必须满足未能分配的商店 即 mod &lt;= n - cnt。我们可以把所有剩下的商品分配到剩余的商店中，若仍有商店剩余就不分配商品，则每种剩余的商品数量一定小于mid</li></ul><p>下面是我后来自己写的代码，要注意的是二分的界限，如每次更新时的操作等，还有就是最后返回的是<code>l</code>，我也试过了若直接返回<code>mid</code>是不行的（❗这里不知道为什么）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//注意初始值条件</span>        <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>quantities<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>quantities<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>quantities<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> cur<span class="token operator">=</span>i<span class="token operator">/</span>mid<span class="token punctuation">;</span><span class="token comment">//求出当前商品按mid件一家店可以分多少店</span>                cnt<span class="token operator">+=</span>cur<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>mid<span class="token punctuation">)</span><span class="token comment">//如果还有剩余商品没有给分配，则分配的店铺量要加一</span>                    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>n<span class="token punctuation">)</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//返回条件要注意</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个简略一点的代码，别人写的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>quantities<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quantities<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">:</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> mid<span class="token punctuation">;</span><span class="token comment">//这里是向上取整操作，即分配剩余的商品再加一个商店来放它</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebServer项目代码</title>
      <link href="WebServer/WebServer%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/"/>
      <url>WebServer/WebServer%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="WebServer项目代码"><a href="#WebServer项目代码" class="headerlink" title="WebServer项目代码"></a>WebServer项目代码</h1><p>这里专门来存放一下我正在做的IO多路复用高并发服务器<code>WebServer</code>的代码，方便在平板上看</p><h1 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h1><h2 id="http-conn-h👇"><a href="#http-conn-h👇" class="headerlink" title="http_conn.h👇"></a>http_conn.h👇</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HTTPCONNECTION_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HTTPCONNECTION_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../lock/locker.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../CGImysql/sql_connection_pool.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../timer/lst_timer.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../log/log.h"</span></span><span class="token keyword">class</span> <span class="token class-name">http_conn</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> FILENAME_LEN <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> READ_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> WRITE_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">METHOD</span>    <span class="token punctuation">&#123;</span>        GET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        POST<span class="token punctuation">,</span>        HEAD<span class="token punctuation">,</span>        PUT<span class="token punctuation">,</span>        DELETE<span class="token punctuation">,</span>        TRACE<span class="token punctuation">,</span>        OPTIONS<span class="token punctuation">,</span>        CONNECT<span class="token punctuation">,</span>        PATH    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">CHECK_STATE</span>    <span class="token punctuation">&#123;</span>        CHECK_STATE_REQUESTLINE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        CHECK_STATE_HEADER<span class="token punctuation">,</span>        CHECK_STATE_CONTENT    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">HTTP_CODE</span>    <span class="token punctuation">&#123;</span>        NO_REQUEST<span class="token punctuation">,</span>        GET_REQUEST<span class="token punctuation">,</span>        BAD_REQUEST<span class="token punctuation">,</span>        NO_RESOURCE<span class="token punctuation">,</span>        FORBIDDEN_REQUEST<span class="token punctuation">,</span>        FILE_REQUEST<span class="token punctuation">,</span>        INTERNAL_ERROR<span class="token punctuation">,</span>        CLOSED_CONNECTION    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">LINE_STATUS</span>    <span class="token punctuation">&#123;</span>        LINE_OK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        LINE_BAD<span class="token punctuation">,</span>        LINE_OPEN    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">http_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">http_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> sockaddr_in <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passwd<span class="token punctuation">,</span> string sqlname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token keyword">bool</span> real_close <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sockaddr_in <span class="token operator">*</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>m_address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">initmysql_result</span><span class="token punctuation">(</span>connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timer_flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> improv<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    HTTP_CODE <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> m_read_buf <span class="token operator">+</span> m_start_line<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    LINE_STATUS <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m_user_count<span class="token punctuation">;</span>    MYSQL <span class="token operator">*</span>mysql<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_state<span class="token punctuation">;</span>  <span class="token comment">//读为0, 写为1</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_sockfd<span class="token punctuation">;</span>    sockaddr_in m_address<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_read_buf<span class="token punctuation">[</span>READ_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_read_idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_checked_idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_start_line<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_write_buf<span class="token punctuation">[</span>WRITE_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_write_idx<span class="token punctuation">;</span>    CHECK_STATE m_check_state<span class="token punctuation">;</span>    METHOD m_method<span class="token punctuation">;</span>    <span class="token keyword">char</span> m_real_file<span class="token punctuation">[</span>FILENAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_url<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_version<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_host<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_content_length<span class="token punctuation">;</span>    <span class="token keyword">bool</span> m_linger<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_file_address<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stat</span> m_file_stat<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> m_iv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_iv_count<span class="token punctuation">;</span>    <span class="token keyword">int</span> cgi<span class="token punctuation">;</span>        <span class="token comment">//是否启用的POST</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_string<span class="token punctuation">;</span> <span class="token comment">//存储请求头数据</span>    <span class="token keyword">int</span> bytes_to_send<span class="token punctuation">;</span>    <span class="token keyword">int</span> bytes_have_send<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>doc_root<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> m_users<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_user<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_passwd<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sql_name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http-conn-cpp👇"><a href="#http-conn-cpp👇" class="headerlink" title="http_conn.cpp👇"></a>http_conn.cpp👇</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"http_conn.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token comment">//定义http响应的一些状态信息</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ok_200_title <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_400_title <span class="token operator">=</span> <span class="token string">"Bad Request"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_400_form <span class="token operator">=</span> <span class="token string">"Your request has bad syntax or is inherently impossible to staisfy.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_403_title <span class="token operator">=</span> <span class="token string">"Forbidden"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_403_form <span class="token operator">=</span> <span class="token string">"You do not have permission to get file form this server.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_404_title <span class="token operator">=</span> <span class="token string">"Not Found"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_404_form <span class="token operator">=</span> <span class="token string">"The requested file was not found on this server.\n"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_500_title <span class="token operator">=</span> <span class="token string">"Internal Error"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_500_form <span class="token operator">=</span> <span class="token string">"There was an unusual problem serving the request file.\n"</span><span class="token punctuation">;</span>locker m_lock<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> users<span class="token punctuation">;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">initmysql_result</span><span class="token punctuation">(</span>connection_pool <span class="token operator">*</span>connPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//先从连接池中取一个连接</span>    MYSQL <span class="token operator">*</span>mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    connectionRAII <span class="token function">mysqlcon</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mysql<span class="token punctuation">,</span> connPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在user表中检索username，passwd数据，浏览器端输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> <span class="token string">"SELECT username,passwd FROM user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"SELECT error:%s\n"</span><span class="token punctuation">,</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从表中检索完整的结果集</span>    MYSQL_RES <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>mysql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回结果集中的列数</span>    <span class="token keyword">int</span> num_fields <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回所有字段结构的数组</span>    MYSQL_FIELD <span class="token operator">*</span>fields <span class="token operator">=</span> <span class="token function">mysql_fetch_fields</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从结果集中获取下一行，将对应的用户名和密码，存入map中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>MYSQL_ROW row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string <span class="token function">temp1</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">temp2</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> temp2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//对文件描述符设置非阻塞</span><span class="token keyword">int</span> <span class="token function">setnonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old_option <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> new_option <span class="token operator">=</span> old_option <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> new_option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> old_option<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将内核事件表注册读事件，ET模式，选择开启EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">addfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">bool</span> one_shot<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> TRIGMode<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>one_shot<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">|=</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setnonblocking</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从内核时间表删除描述符</span><span class="token keyword">void</span> <span class="token function">removefd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_DEL<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将事件重置为EPOLLONESHOT</span><span class="token keyword">void</span> <span class="token function">modfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epollfd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> ev<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> TRIGMode<span class="token punctuation">)</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> ev <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token keyword">else</span>        event<span class="token punctuation">.</span>events <span class="token operator">=</span> ev <span class="token operator">|</span> EPOLLONESHOT <span class="token operator">|</span> EPOLLRDHUP<span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_MOD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> http_conn<span class="token operator">::</span>m_user_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> http_conn<span class="token operator">::</span>m_epollfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//关闭连接，关闭一个连接，客户总量减一</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token keyword">bool</span> real_close<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>real_close <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m_sockfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"close %d\n"</span><span class="token punctuation">,</span> m_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removefd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_sockfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        m_user_count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化连接,外部调用初始化套接字地址</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> sockaddr_in <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> TRIGMode<span class="token punctuation">,</span>                     <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passwd<span class="token punctuation">,</span> string sqlname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_sockfd <span class="token operator">=</span> sockfd<span class="token punctuation">;</span>    m_address <span class="token operator">=</span> addr<span class="token punctuation">;</span>    <span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> sockfd<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_user_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//当浏览器出现连接重置时，可能是网站根目录出错或http响应格式出错或者访问的文件中内容完全为空</span>    doc_root <span class="token operator">=</span> root<span class="token punctuation">;</span>    m_TRIGMode <span class="token operator">=</span> TRIGMode<span class="token punctuation">;</span>    m_close_log <span class="token operator">=</span> close_log<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_user<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_passwd<span class="token punctuation">,</span> passwd<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_name<span class="token punctuation">,</span> sqlname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化新接受的连接</span><span class="token comment">//check_state默认为分析请求行状态</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    mysql <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    bytes_have_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_check_state <span class="token operator">=</span> CHECK_STATE_REQUESTLINE<span class="token punctuation">;</span>    m_linger <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    m_method <span class="token operator">=</span> GET<span class="token punctuation">;</span>    m_url <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_content_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_host <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_start_line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_checked_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_read_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_write_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cgi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_read_buf<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> READ_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_write_buf<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> FILENAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从状态机，用于分析出一行内容</span><span class="token comment">//返回值为行的读取状态，有LINE_OK,LINE_BAD,LINE_OPEN</span>http_conn<span class="token operator">::</span>LINE_STATUS http_conn<span class="token operator">::</span><span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> m_checked_idx <span class="token operator">&lt;</span> m_read_idx<span class="token punctuation">;</span> <span class="token operator">++</span>m_checked_idx<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_checked_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> m_read_idx<span class="token punctuation">)</span>                <span class="token keyword">return</span> LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_checked_idx <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                m_read_buf<span class="token punctuation">[</span>m_checked_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> LINE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> LINE_BAD<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> LINE_OPEN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环读取客户数据，直到无数据可读或对方关闭连接</span><span class="token comment">//非阻塞ET工作模式下，需要一次性将数据读完</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_idx <span class="token operator">>=</span> READ_BUFFER_SIZE<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> bytes_read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//LT读取数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET读数据</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bytes_read <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_read_buf <span class="token operator">+</span> m_read_idx<span class="token punctuation">,</span> READ_BUFFER_SIZE <span class="token operator">-</span> m_read_idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m_read_idx <span class="token operator">+=</span> bytes_read<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求行，获得请求方法，目标url及http版本号</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_request_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_url <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_url<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>m_url<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        m_method <span class="token operator">=</span> GET<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_method <span class="token operator">=</span> POST<span class="token punctuation">;</span>        cgi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    m_url <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_version <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_version<span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token operator">*</span>m_version<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    m_version <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>m_version<span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"http://"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_url <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>        m_url <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_url <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>        m_url <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_url <span class="token operator">||</span> m_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token comment">//当url为/时，显示判断界面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m_url<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"judge.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_check_state <span class="token operator">=</span> CHECK_STATE_HEADER<span class="token punctuation">;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析http请求的一个头部信息</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_headers</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_check_state <span class="token operator">=</span> CHECK_STATE_CONTENT<span class="token punctuation">;</span>            <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Connection:"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">11</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_linger <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Content-length:"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">15</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_content_length <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncasecmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">"Host:"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        text <span class="token operator">+=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_host <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"oop!unknow header: %s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断http请求是否被完整读入</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">parse_content</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_read_idx <span class="token operator">>=</span> <span class="token punctuation">(</span>m_content_length <span class="token operator">+</span> m_checked_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text<span class="token punctuation">[</span>m_content_length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment">//POST请求中最后为输入的用户名和密码</span>        m_string <span class="token operator">=</span> text<span class="token punctuation">;</span>        <span class="token keyword">return</span> GET_REQUEST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LINE_STATUS line_status <span class="token operator">=</span> LINE_OK<span class="token punctuation">;</span>    HTTP_CODE ret <span class="token operator">=</span> NO_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>text <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_check_state <span class="token operator">==</span> CHECK_STATE_CONTENT <span class="token operator">&amp;&amp;</span> line_status <span class="token operator">==</span> LINE_OK<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line_status <span class="token operator">=</span> <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> LINE_OK<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        text <span class="token operator">=</span> <span class="token function">get_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_start_line <span class="token operator">=</span> m_checked_idx<span class="token punctuation">;</span>        <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>m_check_state<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> CHECK_STATE_REQUESTLINE<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_request_line</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> CHECK_STATE_HEADER<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_headers</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> BAD_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> GET_REQUEST<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> CHECK_STATE_CONTENT<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            ret <span class="token operator">=</span> <span class="token function">parse_content</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> GET_REQUEST<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            line_status <span class="token operator">=</span> LINE_OPEN<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> INTERNAL_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NO_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http_conn<span class="token operator">::</span>HTTP_CODE http_conn<span class="token operator">::</span><span class="token function">do_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>doc_root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("m_url:%s\n", m_url);</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理cgi</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cgi <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//根据标志判断是登录检测还是注册检测</span>        <span class="token keyword">char</span> flag <span class="token operator">=</span> m_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> m_url <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> FILENAME_LEN <span class="token operator">-</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将用户名和密码提取出来</span>        <span class="token comment">//user=123&amp;passwd=123</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            name<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        name<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            password<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m_string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        password<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是注册，先检测数据库中是否有重名的</span>            <span class="token comment">//没有重名的，进行增加数据</span>            <span class="token keyword">char</span> <span class="token operator">*</span>sql_insert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"INSERT INTO user(username, passwd) VALUES("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"', '"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>sql_insert<span class="token punctuation">,</span> <span class="token string">"')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span>mysql<span class="token punctuation">,</span> sql_insert<span class="token punctuation">)</span><span class="token punctuation">;</span>                users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m_lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/registerError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果是登录，直接判断</span>        <span class="token comment">//若浏览器端输入的用户名和密码在表中可以查找到，返回1，否则返回0</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> users<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> users<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">==</span> password<span class="token punctuation">)</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/welcome.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url<span class="token punctuation">,</span> <span class="token string">"/logError.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/register.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/log.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/picture.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/video.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'7'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>m_url_real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">,</span> <span class="token string">"/fans.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url_real<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>m_url_real<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>m_real_file <span class="token operator">+</span> len<span class="token punctuation">,</span> m_url<span class="token punctuation">,</span> FILENAME_LEN <span class="token operator">-</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_file_stat<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> NO_RESOURCE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IROTH<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> FORBIDDEN_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> BAD_REQUEST<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>m_real_file<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_file_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> FILE_REQUEST<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_file_address<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">munmap</span><span class="token punctuation">(</span>m_file_address<span class="token punctuation">,</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_file_address <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_to_send <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> <span class="token function">writev</span><span class="token punctuation">(</span>m_sockfd<span class="token punctuation">,</span> m_iv<span class="token punctuation">,</span> m_iv_count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        bytes_have_send <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        bytes_to_send <span class="token operator">-=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_have_send <span class="token operator">>=</span> m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_file_address <span class="token operator">+</span> <span class="token punctuation">(</span>bytes_have_send <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> bytes_to_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf <span class="token operator">+</span> bytes_have_send<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">-</span> bytes_have_send<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_to_send <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_linger<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_response</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_write_idx <span class="token operator">>=</span> WRITE_BUFFER_SIZE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    va_list arg_list<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>m_write_buf <span class="token operator">+</span> m_write_idx<span class="token punctuation">,</span> WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">,</span> format<span class="token punctuation">,</span> arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token punctuation">(</span>WRITE_BUFFER_SIZE <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> m_write_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    m_write_idx <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>arg_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"request:%s"</span><span class="token punctuation">,</span> m_write_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s %d %s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_content_length</span><span class="token punctuation">(</span>content_len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_length</span><span class="token punctuation">(</span><span class="token keyword">int</span> content_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Length:%d\r\n"</span><span class="token punctuation">,</span> content_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Content-Type:%s\r\n"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_linger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"Connection:%s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m_linger <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"keep-alive"</span> <span class="token operator">:</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_blank_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">add_content</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">add_response</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> http_conn<span class="token operator">::</span><span class="token function">process_write</span><span class="token punctuation">(</span>HTTP_CODE ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> INTERNAL_ERROR<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> error_500_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_500_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> BAD_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> error_404_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_404_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> FORBIDDEN_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> error_403_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>error_403_form<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> FILE_REQUEST<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">add_status_line</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> ok_200_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span>m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_file_address<span class="token punctuation">;</span>            m_iv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            m_iv_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            bytes_to_send <span class="token operator">=</span> m_write_idx <span class="token operator">+</span> m_file_stat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ok_string <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token function">add_headers</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">add_content</span><span class="token punctuation">(</span>ok_string<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base <span class="token operator">=</span> m_write_buf<span class="token punctuation">;</span>    m_iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    m_iv_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    bytes_to_send <span class="token operator">=</span> m_write_idx<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> http_conn<span class="token operator">::</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HTTP_CODE read_ret <span class="token operator">=</span> <span class="token function">process_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read_ret <span class="token operator">==</span> NO_REQUEST<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> write_ret <span class="token operator">=</span> <span class="token function">process_write</span><span class="token punctuation">(</span>read_ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>write_ret<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">close_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">modfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_sockfd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> m_TRIGMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="WebServer-h和WebServer-cpp👇"><a href="#WebServer-h和WebServer-cpp👇" class="headerlink" title="WebServer.h和WebServer.cpp👇"></a>WebServer.h和WebServer.cpp👇</h1><h2 id="WebServer-h"><a href="#WebServer-h" class="headerlink" title="WebServer.h"></a>WebServer.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">WEBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WEBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./threadpool/threadpool.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"./http/http_conn.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_FD <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">;</span>           <span class="token comment">//最大文件描述符</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_EVENT_NUMBER <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment">//最大事件数</span><span class="token keyword">const</span> <span class="token keyword">int</span> TIMESLOT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>             <span class="token comment">//最小超时单位</span><span class="token keyword">class</span> <span class="token class-name">WebServer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port <span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passWord<span class="token punctuation">,</span> string databaseName<span class="token punctuation">,</span>              <span class="token keyword">int</span> log_write <span class="token punctuation">,</span> <span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span> <span class="token keyword">int</span> trigmode<span class="token punctuation">,</span> <span class="token keyword">int</span> sql_num<span class="token punctuation">,</span>              <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span> <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dealwithsignal</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token operator">&amp;</span> timeout<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dealwithread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dealwithwrite</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//基础</span>    <span class="token keyword">int</span> m_port<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>m_root<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_log_write<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_close_log<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_actormodel<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_pipefd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_epollfd<span class="token punctuation">;</span>    http_conn <span class="token operator">*</span>users<span class="token punctuation">;</span>    <span class="token comment">//数据库相关</span>    connection_pool <span class="token operator">*</span>m_connPool<span class="token punctuation">;</span>    string m_user<span class="token punctuation">;</span>         <span class="token comment">//登陆数据库用户名</span>    string m_passWord<span class="token punctuation">;</span>     <span class="token comment">//登陆数据库密码</span>    string m_databaseName<span class="token punctuation">;</span> <span class="token comment">//使用数据库名</span>    <span class="token keyword">int</span> m_sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池相关</span>    threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span> <span class="token operator">*</span>m_pool<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_thread_num<span class="token punctuation">;</span>    <span class="token comment">//epoll_event相关</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_listenfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_OPT_LINGER<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_TRIGMode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_LISTENTrigmode<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//定时器相关</span>    client_data <span class="token operator">*</span>users_timer<span class="token punctuation">;</span>    Utils utils<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebServer-cpp"><a href="#WebServer-cpp" class="headerlink" title="WebServer.cpp"></a>WebServer.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//http_conn类对象</span>    users <span class="token operator">=</span> <span class="token keyword">new</span> http_conn<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//root文件夹路径</span>    <span class="token keyword">char</span> server_path<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">getcwd</span><span class="token punctuation">(</span>server_path<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> root<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/root"</span><span class="token punctuation">;</span>    m_root <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>server_path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span> server_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>m_root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定时器</span>    users_timer <span class="token operator">=</span> <span class="token keyword">new</span> client_data<span class="token punctuation">[</span>MAX_FD<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">WebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users_timer<span class="token punctuation">;</span>    <span class="token keyword">delete</span> m_pool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> string user<span class="token punctuation">,</span> string passWord<span class="token punctuation">,</span> string databaseName<span class="token punctuation">,</span> <span class="token keyword">int</span> log_write<span class="token punctuation">,</span>                      <span class="token keyword">int</span> opt_linger<span class="token punctuation">,</span> <span class="token keyword">int</span> trigmode<span class="token punctuation">,</span> <span class="token keyword">int</span> sql_num<span class="token punctuation">,</span> <span class="token keyword">int</span> thread_num<span class="token punctuation">,</span> <span class="token keyword">int</span> close_log<span class="token punctuation">,</span> <span class="token keyword">int</span> actor_model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_port <span class="token operator">=</span> port<span class="token punctuation">;</span>    m_user <span class="token operator">=</span> user<span class="token punctuation">;</span>    m_passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>    m_databaseName <span class="token operator">=</span> databaseName<span class="token punctuation">;</span>    m_sql_num <span class="token operator">=</span> sql_num<span class="token punctuation">;</span>    m_thread_num <span class="token operator">=</span> thread_num<span class="token punctuation">;</span>    m_log_write <span class="token operator">=</span> log_write<span class="token punctuation">;</span>    m_OPT_LINGER <span class="token operator">=</span> opt_linger<span class="token punctuation">;</span>    m_TRIGMode <span class="token operator">=</span> trigmode<span class="token punctuation">;</span>    m_close_log <span class="token operator">=</span> close_log<span class="token punctuation">;</span>    m_actormodel <span class="token operator">=</span> actor_model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">trig_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//LT + LT</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//LT + ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET + LT</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ET + ET</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> m_TRIGMode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LISTENTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        m_CONNTrigmode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">log_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_close_log<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化日志</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_log_write<span class="token punctuation">)</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">Log</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"./ServerLog"</span><span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">sql_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化数据库连接池</span>    m_connPool <span class="token operator">=</span> connection_pool<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_connPool<span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> m_user<span class="token punctuation">,</span> m_passWord<span class="token punctuation">,</span> m_databaseName<span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">,</span> m_sql_num<span class="token punctuation">,</span> m_close_log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化数据库读取表</span>    users<span class="token operator">-></span><span class="token function">initmysql_result</span><span class="token punctuation">(</span>m_connPool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//线程池</span>    m_pool <span class="token operator">=</span> <span class="token keyword">new</span> threadpool<span class="token operator">&lt;</span>http_conn<span class="token operator">></span><span class="token punctuation">(</span>m_actormodel<span class="token punctuation">,</span> m_connPool<span class="token punctuation">,</span> m_thread_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//网络编程基础步骤</span>    m_listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_listenfd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭连接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_OPT_LINGER<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_OPT_LINGER<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">linger</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_LINGER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> address<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>m_port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setsockopt</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>flag<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//epoll创建内核事件表</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENT_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    m_epollfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m_epollfd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_listenfd<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> m_LISTENTrigmode<span class="token punctuation">)</span><span class="token punctuation">;</span>    http_conn<span class="token operator">::</span>m_epollfd <span class="token operator">=</span> m_epollfd<span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">socketpair</span><span class="token punctuation">(</span>PF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">setnonblocking</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addfd</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGPIPE<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    utils<span class="token punctuation">.</span><span class="token function">addsig</span><span class="token punctuation">(</span>SIGTERM<span class="token punctuation">,</span> utils<span class="token punctuation">.</span>sig_handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span>TIMESLOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//工具类,信号和描述符基础操作</span>    Utils<span class="token operator">::</span>u_pipefd <span class="token operator">=</span> m_pipefd<span class="token punctuation">;</span>    Utils<span class="token operator">::</span>u_epollfd <span class="token operator">=</span> m_epollfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    users<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">,</span> m_root<span class="token punctuation">,</span> m_CONNTrigmode<span class="token punctuation">,</span> m_close_log<span class="token punctuation">,</span> m_user<span class="token punctuation">,</span> m_passWord<span class="token punctuation">,</span> m_databaseName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化client_data数据</span>    <span class="token comment">//创建定时器，设置回调函数和超时时间，绑定用户数据，将定时器添加到链表中</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>address <span class="token operator">=</span> client_address<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd <span class="token operator">=</span> connfd<span class="token punctuation">;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> util_timer<span class="token punctuation">;</span>    timer<span class="token operator">-></span>user_data <span class="token operator">=</span> <span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>cb_func <span class="token operator">=</span> cb_func<span class="token punctuation">;</span>    time_t cur <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> TIMESLOT<span class="token punctuation">;</span>    users_timer<span class="token punctuation">[</span>connfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> timer<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">add_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//若有数据传输，则将定时器往后延迟3个单位</span><span class="token comment">//并对新的定时器在链表上的位置进行调整</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    time_t cur <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>expire <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> TIMESLOT<span class="token punctuation">;</span>    utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"adjust timer once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">deal_timer</span><span class="token punctuation">(</span>util_timer <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    timer<span class="token operator">-></span><span class="token function">cb_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        utils<span class="token punctuation">.</span>m_timer_lst<span class="token punctuation">.</span><span class="token function">del_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"close fd %d"</span><span class="token punctuation">,</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>    socklen_t client_addrlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_LISTENTrigmode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span> <span class="token string">"accept error"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count <span class="token operator">>=</span> MAX_FD<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>m_listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s:errno is:%d"</span><span class="token punctuation">,</span> <span class="token string">"accept error"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>http_conn<span class="token operator">::</span>m_user_count <span class="token operator">>=</span> MAX_FD<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                utils<span class="token punctuation">.</span><span class="token function">show_error</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"Internal server busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">timer</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithsignal</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">&amp;</span>timeout<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">&amp;</span>stop_server<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sig<span class="token punctuation">;</span>    <span class="token keyword">char</span> signals<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> signals<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>signals<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ret<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> SIGALRM<span class="token operator">:</span>            <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> SIGTERM<span class="token operator">:</span>            <span class="token punctuation">&#123;</span>                stop_server <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithread</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"deal with the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//若监测到读事件，将该事件放入请求队列</span>            m_pool<span class="token operator">-></span><span class="token function">append_p</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">dealwithwrite</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>    <span class="token comment">//reactor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> m_actormodel<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_pool<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>users <span class="token operator">+</span> sockfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>improv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//proactor</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"send data to the client(%s)"</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">adjust_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">WebServer</span><span class="token operator">::</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> stop_server <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop_server<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>m_epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENT_NUMBER<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"epoll failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sockfd <span class="token operator">=</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token comment">//处理新到的客户连接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_listenfd<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">dealclinetdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>EPOLLRDHUP <span class="token operator">|</span> EPOLLHUP <span class="token operator">|</span> EPOLLERR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//服务器端关闭连接，移除对应的定时器</span>                util_timer <span class="token operator">*</span>timer <span class="token operator">=</span> users_timer<span class="token punctuation">[</span>sockfd<span class="token punctuation">]</span><span class="token punctuation">.</span>timer<span class="token punctuation">;</span>                <span class="token function">deal_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理信号</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> m_pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">dealwithsignal</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> stop_server<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>                    <span class="token function">LOG_ERROR</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"dealclientdata failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//处理客户连接上接收到的数据</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dealwithread</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dealwithwrite</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">timer_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LOG_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"timer tick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Config-h和Config-cpp👇"><a href="#Config-h和Config-cpp👇" class="headerlink" title="Config.h和Config.cpp👇"></a>Config.h和Config.cpp👇</h1><h2 id="Config-h"><a href="#Config-h" class="headerlink" title="Config.h"></a>Config.h</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONFIG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"webserver.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//端口号</span>    <span class="token keyword">int</span> PORT<span class="token punctuation">;</span>    <span class="token comment">//日志写入方式</span>    <span class="token keyword">int</span> LOGWrite<span class="token punctuation">;</span>    <span class="token comment">//触发组合模式</span>    <span class="token keyword">int</span> TRIGMode<span class="token punctuation">;</span>    <span class="token comment">//listenfd触发模式</span>    <span class="token keyword">int</span> LISTENTrigmode<span class="token punctuation">;</span>    <span class="token comment">//connfd触发模式</span>    <span class="token keyword">int</span> CONNTrigmode<span class="token punctuation">;</span>    <span class="token comment">//优雅关闭链接</span>    <span class="token keyword">int</span> OPT_LINGER<span class="token punctuation">;</span>    <span class="token comment">//数据库连接池数量</span>    <span class="token keyword">int</span> sql_num<span class="token punctuation">;</span>    <span class="token comment">//线程池内的线程数量</span>    <span class="token keyword">int</span> thread_num<span class="token punctuation">;</span>    <span class="token comment">//是否关闭日志</span>    <span class="token keyword">int</span> close_log<span class="token punctuation">;</span>    <span class="token comment">//并发模型选择</span>    <span class="token keyword">int</span> actor_model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Config-cpp"><a href="#Config-cpp" class="headerlink" title="Config.cpp"></a>Config.cpp</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token class-name">Config</span><span class="token operator">::</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//端口号,默认9006</span>    PORT <span class="token operator">=</span> <span class="token number">9006</span><span class="token punctuation">;</span>    <span class="token comment">//日志写入方式，默认同步</span>    LOGWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//触发组合模式,默认listenfd LT + connfd LT</span>    TRIGMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//listenfd触发模式，默认LT</span>    LISTENTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//connfd触发模式，默认LT</span>    CONNTrigmode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//优雅关闭链接，默认不使用</span>    OPT_LINGER <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//数据库连接池数量,默认8</span>    sql_num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//线程池内的线程数量,默认8</span>    thread_num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//关闭日志,默认不关闭</span>    close_log <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//并发模型,默认是proactor</span>    actor_model <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Config</span><span class="token operator">::</span><span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"p:l:m:o:s:t:c:a:"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'p'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            PORT <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            LOGWrite <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            TRIGMode <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'o'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            OPT_LINGER <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            sql_num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            thread_num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'c'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            close_log <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            actor_model <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebServer </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛265场</title>
      <link href="LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B265%E5%9C%BA/"/>
      <url>LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B265%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode周赛第265场"><a href="#LeetCode周赛第265场" class="headerlink" title="LeetCode周赛第265场"></a>LeetCode周赛第265场</h1><p>终于有时间来认认真真参加一次周赛了，前几周都是断断续续地参加，好几次都是有会要开给冲突了</p><p>本周周赛比较简单，第一、二题都是送分题，只是第二题稍微麻烦一些，然后第三题需要思考一下，但我做的时候并没有思路，所以这次重点来看第三题</p><h2 id="2057-值相等的最小索引"><a href="#2057-值相等的最小索引" class="headerlink" title="2057. 值相等的最小索引"></a><a href="https://leetcode-cn.com/problems/smallest-index-with-equal-value/">2057. 值相等的最小索引</a></h2><p>首先是简单题，照样也是一道送分题，而且这道题一分钟之内就可以写完，感觉不要太爽</p><img src="https://i.loli.net/2021/11/01/2a7lsy64WCNFXhT.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">smallestEqual</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2058-找出临界点之间的最小和最大距离"><a href="#2058-找出临界点之间的最小和最大距离" class="headerlink" title="2058. 找出临界点之间的最小和最大距离"></a><a href="https://leetcode-cn.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/">2058. 找出临界点之间的最小和最大距离</a></h2><p>这道题我在做的时候也做出来了，思路比较好想，就是代码有点多，比较麻烦</p><p>同时在一开始看题目是快速看的，看错了返回条件，好险是在测试用例时发现了，所以题目长的时候更应该慢慢看题目，不要着急</p><img src="https://i.loli.net/2021/11/01/zK8uh7MiqBbFsYx.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/01/ismdITA5bCnE8w9.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/11/01/CEGDgenFLxi8NqM.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nodesBetweenCriticalPoints</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> lst<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> minIndex<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token operator">&lt;</span>lst<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>val<span class="token operator">&lt;</span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span>                minIndex<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token operator">></span>lst<span class="token operator">-></span>val<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>val<span class="token operator">></span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span>                minIndex<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        lst<span class="token operator">=</span>lst<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> alen<span class="token operator">=</span>minIndex<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>alen<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>minIndex<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>minIndex<span class="token punctuation">[</span>alen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>minIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> m<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>alen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span>minIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minIndex<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                m<span class="token operator">=</span>temp<span class="token operator">&lt;</span>m<span class="token operator">?</span>temp<span class="token operator">:</span>m<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2059-转化数字的最小运算数"><a href="#2059-转化数字的最小运算数" class="headerlink" title="2059. 转化数字的最小运算数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/">2059. 转化数字的最小运算数</a></h2><p>这道题在竞赛时看懂了题目（终于看懂第三题了，泪目😭），但还是没有思路，所以打算竞赛时间过后来复习</p><p>赛后我看了<a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/solution/zhuan-hua-shu-zi-de-zui-xiao-yun-suan-sh-kju7/">官方题解</a>，思路其实还是很容易的，利用了队列来实现<strong>广度优先遍历</strong>，队列中每个元素的类型是一个<code>pair&lt;int,int&gt;</code>，记录的分别是<code>[计算结果，得出该结果所用的步数]</code></p><p>每一次遍历从队列中取出第一个值<code>x</code>，并将其进行<code>+</code>、<code>-</code>、<code>^</code>三种计算，得出结果<code>nx</code>，然后分为四种情况：</p><ul><li>如果<code>nx</code>刚好为我们要求的目标<code>goal</code>，直接返回步数step+1</li><li><code>nx</code>不在题目所给定的[1,1000]范围内，直接跳过，不进行操作</li><li><code>nx</code>在范围内，但是前面计算的数中已经出现过这个结果了，也是直接跳过，不进行操作（❗ 这里就要求我们额外记录一下之前出现的结果，我用的是<code>vector&lt;bool&gt;</code>数组）</li><li><code>nx</code>在范围内，前面也没有出现过这个数，则将得出的<code>nx</code>以<code>pair</code>的方式加到队列中</li></ul><p>❗ 另外一个要注意的是，由于题目还要求计算的数要利用给定数组<code>nums</code>中的数，所以这里要两层遍历，一层是三个操作符，另一层是和<code>nums</code>中的各个数计算</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> goal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> op3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span> ops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// 运算符列表</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 可操作范围内整数的访问情况</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 枚举数组中的元素和操作符并计算新生成的数值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> op<span class="token operator">:</span> ops<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> nx <span class="token operator">=</span> <span class="token function">op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果新生成的数值等于目标值，则返回对应操作数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">==</span> goal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 如果新生成的数值位于可操作范围内且未被加入队列，则更改访问情况并加入队列</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不存在从初始值到目标值的转化方案</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛258场</title>
      <link href="LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B258%E5%9C%BA/"/>
      <url>LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B258%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode周赛257场"><a href="#LeetCode周赛257场" class="headerlink" title="LeetCode周赛257场"></a>LeetCode周赛257场</h1><p>这周的周赛第二题卡了挺久的，特别是最后面几个用例</p><p>然后是第三题，虽然没有做但是看了一下，感觉也挺有趣的:ice_cream:</p><h2 id="5867-反转单词前缀-—（简单）"><a href="#5867-反转单词前缀-—（简单）" class="headerlink" title="5867. 反转单词前缀    —（简单）"></a><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/">5867. 反转单词前缀</a>    —（简单）</h2><img src="https://i.loli.net/2021/09/12/AXe5iKohCBj9Uw1.png" style="zoom:80%;" /><p>第一题送分题，怎么舒服怎么来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reversePrefix</span><span class="token punctuation">(</span>string word<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> wlen<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                index<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> word<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5868-可互换矩形的组数-—（中等）"><a href="#5868-可互换矩形的组数-—（中等）" class="headerlink" title="5868. 可互换矩形的组数    —（中等）"></a><a href="https://leetcode-cn.com/problems/number-of-pairs-of-interchangeable-rectangles/">5868. 可互换矩形的组数</a>    —（中等）</h2><img src="https://i.loli.net/2021/09/12/LQGpVs37gmyHbO4.png" style="zoom:80%;" /><p>提示：</p><ul><li>n == rectangles.length</li><li>1 &lt;= n &lt;= 105</li><li>rectangles[i].length == 2</li><li>1 &lt;= widthi, heighti &lt;= 105</li></ul><p>这道题出错好多次，全都是细节问题，刚开始想着暴力解法和记忆表解法，但是都超时了:point_down:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//！！！下面代码是超时的解法！！！</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rlen<span class="token operator">=</span>rectangles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵个数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>rlen<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>rectangles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>rectangles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rlen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后题目总共有46个用例，后面一直卡在后面几个，直接痛苦面具:sweat:</p><p>赛后看了一下别人的解法，有两种方案，都是运用了哈希表来实现</p><p>有几个注意事项：</p><ol><li>精度问题，x/y按double求的话应该不会有问题，最好的方法应该是先求最大公约数，然后化简；</li><li>保存结果的话，注意key为<strong>pair时默认不支持unordered_map</strong>;（:warning:这个要注意）</li><li>注意数据范围，该用long long的地方不能犹豫。</li></ol><p>其中一种普通的解法可能会有给卡精度的风险，可能会有多个精度差不多的数而导致<code>res</code>改变，但本题目并没有卡，所以也可以了解一下该解法</p><p>简单来说就是遍历一遍矩形，求出各个矩阵的宽高比并打入哈希表中，哈希表记录的是每一种宽高比的总数</p><p>最后再运用高中知识排列组合的<code>组合公式</code>来求，（在一堆相同的宽高比中选出两个来配对）</p><img src="https://i.loli.net/2021/09/12/HBOSmRXbVlp2AWe.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>map<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> cur<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>map<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token operator">+=</span><span class="token punctuation">(</span>second<span class="token operator">*</span><span class="token punctuation">(</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种解法刚开始我是不太懂的，它是用了<code>gcd()</code>来求宽和高之间<code>最大公因数</code>，再利用它来化简宽高比：将(分子*BASE+分母)作为一个key存入哈希表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">interchangeableRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>map<span class="token punctuation">;</span>        <span class="token keyword">constexpr</span> <span class="token keyword">long</span> <span class="token keyword">long</span> BASE<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">1e8</span><span class="token punctuation">;</span><span class="token comment">//基数，大一点的数都可以</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> frac<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token operator">*</span>BASE<span class="token operator">+</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//化简，乘上基数以便在哈希表内区分</span>            <span class="token operator">++</span>map<span class="token punctuation">[</span>frac<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span>second<span class="token punctuation">]</span><span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">+=</span><span class="token punctuation">(</span>second<span class="token operator">*</span><span class="token punctuation">(</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5869-两个回文子序列长度的最大乘积-—（中等）"><a href="#5869-两个回文子序列长度的最大乘积-—（中等）" class="headerlink" title="5869. 两个回文子序列长度的最大乘积    —（中等）"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/">5869. 两个回文子序列长度的最大乘积</a>    —（中等）</h2><p>给你一个字符串 s ，请你找到 s 中两个 不相交回文子序列 ，使得它们长度的 乘积最大 。两个子序列在原字符串中如果没有任何相同下标的字符，则它们是 不相交 的。</p><p>请你返回两个回文子序列长度可以达到的 最大乘积 。</p><p>子序列 指的是从原字符串中删除若干个字符（可以一个也不删除）后，剩余字符不改变顺序而得到的结果。如果一个字符串从前往后读和从后往前读一模一样，那么这个字符串是一个 回文字符串 。</p><p>示例 1：</p><img src="https://i.loli.net/2021/09/12/lZzOQqu7myNiCaG.png" style="zoom:80%;" /><blockquote><p>输入：s = “leetcodecom”<br>输出：9<br>解释：最优方案是选择 “ete” 作为第一个子序列，”cdc” 作为第二个子序列。<br>它们的乘积为 3 * 3 = 9 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “bb”<br>输出：1<br>解释：最优方案为选择 “b” （第一个字符）作为第一个子序列，”b” （第二个字符）作为第二个子序列。<br>它们的乘积为 1 * 1 = 1 。</p></blockquote><p>示例 3：</p><blockquote><p>输入：s = “accbcaxxcxx”<br>输出：25<br>解释：最优方案为选择 “accca” 作为第一个子序列，”xxcxx” 作为第二个子序列。<br>它们的乘积为 5 * 5 = 25 。</p></blockquote><p>提示：</p><ul><li>2 &lt;= s.length &lt;= 12</li><li>s 只含有小写英文字母</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛257场</title>
      <link href="LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B257%E5%9C%BA/"/>
      <url>LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B257%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode周赛第257场"><a href="#LeetCode周赛第257场" class="headerlink" title="LeetCode周赛第257场"></a><a href="https://leetcode-cn.com/contest/weekly-contest-257/">LeetCode周赛第257场</a></h1><p>由于上一次周赛的时候LeetCode服务器出了问题，所以上次的周赛没有参加到</p><p>而本周的周赛开始前服务器也出了一些问题，好在修复地快进去了</p><img src="C:\Users\ZhaoYJ\AppData\Roaming\Typora\typora-user-images\image-20210905142220496.png" alt="image-20210905142220496" style="zoom:80%;" /><p>这周的周赛又让我从两道选手退化成了一道选手（前两道直接寄）</p><p>前两题都是数组题，后面两题就没怎么看了，这里就先记录前两道题目</p><h2 id="5863-统计特殊四元组"><a href="#5863-统计特殊四元组" class="headerlink" title="5863. 统计特殊四元组"></a><a href="https://leetcode-cn.com/problems/count-special-quadruplets/">5863. 统计特殊四元组</a></h2><p>给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目 ：</p><ul><li>nums[a] + nums[b] + nums[c] == nums[d] ，且</li><li>a &lt; b &lt; c &lt; d</li></ul><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,6]<br>输出：1<br>解释：满足要求的唯一一个四元组是 (0, 1, 2, 3) 因为 1 + 2 + 3 == 6 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [3,3,6,4,5]<br>输出：0<br>解释：[3,3,6,4,5] 中不存在满足要求的四元组。</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [1,1,1,3,5]<br>输出：4<br>解释：满足要求的 4 个四元组如下：</p></blockquote><ul><li>(0, 1, 2, 3): 1 + 1 + 1 == 3</li><li>(0, 1, 3, 4): 1 + 1 + 3 == 5</li><li>(0, 2, 3, 4): 1 + 1 + 3 == 5</li><li>(1, 2, 3, 4): 1 + 1 + 3 == 5</li></ul><p>第一道题因为数组长度最大到50，所以可以直接四重循环暴力解法</p><p>但是要注意是不能sort，因为题目给定了条件，初始下标中<code>a&lt;b&lt;c&lt;d</code>，如果排序的话就会打乱下标顺序了，我在做题中出错了一次也是这个原因</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countQuadruplets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//不能sort</span>        <span class="token keyword">int</span> nlen<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">&lt;</span>nlen<span class="token punctuation">;</span><span class="token operator">++</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token operator">++</span>res<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N^4)</p><hr><h2 id="5864-游戏中弱角色的数量"><a href="#5864-游戏中弱角色的数量" class="headerlink" title="5864. 游戏中弱角色的数量"></a><a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/">5864. 游戏中弱角色的数量</a></h2><p>你正在参加一个多角色游戏，每个角色都有两个主要属性：攻击 和 防御 。给你一个二维整数数组 properties ，其中 properties[i] = [attacki, defensei] 表示游戏中第 i 个角色的属性。</p><p>如果存在一个其他角色的攻击和防御等级 都严格高于 该角色的攻击和防御等级，则认为该角色为 弱角色 。更正式地，如果认为角色 i 弱于 存在的另一个角色 j ，那么 attackj &gt; attacki 且 defensej &gt; defensei 。</p><p>返回 <strong>弱角色</strong> 的数量。</p><p>这道题当初做的时候想到了一个思路但是没有去实现，觉得会超时，后面结束比赛后去试了一下还真可以过，下面就来记录一下</p><h3 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h3><p>简单点就是在二维数组中先按攻击力<strong>从大到小</strong>排好，如果两个角色的攻击力相同的话就按防御力<strong>从小到大</strong>排序，例如下面的排序结果</p><pre class="line-numbers language-none"><code class="language-none">6 36 45 25 53 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们再遍历一遍，同时记录防御力的最大值<code>dmax</code>，如果当前遍历到的角色防御力小于<code>dmax</code>则找到了一个弱角色</p><p>我们不用担心相同攻击力的情况，因为相同攻击力时防御力是小的在前面的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfWeakCharacters</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>properties<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> plen<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dmax<span class="token operator">=</span>INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> p<span class="token operator">:</span>properties<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//cout&lt;&lt;p[0]&lt;&lt;" "&lt;&lt;p[1]&lt;&lt;"\n";</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>dmax<span class="token punctuation">)</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>            dmax<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dmax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(NlogN)</p><h3 id="其它解法"><a href="#其它解法" class="headerlink" title="其它解法"></a>其它解法</h3><p>这里有个大佬 <a href="https://leetcode-cn.com/u/lucifer1004/">吴自华</a> 的<a href="https://cp-wiki.vercel.app/tutorial/leetcode/WC257/#problem-b-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F">解法</a></p><img src="https://i.loli.net/2021/09/05/AEUhl721HGLRXeo.png" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfWeakCharacters</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bhi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> properties<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> properties<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> properties<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bhi <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bhi<span class="token punctuation">,</span> properties<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> bhi<span class="token punctuation">)</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode周赛254场</title>
      <link href="LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/"/>
      <url>LeetCode/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/LeetCode%E5%91%A8%E8%B5%9B254%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode周赛第254场"><a href="#LeetCode周赛第254场" class="headerlink" title="LeetCode周赛第254场"></a>LeetCode周赛第254场</h1><p>这场周赛再次给虐惨了，做到第二题就卡住了没有思路，争取下次周赛可以做到第三题<img src="https://i.loli.net/2021/09/05/85EFy4tfaplSvIi.png"></p><h2 id="5843-作为子字符串出现在单词中的字符串数目-—（简单）"><a href="#5843-作为子字符串出现在单词中的字符串数目-—（简单）" class="headerlink" title="5843. 作为子字符串出现在单词中的字符串数目  —（简单）"></a><a href="https://leetcode-cn.com/problems/number-of-strings-that-appear-as-substrings-in-word/">5843. 作为子字符串出现在单词中的字符串数目</a>  —（简单）</h2><p>给你一个字符串数组 patterns 和一个字符串 word ，统计 patterns 中有多少个字符串是 word 的子字符串。返回字符串数目。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><p>示例 1：</p><blockquote><p>输入：patterns = [“a”,”abc”,”bc”,”d”], word = “abc”<br>输出：3<br>解释：</p><ul><li>“a” 是 “abc” 的子字符串。</li><li>“abc” 是 “abc” 的子字符串。</li><li>“bc” 是 “abc” 的子字符串。</li><li>“d” 不是 “abc” 的子字符串。</li></ul><p>patterns 中有 3 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 2：</p><blockquote><p>输入：patterns = [“a”,”b”,”c”], word = “aaaaabbbbb”<br>输出：2<br>解释：</p><ul><li>“a” 是 “aaaaabbbbb” 的子字符串。</li><li>“b” 是 “aaaaabbbbb” 的子字符串。</li><li>“c” 不是 “aaaaabbbbb” 的字符串。</li></ul><p>patterns 中有 2 个字符串作为子字符串出现在 word 中。</p></blockquote><p>示例 3：</p><blockquote><p>输入：patterns = [“a”,”a”,”a”], word = “ab”<br>输出：3<br>解释：patterns 中的每个字符串都作为子字符串出现在 word “ab” 中。</p></blockquote><p>提示：</p><ul><li>1 &lt;= patterns.length &lt;= 100</li><li>1 &lt;= patterns[i].length &lt;= 100</li><li>1 &lt;= word.length &lt;= 100</li><li>patterns[i] 和 word 由小写英文字母组成</li></ul><p>题目刚开始做的时候脑子没转过来，天真地想自己实现如何查找子字符串，到后面醒悟才想起可以用库函数，直接提交下一题（提交时还错了一次，哭）</p><p>注意这里<code>string::find()</code>可以用来查找子字符串，如果找到了则会返回子串第一个字符的下标序号，找不到则会返回<code>string::npos</code>该定值为<code>string::size_type</code>类型，即<code>size_t==usigned int</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numOfStrings</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> patterns<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token operator">:</span>patterns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string<span class="token operator">::</span>size_type pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5832-构造元素不等于两相邻元素平均值的数组-—（中等）"><a href="#5832-构造元素不等于两相邻元素平均值的数组-—（中等）" class="headerlink" title="5832. 构造元素不等于两相邻元素平均值的数组  —（中等）"></a><a href="https://leetcode-cn.com/problems/array-with-elements-not-equal-to-average-of-neighbors/">5832. 构造元素不等于两相邻元素平均值的数组</a>  —（中等）</h2><p>给你一个 下标从 0 开始 的数组 nums ，数组由若干 互不相同的 整数组成。你打算重新排列数组中的元素以满足：重排后，数组中的每个元素都 不等于 其两侧相邻元素的 平均值 。</p><p>更公式化的说法是，重新排列的数组应当满足这一属性：对于范围 1 &lt;= i &lt; nums.length - 1 中的每个 i ，(nums[i-1] + nums[i+1]) / 2 不等于 nums[i] 均成立 。</p><p>返回满足题意的任一重排结果。</p><p>示例 1：</p><blockquote><p>输入：nums = [1,2,3,4,5]<br>输出：[1,2,4,5,3]<br>解释：<br>i=1, nums[i] = 2, 两相邻元素平均值为 (1+4) / 2 = 2.5<br>i=2, nums[i] = 4, 两相邻元素平均值为 (2+5) / 2 = 3.5<br>i=3, nums[i] = 5, 两相邻元素平均值为 (4+3) / 2 = 3.5</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [6,2,0,9,7]<br>输出：[9,7,6,2,0]<br>解释：<br>i=1, nums[i] = 7, 两相邻元素平均值为 (9+6) / 2 = 7.5<br>i=2, nums[i] = 6, 两相邻元素平均值为 (7+2) / 2 = 4.5<br>i=3, nums[i] = 2, 两相邻元素平均值为 (6+0) / 2 = 3</p></blockquote><p>提示：</p><ul><li>3 &lt;= nums.length &lt;= 105</li><li>0 &lt;= nums[i] &lt;= 105</li></ul><p>这一道题刚拿到就写不出来了，完全没有思路，感觉和平时做的题型不一样</p><p>后来看了别人的作答之后才发现是挺简单的一道题，主要脑筋转不过来</p><p>这里拿数组<code>nums=[6,2,0,9,7]</code>来举例，简单的思路就是：</p><ol><li>先把数组排序，从小到大排好，eg：<code>nums=[0,2,6,7,9]</code></li><li>新建一个用来返回的空数组<code>res</code>，并按顺序将<code>nums</code>数组的数填充完<code>res</code>数组的奇数下标位（这里可以用一个指针<code>ans=0</code>指向nums表示填充到哪个数字），eg：<code>res=[0,-1,2,-1,6]</code>其中<code>-1</code>表示还没填充的位</li><li>最后再把偶数位也填充完，<code>res=[0,7,2,9,6]</code></li><li>此时在<code>res</code>数组中任意一位数要么是都大于两边的数，要么是都小于两边的数，即满足题目的要求，该数肯定不会等于两边数之和的平均数</li></ol><p>知道这个方法之后还是觉得挺简单的，主要就是想不到这个方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rearrangeArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>nLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nLen<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记29-制作主菜单界面</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B029-%E5%88%B6%E4%BD%9C%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>本章我们来为游戏制作一个主菜单界面</p><h1 id="在新场景中绘制画布"><a href="#在新场景中绘制画布" class="headerlink" title="在新场景中绘制画布"></a>在新场景中绘制画布</h1><p>我们要专门为我们的菜单新建一个场景，而菜单则是在这个新场景中绘制的</p><p>我这里先把场景搭建好了，注意我们在摆放人物的时候可以点击右键菜单进行<code>脱包</code>处理，这样我们移除组件时就不会影响到素材里面的模板了</p><img src="https://i.loli.net/2021/08/05/29wfpAg8ZEyLdDG.png" style="zoom:80%;" /><p>然后我们也把UI摆放好</p><img src="https://i.loli.net/2021/08/05/sHZyaWhDmL6qEvK.png" style="zoom:80%;" /><p>同时我们也可以给UI添加一些视觉效果的处理</p><h2 id="将UI添加立体效果"><a href="#将UI添加立体效果" class="headerlink" title="将UI添加立体效果"></a>将UI添加立体效果</h2><p>这里可以添加一种效果，我想点击new game 时候相机会穿过标题UI然后靠近传送门的样式，下面就来实现一下</p><p>我们选中画布，然后如下图设置，将<code>Render Mode</code>选择为<code>Camera</code>，再把摄像机拖到下面的框框里</p><img src="https://i.loli.net/2021/08/05/VQnMjOfywAeiNTh.png" style="zoom:80%;" /><p>这时候点击运行会发现按钮给场景遮挡住了，这时候我们可以调一下<code>Plane Distance</code>，比如改成1，按钮就又可以看到了</p><p>最后我们再把<code>Render Mode</code>改为<code>World Space</code>，然后尝试向前移动相机，就可以发现达成了相机穿越标题的效果了，之所以要经过上面的步骤是因为可以让Unity自动调节UI的合适位置</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>UI建立好之后我们就要来实现按钮的功能了</p><img src="https://i.loli.net/2021/08/05/uZCjd6oGp7DJqe3.png" style="zoom:80%;" /><p>按钮最主要就是监听事件，下面先单独来写各种功能的方法，最后再配上整个代码文件</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><p>其中最简单的就是退出游戏，一行搞定</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QuitGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//退出游戏功能</span>        Application<span class="token punctuation">.</span><span class="token function">Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NewGame"><a href="#NewGame" class="headerlink" title="NewGame"></a>NewGame</h2><p>然后是创建新游戏，这里就要涉及多个代码文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NewGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//清楚所有存档</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">DeleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转换场景</span>        <span class="token comment">//会在SceneController里面完成</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载第一个场景</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//转换场景，可用于在标题界面过渡到第一个界面中</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> scene<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>scene<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传入参数不为空</span>            <span class="token comment">//加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加载人物，在GMaeManager中创建了一个用于获得初始位置的方法</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> player <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//结束协程</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载第一个场景，可以将这个直接放在标题界面的功能里</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToFirstLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span><span class="token string">"3D RPG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GmaeManager.cs</span><span class="token comment">//获得场景加载入口，这里是标题界面进入主场景时用于获得落地点</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Transform</span> <span class="token function">GetEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>destinationTag<span class="token operator">==</span>TransitionDestination<span class="token punctuation">.</span>DestinationTag<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>                <span class="token keyword">return</span> item<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意要把几个Manager对象复制到标题场景中</p><h2 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h2><p>由于我们游戏有多个场景，因此在加载功能中我们还要记住上次保存玩家是停留在哪一个场景，从而在加载存档时判断要加载哪一个场景的画面</p><p>也是有多个代码文件需要修改，需要注意区分</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//记录保存场景的名字</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SceneName<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        <span class="token comment">//在保存数据同时保存玩家停留在哪个场景</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//Continue</span>    <span class="token comment">//用于加载游戏的加载方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> sceneName <span class="token operator">=</span> SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>SceneName<span class="token punctuation">;</span><span class="token comment">//获得上次保存场景名称，可能为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sceneName<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不为空的话就加载场景</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadLevel</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//PlayerController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册GmaeManager</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加载人物数据</span>SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MainMenu.cs</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ContinueGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//转换场景，读取进度</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToLoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游戏中Esc返回主菜单"><a href="#游戏中Esc返回主菜单" class="headerlink" title="游戏中Esc返回主菜单"></a>游戏中Esc返回主菜单</h2><p>我们还有一个功能是在游戏内必要的，就是返回主菜单功能，这里也来实现一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SaveManager.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//游戏中Esc回到主菜单</span>           SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>           <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>           <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs</span><span class="token comment">//加载标题场景协程</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加载标题方法</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitionToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这我们就成功实现了主菜单到游戏再到主菜单的过渡效果</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记28-保存数据</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B028-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>这一章比较简单，我们来学习如何保存数据，用到的有两个重要的API，文章中会有介绍到</p><h1 id="认识API"><a href="#认识API" class="headerlink" title="认识API"></a>认识API</h1><p>这里我们用到两个API，一个是**<a href="https://docs.unity.cn/cn/2020.3/ScriptReference/EditorPrefs.html">PlayerPrefs</a><strong>类，虽然官方文档写的是EditorPrefs，但是他们的方法是一样的，另外一个要用到的API是</strong><a href="https://docs.unity.cn/cn/2020.3/ScriptReference/JsonUtility.ToJson.html">JsonUtility.ToJson</a>**方法</p><p>PlayerPrefs：用于本地持久化保存与读取的类，PlayerPrefs类工作原理非常简单，以键值对的形式将数据保存在文件中，然后程序可以根据这个名称取出上次保存的数值</p><p>JsonUtility.ToJson：生成对象的公共字段的 JSON 表示形式。</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>我们新建一个<code>SaveManager.cs</code>然后来编写专门管理保存读取的类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SaveManager<span class="token punctuation">></span></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切换场景不销毁</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//保存</span>            <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取</span>            <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Save</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> PlayerData <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">;</span>        <span class="token function">Load</span><span class="token punctuation">(</span>PlayerData<span class="token punctuation">,</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> JsonUtility<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换为json</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再建立键值保存</span>        PlayerPrefs<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果键值存在的话就读取</span>            JsonUtility<span class="token punctuation">.</span><span class="token function">FromJsonOverwrite</span><span class="token punctuation">(</span>PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以进游戏体验一下了，按<code>S</code>键是保存玩家当前数据，按<code>L</code>键是读取，并且保存后在下一次游戏启动时仍然可以读取数据</p><p>Windows系统可以在注册表上看到保存的数据</p><img src="https://i.loli.net/2021/08/04/jTPgFrdWL1wH96N.png" style="zoom:80%;" /><h1 id="跨场景保存读取"><a href="#跨场景保存读取" class="headerlink" title="跨场景保存读取"></a>跨场景保存读取</h1><p>既然我们在下一次开启游戏也可以读取玩家数据，那么跨场景也不在话下</p><p>去到<code>SceneController.cs</code>修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//保存数据</span>        SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SavePlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>                        <span class="token comment">//读取玩家数据</span>            SaveManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">LoadPlayerData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在加载另外一个场景前会先保存数据，在加载场景完后我们先读取数据再退出协程</p><p>这样就实现了人物数据的保存了，当然这只是保存读取了人物的生命值、经验值等数据，其它数据也可以自由发挥</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记27-不同场景的传送</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B027-%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>这一章我们来实现不同场景的传送</p><p>首先，我们要把另外一个场景搭建好先，随后才可以进行下一步的工作，这里就自己发挥吧</p><p>搭建好场景后，我们就可以正式开始来实现如何跨场景传送了</p><h1 id="设置好传送门属性"><a href="#设置好传送门属性" class="headerlink" title="设置好传送门属性"></a>设置好传送门属性</h1><p>首先就是要把两个不同场景的传送门属性设置好，注意要选择不同场景传送并把名字填上</p><p>下面是主世界的传送门属性</p><img src="https://i.loli.net/2021/08/03/qSY69TCAibHz8wP.png" style="zoom:80%;" /><p>以及另外一个世界传送门的属性</p><img src="https://i.loli.net/2021/08/03/O4ymdIfH3CVZA2L.png" style="zoom:80%;" /><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>下面的代码可能有点分散，需要修改的文件比较多，会有注释写出来在哪个文件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SceneController.cs，添加了不同场景加载时的代码</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> playerPrefab<span class="token punctuation">;</span><span class="token comment">//玩家素材对象，用来不同场景时进行加载</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>                <span class="token comment">//同场景可以不用异步，直接传送</span>                <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>                <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>sceneName<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//TODO:保存数据</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token operator">!=</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不同场景的话</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//协程加载场景</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>playerPrefab<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>                <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载玩家素材对象</span>            <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加载好后跳出协程</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//相同场景</span>            <span class="token comment">//先获得玩家的对象</span>            player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>            <span class="token comment">//获得目的地传送门对象</span>            <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//设置对象的坐标和旋转角度</span>            player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//恢复导航移动</span>            player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里我们要外界把人物的素材拖进去代码中，以保证传送到另外一个场景时可以加载人物出来</p><img src="https://i.loli.net/2021/08/03/xDbVRIcpGHqTy4h.png" style="zoom:80%;" /><h1 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h1><h2 id="传送报错"><a href="#传送报错" class="headerlink" title="传送报错"></a>传送报错</h2><p>此时我们传送时会报错，有好几个问题我们慢慢来看</p><p>第一个问题是要把场景放在<code>Scene in Build</code>的设置当中</p><img src="https://i.loli.net/2021/08/03/dpRCZcfYrDAUx1V.png" style="zoom:80%;" /><p>第二个问题就是我们传送到新场景后，那些Manager文件都会不存在，因此我们要把它们加入<code>DontDestory</code>的清单里</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//在GameManager.cs  SceneController.cs  MouseManager.cs加上这行代码</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止此Manager文件在切换场景时给销毁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要在<code>GameManager.cs</code>  <code>SceneController.cs</code>  <code>MouseManager.cs</code>加上上面代码，并且是要<strong>继承单例模式的代码文件</strong></p><h2 id="人物传送后无法移动"><a href="#人物传送后无法移动" class="headerlink" title="人物传送后无法移动"></a>人物传送后无法移动</h2><p>这时候人物可以传送到另外一个场景了，但是不能移动，可能有下面问题</p><p>第一个可能存在的问题就是我们第二个场景的地板没有设置成<code>Ground</code>标签，我们要设置一下</p><p>第二个问题是我们在<code>PlayerController.cs</code>中的<code>OnMouseClicked</code>事件没有加载出来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材启用时注册事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//KeyManager.Instance.OnKeyInputMove+=MoveToTarget;</span>GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RigisterPlayer</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//素材禁用时注销事件</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">-=</span>MoveToTarget<span class="token punctuation">;</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">-=</span>EventAttact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="人物传送回来相机没有跟随"><a href="#人物传送回来相机没有跟随" class="headerlink" title="人物传送回来相机没有跟随"></a>人物传送回来相机没有跟随</h2><p>接着还有一个问题就是当我们从另外一个场景传送回来时，相机的跟随就会失效，这里来修复这个问题</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GameManager.cs</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>        <span class="token comment">//外界人物对象注册同时让相机进行跟随</span>        followCamera <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CinemachineFreeLook<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在地图中查找相机</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>followCamera<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果找到相机就让它跟随</span>            followCamera<span class="token punctuation">.</span>Follow <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>            followCamera<span class="token punctuation">.</span>LookAt <span class="token operator">=</span> playerStates<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记26-实现同场景的传送</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B026-%E5%AE%9E%E7%8E%B0%E5%90%8C%E5%9C%BA%E6%99%AF%E7%9A%84%E4%BC%A0%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>这里我们实现同场景的传送效果</p><h1 id="调整传送门"><a href="#调整传送门" class="headerlink" title="调整传送门"></a>调整传送门</h1><p>在这之前，我们要把不同的传送门摆放好先</p><p>另外我们可能会发现点击不了传送门，这是因为传送门的box collider挡住了我们鼠标的射线，这里把它的大小改一下就行了</p><img src="https://i.loli.net/2021/08/02/LHvS6JN4idPbQOA.png" style="zoom:80%;" /><p>给传送门加上<code>Portal</code>的标签，然后再去<code>MouseManager.cs</code>修改一下鼠标的图样</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//TODO:切换鼠标贴图</span><span class="token keyword">switch</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">"Ground"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>地面行走的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>arrow<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Enemy"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击敌人的图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>attack<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"Portal"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>点击传送门图标Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>doorway<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>Cursor<span class="token punctuation">.</span><span class="token function">SetCursor</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CursorMode<span class="token punctuation">.</span>Auto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//if</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Portal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//点击传送门</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编写传送管理代码"><a href="#编写传送管理代码" class="headerlink" title="编写传送管理代码"></a>编写传送管理代码</h1><p>我们创建一个<code>SceneController.cs</code>，之所以不是用Manager是因为在Unity有个<code>SceneManager</code>同名的文件存在</p><img src="https://i.loli.net/2021/08/02/FLvOK3csbIP45Xz.png" style="zoom:80%;" /><p>注意此文件继承的是<strong>单例模式</strong>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>SceneManagement</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SceneController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>SceneController<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">GameObject</span> player<span class="token punctuation">;</span><span class="token comment">//玩家</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionPoint</span> transitionPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//考虑是同场景还是不同场景的传送</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>transitionPoint<span class="token punctuation">.</span>transitionType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>SameScene<span class="token punctuation">:</span>            <span class="token comment">//同场景可以不用异步，直接传送</span>            <span class="token comment">//这里第一个参数是获得当前活动窗口的名字</span>            <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">Transition</span><span class="token punctuation">(</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>transitionPoint<span class="token punctuation">.</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransitionPoint<span class="token punctuation">.</span>TransitionType<span class="token punctuation">.</span>DifferentScene<span class="token punctuation">:</span>            <span class="token comment">//不同场景，用异步加载的方式</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name">IEnumerator</span> <span class="token function">Transition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先获得玩家的对象</span>        player <span class="token operator">=</span> GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>        <span class="token comment">//获得目的地传送门对象</span>        <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span>destinationTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象的坐标和旋转角度</span>        player<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetPositionAndRotation</span><span class="token punctuation">(</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>td<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//恢复导航移动</span>        player<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">TransitionDestination</span> <span class="token function">GetDestination</span><span class="token punctuation">(</span><span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过传送门目的地的标签寻找目的地传送门所在位置</span>        <span class="token class-name"><span class="token keyword">var</span></span> entrances <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TransitionDestination<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>entrances<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>destinationTag <span class="token operator">==</span> destinationTag<span class="token punctuation">)</span><span class="token comment">//目的地传送门标签匹配的话</span>                <span class="token keyword">return</span> entrances<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外当我们玩家到达传送门，我希望它可以按键触发传送的，所以这里去到<code>TransitionPoint.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//触发器设置</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>E<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> canTrans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//按键触发传送</span>        SceneController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">TransitiToDestination</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个工作就是要把我们的<code>TransitionDestination.cs</code>作为组件添加在传送门子对象的点上</p><img src="https://i.loli.net/2021/08/02/3Jm9QXySOEiqdRF.png" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/02/Hen9PBroRJYcFjp.png" style="zoom:80%;" /><p>这个点是用来设置当前的点是属于哪一个标签的，我们就把一个传送门当做入口设为<code>ENTER</code>，另一个传送门当做目的地设为<code>A</code></p><p>另外去到传送门中，目的地也要进行对应的设置，入口传送门的目的地是<code>A</code>，反过来另外一个传送门想过来就要设置目的地为<code>ENTER</code></p><p><strong>注意</strong>：我们最好不要设置多个同一标签的传送门，可能会出现问题</p><p>最后，建立一个空对象，并把<code>SceneController.cs</code>作为组件附上去</p><img src="https://i.loli.net/2021/08/02/caN1CyLrJU76bnI.png" style="zoom:80%;" /><h1 id="Trigger无法触发问题"><a href="#Trigger无法触发问题" class="headerlink" title="Trigger无法触发问题"></a>Trigger无法触发问题</h1><p>如果函数内的Trigger事件没有触发的话，可能是玩家上没有添加钢体的原因，把钢体添加在主动碰撞的物体上（这里是玩家），然后把传送门和玩家的碰撞体组件中<code>IsTrigger</code>勾选上就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记25-制作传送门</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B025-%E5%88%B6%E4%BD%9C%E4%BC%A0%E9%80%81%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>我们这一章来制作一个传送门以供后面玩家切换不同场景时使用</p><h1 id="制作传送门Shader"><a href="#制作传送门Shader" class="headerlink" title="制作传送门Shader"></a>制作传送门Shader</h1><p>首先就是要来制作传送门的Shader，新建一个<code>Lit Shader Graph</code>，这是一个有光影响的shader，菜单中还有一个叫做Unlit Shader Graph就是没有光影响的</p><p>这里建好后起名为<code>Portal Shader</code></p><img src="https://i.loli.net/2021/08/01/pd7nMhKZHVBm4ar.png" style="zoom:80%;" /><p>注意里边的设置，Surface选择<code>Transparent</code>就是有透明通道的意思，然后勾选<code>Two Sided</code>显示两面</p><img src="https://i.loli.net/2021/08/01/k7eZSNDKwTt2Y43.png" style="zoom:80%;" /><p>这里直接上做好的图，颜色的属性面板中注意要选择<code>HDR</code></p><img src="https://i.loli.net/2021/08/01/nwoQLuWKhYSR8lp.png" style="zoom:80%;" /><p>做好后点击左上角<code>Save Asset</code>保存，然后右键<code>Shder Graph</code>创建为一个<code>Materials</code></p><img src="https://i.loli.net/2021/08/01/ecxz9EY5KfGgMOq.png" style="zoom:80%;" /><p>这样一个传送门的Shader就创建好了</p><h1 id="制作传送门"><a href="#制作传送门" class="headerlink" title="制作传送门"></a>制作传送门</h1><p>回到地图上，我们创建一个<code>Quad</code></p><img src="https://i.loli.net/2021/08/01/1ULfhYbuIgzD529.png" style="zoom:80%;" /><p>然后把刚刚的传送门材质附上去，然后就可以看到传送门的雏形了</p><img src="https://i.loli.net/2021/08/01/oGMurVFip1O8sjA.png" style="zoom:80%;" /><p>之后可以创建一个子对象，表示传送点，以后当玩家触碰这个点便可以触发传送事件</p><img src="https://i.loli.net/2021/08/01/z65KBjWylxAvGIo.png" style="zoom:80%;" /><p>如图我还将这个点附上了一个蓝色图标，代表这两个传送门是互通的，一对的，可以起到一个标记作用</p><h1 id="编写传送门基本代码"><a href="#编写传送门基本代码" class="headerlink" title="编写传送门基本代码"></a>编写传送门基本代码</h1><p>这里编写一下基本的传送门代码，详细的代码完善留在下一章节</p><img src="https://i.loli.net/2021/08/01/aVGXZyRzq36d8pt.png" style="zoom:80%;" /><p>这里的<code>TransitionPoint</code>挂载在传送门上，而<code>TransitionDestination</code>挂载在蓝色的点上</p><p>我们先来编辑TransitionPoint.cs</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionPoint.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionPoint</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TransitionType</span><span class="token punctuation">&#123;</span><span class="token comment">//传送状态</span>        SameScene<span class="token punctuation">,</span>DifferentScene    <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Transition Info（传送门设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">;</span><span class="token comment">//记录场景名称</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionType</span> transitionType<span class="token punctuation">;</span><span class="token comment">//记录传送状态，同场景传送就外边选择第一个，不同场景就选择第二个</span>    <span class="token keyword">public</span> <span class="token class-name">TransitionDestination<span class="token punctuation">.</span>DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token comment">//传送点目的地</span>    <span class="token comment">//触发器设置</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> canTrans<span class="token punctuation">;</span><span class="token comment">//是否触发传送</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerStay</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家在传送门区域内</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerExit</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//玩家离开了传送门区域</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            canTrans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中传送点目的地对应的在TransitionDestination.cs中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//TransitionDestination.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionDestination</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DestinationTag</span><span class="token punctuation">&#123;</span><span class="token comment">//传送点标签</span>        ENTER<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DestinationTag</span> destinationTag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的A,B,C可以自行修改，表示的是不同传送门中的不同地方，类似于一个站牌</p><p>我们还注意到在前面<code>TransitionPoint.cs</code>中有触发的代码，这里要到Unity属性面板中把触发<code>isTrigger</code>选项勾上，否则不能触发<code>OnTriggerStay()</code>和<code>OnTriggerExit()</code>方法</p><img src="https://i.loli.net/2021/08/01/G7DPlvBtNd5Lw9Y.png" style="zoom:80%;" /><p>当然，现在用到的是<code>Mesh Collider</code>，这里触发面积只是一个平面，我们可以换成<code>Box Collider</code>，让它的触发面积更大一些</p><img src="https://i.loli.net/2021/08/01/mPRClNHWdA6jufi.png" style="zoom:80%;" /><p>弄好这些后，记得把传送门保存为一个素材</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记24-制作玩家状态条</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B024-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%8A%B6%E6%80%81%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<p>本章来制作玩家的状态条，如血量条，经验条等</p><h1 id="编辑UI布局"><a href="#编辑UI布局" class="headerlink" title="编辑UI布局"></a>编辑UI布局</h1><p>第一步也是建立一个画布，模式使用默认的<code>Screen Space</code>覆盖屏幕</p><p>值得注意是为了使状态条可以随着屏幕的分辨率大小而切换，我们的<code>UI Scale Mode</code>要设置成<code>Scale With Scree</code></p><img src="https://www.hualigs.cn/image/6104bb2a28b1d.jpg" style="zoom:80%;" /><p>之后创建好UI，可以在<code>Scene</code>视图的2D模式下调整到合适的位置，然后在<code>Game</code>视图下预览效果，可以自行多多尝试</p><p>最后的效果如下</p><img src="https://i.loli.net/2021/07/31/xh2a6d1GFWIAQB3.png" style="zoom:80%;" /><p>注意这里的文字我用了自定义的字体，在Unity中只用把你想要用的物体拖拽进来分类好，就可以直接在文字UI设置面板上选择使用了</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>接下来就是编写代码来管理我们的UI了</p><img src="https://i.loli.net/2021/07/31/WEluxrQkRazFKf5.png" style="zoom:80%;" /><p>然后把代码作为组件添加到上面创建的画布当中，接着就是编写代码了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>UI</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerHealthUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于我们的人物信息栏最终会保存为一个prefab</span>    <span class="token comment">//因此我们可以不使用拖拽gameobject方式来获得对象</span>    <span class="token comment">//可以直接使用获得对象的子对象方式</span>    <span class="token class-name">Text</span> levelText<span class="token punctuation">;</span><span class="token comment">//获得text文本</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//生命值拖拽条</span>    <span class="token class-name">Image</span> expSlider<span class="token punctuation">;</span><span class="token comment">//经验拖拽条</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注意GetChild填写的参数类似于数组下标，第一个对象的索引是0</span>        levelText <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Text<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得文字对象</span>        healthSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得生命拖拽条</span>        expSlider <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得经验值拖拽条</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        levelText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Level  "</span> <span class="token operator">+</span>             GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//00是规定给它的一个格式，比如01 02....</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过GameManager类来获得player的states</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>currentHealth<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>MaxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>currentExp<span class="token operator">/</span>            GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>baseExp<span class="token punctuation">;</span>        <span class="token comment">//更新图片填充</span>        expSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是借助了<code>GameManager.cs</code>中的单例模式实例化的方式来获得player的状态信息，因为先前我用了外界注册的方式把玩家的信息赋予了GameManager里面的成员变量</p><p>到这我们就大功告成了</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记23-制作玩家的升级</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B023-%E5%88%B6%E4%BD%9C%E7%8E%A9%E5%AE%B6%E7%9A%84%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>在本章中我们来制作玩家的经验系统，并附有升级功能</p><h1 id="扩展CharacterData-SO"><a href="#扩展CharacterData-SO" class="headerlink" title="扩展CharacterData_SO"></a>扩展CharacterData_SO</h1><p>我们首先打开<code>CharacterData_SO.cs</code>添加一些额外的属性进去，同时写一个升级时处理的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Character States/Data"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"States Info（属性信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">;</span><span class="token comment">//最大生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">;</span><span class="token comment">//当前生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseDefence<span class="token punctuation">;</span><span class="token comment">//基础防御值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentDefence<span class="token punctuation">;</span><span class="token comment">//当前防御值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Kill（击杀信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> killPoint<span class="token punctuation">;</span><span class="token comment">//击杀后掉落的经验值</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Level（等级信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentLevel<span class="token punctuation">;</span><span class="token comment">//当前等级</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxLevel<span class="token punctuation">;</span><span class="token comment">//最大等级数</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseExp<span class="token punctuation">;</span><span class="token comment">//基础经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentExp<span class="token punctuation">;</span><span class="token comment">//当前经验值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> levelBuff<span class="token punctuation">;</span><span class="token comment">//每次升级整体属性提升的百分比</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> LevelMultiplier<span class="token punctuation">&#123;</span>        <span class="token comment">//升级提升属性加的倍率</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>currentLevel<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> levelBuff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateExp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentExp <span class="token operator">+=</span> point<span class="token punctuation">;</span><span class="token comment">//把外界的经验加进来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentExp <span class="token operator">>=</span> baseExp<span class="token punctuation">)</span>            <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LevelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这个方法中添加升级时想提升的数据</span>        <span class="token comment">//将current+1限制在[0,maxLevel]闭区间中</span>        currentLevel <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>currentLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>maxLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将经验和生命值按照每一等级不同倍率增长（也可以使用固定值level buff）</span>        baseExp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>baseExp<span class="token operator">*</span>LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxHealth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>maxHealth <span class="token operator">*</span> LevelMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentHealth <span class="token operator">=</span> maxHealth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再去到<code>CharacterStates.cs</code>做最后的修改</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//打死怪后加经验</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        attacker<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//石头反击石头人的攻击方式</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span>    <span class="token comment">//TODO:加经验</span>    <span class="token comment">//可以通过GameManager来访问玩家的属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>playerStates<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span><span class="token function">UpdateExp</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>characterData<span class="token punctuation">.</span>killPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们去到人物的<code>PlayerData</code>还有每个敌人的<code>Data</code>添加属性就可以了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/bc33680758884eb88e5bfed71402eaa5.png" alt="1.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记22-制作血量条UI</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B022-%E5%88%B6%E4%BD%9C%E8%A1%80%E9%87%8F%E6%9D%A1UI/</url>
      
        <content type="html"><![CDATA[<p>这一章我们来制作一下敌人的血量条</p><h1 id="创建血条UI"><a href="#创建血条UI" class="headerlink" title="创建血条UI"></a>创建血条UI</h1><h2 id="创建血条基础形状（Canvas与Image）"><a href="#创建血条基础形状（Canvas与Image）" class="headerlink" title="创建血条基础形状（Canvas与Image）"></a>创建血条基础形状（Canvas与Image）</h2><p>首先在<code>Hierachy</code>窗口中创建一个<code>Canvas</code>（画布），并将它命名为<code>HealthBarCanvas</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/a4bddbb255de4c87825a7866dd064269.png" alt="1.png" style="zoom:80%;" /><p>之后我们改一下<code>HealthBarCanvas</code>设置，并把坐标重置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c8fa921e76f4decb29167a49ad882f1.png" alt="2.png" style="zoom:80%;" /><p>随后我们在这个画布的基础上创建一个<code>Image</code>，并将它命名为<code>Bar Holder</code>，然后在把它的坐标改一下，改成像一个血条的大小</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/48339de2f8e6417f94b09466da3b7428.png" alt="3.png" style="zoom:80%;" /><p>我们就可以在Scene窗口上看到血条的初始样子了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/ccf344e88ab44a2e92fc6563d1339523.png" alt="4.png" style="zoom:80%;" /><h2 id="创建血条底层图像（Source-Image）"><a href="#创建血条底层图像（Source-Image）" class="headerlink" title="创建血条底层图像（Source Image）"></a>创建血条底层图像（Source Image）</h2><p>接着我们要为<code>Bar Holder</code>导入一个<code>Source Image</code>作为血条的底层，这里就选择自己创建一个图像作为它的底层</p><p>首先要打开<code>Package Manager</code>安装一下<code>2D Sprite</code></p><img src="https://p26-tt.byteimg.com/origin/pgc-image/7c103cd1256d4e5cb07ed10165846528.png" alt="5.png" style="zoom:80%;" /><p>接着我们创建一个路径专门存放UI相关的对象，这里创建一个<code>Square</code>方形图像</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/73d842b512f940698760bf2547bbf82c.png" alt="6.png" style="zoom:80%;" /><p>再把这个方形图像应用在刚刚的<code>Source Image</code>中就行了</p><p>由于现在我们创建出来的是一个血条的底层，那么我们可以把它的颜色设置为红色底，待会有个上层图像设置成绿色，这样弄出来就有血条的样子了</p><p>因此我们这里把颜色改为红色（这里我把颜色的透明度改成了 150 ）</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/9d082235f7dc478ca60891914aaa2de1.png" alt="7.png" style="zoom:80%;" /><h2 id="创建血条上层图像"><a href="#创建血条上层图像" class="headerlink" title="创建血条上层图像"></a>创建血条上层图像</h2><p>我们在<code>Bar Holder</code>的基础上再创建一个图像<code>Image</code>，命名为<code>Current Health</code>，并将宽度和高度设置成和底层一样（2.5和0.25）</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/13abb2c92ea14215973e66d999182fa4.png" alt="8.png" style="zoom:80%;" /><p>同时<code>Source Image</code>还是和刚刚一样，颜色调为绿色</p><p>唯一不同的是图片的类型<code>Image Type</code>要调为<strong>填充</strong><code>Filled</code>，填充的方式为<strong>水平填充</strong><code>Horizontal</code>，之后我们就可以通过调节填充数量<code>Fill Amount</code>来控制绿色条的长度，从而代表血量的多少了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/f5d505bfb9e74b98a2e2ffdaa4b81b15.png" alt="9.png" style="zoom:80%;" /><p>效果图如下</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/72681600544d4713a09b34e971078333.png" alt="10.png" style="zoom:80%;" /><p>这样一个简陋的血条就弄好了，我们将它保存为一个素材</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/7d681c103df74db1921f9235c27f02e1.png" alt="11.png" style="zoom:80%;" /><h2 id="设置血条在敌人上方的位置"><a href="#设置血条在敌人上方的位置" class="headerlink" title="设置血条在敌人上方的位置"></a>设置血条在敌人上方的位置</h2><p>由于我们每个敌人高矮不同，就导致了血条在不同敌人的位置也不一样，同时也是为了方便我们后面的代码，这里我们要为每个敌人设置一下血条应该出现的位置</p><p>最直接的办法就是为每个敌人对象再创建一个子对象来记录血条位置</p><p>我们打开<code>Prefabs ---&gt; Characters</code>目录编辑敌人素材，这里拿史莱姆为例子</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/a4ed16108baa4e62a2c591cb1d263eb6.png" alt="13.png" style="zoom:80%;" /><p>像上面图片这样，我们创建了一个<code>HealthBar Point</code>的空对象来记录血条的位置，这样就很方便我们代码的编写了</p><p>最后按照同样的方式给每个敌人都安放<code>HealthBar Point</code></p><h1 id="编写血条代码"><a href="#编写血条代码" class="headerlink" title="编写血条代码"></a>编写血条代码</h1><h2 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h2><p>在创建血条代码之前，我们先在<code>CharacterStates.cs</code>中创建一个事件，即在造成伤害时要触发的血条变动事件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//造成伤害时血条改变的事件</span><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">></span></span> UpdateHealthBarOnAttack<span class="token punctuation">;</span><span class="token comment">//在造成伤害时调用</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;攻击了&#123;1&#125;，造成了&#123;2&#125;点伤害"</span><span class="token punctuation">,</span>attacker<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>defener<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">,</span>damage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO:血量条UI</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//血条事件</span>    UpdateHealthBarOnAttack<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>currentHealth<span class="token punctuation">,</span>MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件不为空则调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建血条代码"><a href="#创建血条代码" class="headerlink" title="创建血条代码"></a>创建血条代码</h2><p>接下来我们就来写控制血条的脚本代码</p><p>在下图目录创建一个脚本，起名为<code>HealthBarUI.cs</code></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/19ea0718eaf34586b42b44476b56da6c.png" alt="12.png" style="zoom:80%;" /><p>然后打开编写代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HealthBarUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> healthUIPrefab<span class="token punctuation">;</span><span class="token comment">//供外界提供一个血条素材</span>    <span class="token keyword">public</span> <span class="token class-name">Transform</span> barPoint<span class="token punctuation">;</span><span class="token comment">//记录血量条该显示在敌人的哪个位置</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"血条显示设置"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> alwaysVisible<span class="token punctuation">;</span><span class="token comment">//血条是否一直可见</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> visibleTime<span class="token punctuation">;</span><span class="token comment">//血条显示时间（如果不是一直可见的情况下）</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> timeLeft<span class="token punctuation">;</span><span class="token comment">//剩余的显示时间</span>    <span class="token class-name">Image</span> healthSlider<span class="token punctuation">;</span><span class="token comment">//拿到血条上层图像</span>    <span class="token class-name">Transform</span> UIbar<span class="token punctuation">;</span><span class="token comment">//记录生成的血条在的位置</span>    <span class="token class-name">Transform</span> cam<span class="token punctuation">;</span><span class="token comment">//拿到摄像机位置以处理血条一直面向我们摄像机</span>    <span class="token class-name">CharacterStates</span> currentStates<span class="token punctuation">;</span><span class="token comment">//获取当前人物的states</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currentStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentStates<span class="token punctuation">.</span>UpdateHealthBarOnAttack <span class="token operator">+=</span> UpdateHealthBar<span class="token punctuation">;</span><span class="token comment">//注册事件</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//OnEnable在每次切换地图时都会调用一次</span>        cam <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">;</span><span class="token comment">//获取主相机位置</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas <span class="token keyword">in</span> <span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Canvas<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//遍历每一个画布</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>renderMode <span class="token operator">==</span> RenderMode<span class="token punctuation">.</span>WorldSpace<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//找到血条所在的画布，有多种方法来获得</span>                <span class="token comment">//也可以供外界提供此画布，更严谨一点</span>                UIbar <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>healthUIPrefab<span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">;</span>                <span class="token comment">//获得上层图像（绿色条）的对象，下标为0</span>                healthSlider <span class="token operator">=</span> UIbar<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//是否一直可见</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateHealthBar</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> currentHealth<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//更新血量</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentHealth <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果当前血量小于等于0，就销毁UIbar</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每次更新时必然可见</span>        UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到血量百分比</span>        <span class="token class-name"><span class="token keyword">float</span></span> sliderPercent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>currentHealth <span class="token operator">/</span> maxHealth<span class="token punctuation">;</span>        <span class="token comment">//更新血条长度</span>        healthSlider<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> sliderPercent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在Update后一帧执行</span>        <span class="token comment">//更新血条跟随敌人位置</span>        <span class="token comment">//这里先检测UIbar有没有给销毁</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>UIbar <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            UIbar<span class="token punctuation">.</span>position <span class="token operator">=</span> barPoint<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//更新到敌人位置</span>            UIbar<span class="token punctuation">.</span>forward <span class="token operator">=</span> cam<span class="token punctuation">.</span>forward<span class="token punctuation">;</span><span class="token comment">//面朝摄像机（即摄像机的方向）</span>            <span class="token comment">//血条剩余显示时间</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>timeLeft <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alwaysVisible<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                timeLeft <span class="token operator">=</span> visibleTime<span class="token punctuation">;</span>                UIbar<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                timeLeft <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后把代码脚本挂载到每个敌人身上，再调整数据就可以运行试试看效果了</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记21-反击石头人</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B021-%E5%8F%8D%E5%87%BB%E7%9F%B3%E5%A4%B4%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p> 这一章中我们来实现石头人丢出石头来击飞玩家并且造成伤害的效果，同时玩家还可以利用石头反击石头人</p><h1 id="实现石头击飞玩家并造成伤害"><a href="#实现石头击飞玩家并造成伤害" class="headerlink" title="实现石头击飞玩家并造成伤害"></a>实现石头击飞玩家并造成伤害</h1><p>我们打开<code>Rock.cs</code>，我们要有区分性的触发伤害，对于玩家和敌人可以造成伤害，但是对于丢到地面的情况是不能造成伤害的，所以这里可以利用一个枚举来区分开来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RockStates</span><span class="token punctuation">&#123;</span>HitPlayer<span class="token punctuation">,</span>HitEnemy<span class="token punctuation">,</span>HitNothing<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token class-name">RockStates</span> rockStates<span class="token punctuation">;</span><span class="token comment">//枚举实例</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">;</span><span class="token comment">//造成的伤害是多少</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//other指被石头打到的对象</span>    <span class="token comment">//当发生碰撞时会执行这个函数</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>rockStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitPlayer<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction <span class="token operator">*</span> force<span class="token punctuation">;</span><span class="token comment">//击退玩家</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//眩晕</span>                <span class="token comment">//这里的TakeDamage是重载的其中一个方法</span>                <span class="token comment">//造成伤害</span>                other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span><span class="token comment">//复原状态以防一直执行</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//end switch</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到其中的<code>TakeDamage()</code>是一个重载方法，打开<code>CharacterStates.cs</code>我们这里补充一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//函数重载</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> damage<span class="token punctuation">,</span><span class="token class-name">CharacterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> dam <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>damage <span class="token operator">-</span> defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defener<span class="token punctuation">.</span>currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>defener<span class="token punctuation">.</span>currentHealth <span class="token operator">-</span> dam<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后保存关闭，别忘了要在外边石头对象上赋予一个初始伤害值</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/87f552555d2d4f60b4fe62d0d9c10da6.png" alt="1.png" style="zoom:80%;" /><p>这样我们就实现了石头的第一个状态</p><h1 id="实现石头攻击石头人"><a href="#实现石头攻击石头人" class="headerlink" title="实现石头攻击石头人"></a>实现石头攻击石头人</h1><p>先把代码完善好</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们这里是反击石头人，所以要有个判断鼠标点击到了石头，一个最直接的办法就是给我们的石头添加一个标签，然后再修改一下鼠标点击时的方法</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/e18b4dde9c5b4129bba36dd1c9f553b2.png" alt="2.png" style="zoom:80%;" /><p>回到<code>PlayerController.cs</code>修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果点击的对象不是敌人而是其它另类可攻击对象，如石头</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates            <span class="token operator">==</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果是石头并且石头不在空中而是落地之后</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rockStates <span class="token operator">=</span> Rock<span class="token punctuation">.</span>RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">;</span>            <span class="token comment">//防止攻击那一刹那速度小于1导致石头状态发生改变</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span>                        <span class="token comment">//添加一个玩家朝向的力，力的大小暂时定 40</span>            attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算伤害</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到条件中有一个是判断是否为<code>HitNothing</code>，我们可以利用判断石头是否为接近于静止时为条件，这里我们就要回去<code>Rock.cs</code>做一些修改了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rb<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span><span class="token comment">//防止石头一生成时速度为0导致状态发生改变</span>    <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//固定帧更新</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>sqrMagnitude <span class="token operator">&lt;</span> <span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向量的平方</span>        rockStates <span class="token operator">=</span> RockStates<span class="token punctuation">.</span>HitNothing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后别忘了在<code>MouseManager.cs</code>加上代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> point <span class="token operator">=</span> hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击敌人传递敌人的gameObject</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Attackable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//点击石头等对象用</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="为石头加上爆裂特效"><a href="#为石头加上爆裂特效" class="headerlink" title="为石头加上爆裂特效"></a>为石头加上爆裂特效</h1><p>最后我们想在石头打到石头人时有一个爆裂碎石特效，这里就要用到<code>Particle System</code>了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/efcac51c11a3459cb6e1cfad55ff677a.png" alt="3.png" style="zoom:80%;" /><p>创建好之后我们按照下图参考设置</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/2a5fef602fe948eab2649b98a3f07f83.png" alt="5.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/529e6ea5fe1141afb30b34135e7b8018.png" alt="6.png" style="zoom:80%;" /><img src="https://p6-tt.byteimg.com/origin/pgc-image/e34343a1983440909f77ce88719261e3.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/973530a9742240a7bc989b50a5ce86fb.png" alt="8.png" style="zoom:80%;" /><p>自己多多测试一下效果，满意之后我们就可以改个名将它保存为一个素材放好先，然后不要忘了把地图上刚刚调试的删除</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/4b40b473872f4223a4aafecdb889c930.png" alt="9.png" style="zoom:80%;" /><p>最后再在<code>Rock.cs</code>上修改一下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">GameObject</span> RockBreakParticle<span class="token punctuation">;</span><span class="token comment">//石头爆裂特效，供外界拖拽进来</span><span class="token keyword">case</span> RockStates<span class="token punctuation">.</span>HitEnemy<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Golem<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得了石头人代码组件的就是石头人的，否则返回的是空</span>    <span class="token class-name"><span class="token keyword">var</span></span> otherStates <span class="token operator">=</span> other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    otherStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>damage<span class="token punctuation">,</span>otherStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    Instantiate        <span class="token punctuation">(</span>RockBreakParticle<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//击中敌人时产生爆裂特效</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后不要忘了把石头爆裂的特效拖进去设置面板里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/272290cea6af4b3a8f67fbe952186662.png" alt="10.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记20-实现石头人丢出石头</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B020-%E5%AE%9E%E7%8E%B0%E7%9F%B3%E5%A4%B4%E4%BA%BA%E4%B8%A2%E5%87%BA%E7%9F%B3%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<p>这一章我们实现一下石头人的特殊攻击，也就是生成一个石头然后丢向我们玩家</p><h1 id="编辑石头"><a href="#编辑石头" class="headerlink" title="编辑石头"></a>编辑石头</h1><p>首先我们找到石头素材拖出来，由于我们要给它施加一个力，因此这里就要用到<code>Rigidbody(钢体)</code>组件了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/63ea4e8d49e540acb69a7ded75d37782.png" alt="2.png" style="zoom:80%;" /><p>同时石头还要与地面发生碰撞，因此还要添加一个碰撞体，这里选择的是<code>MeshCollider</code>，勾选<code>Convex</code>可以看到碰撞体积刚好适配我们的石头形状</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/ddc484a234c94603b2b16b9dd5ea0a42.png" alt="3.png" style="zoom:80%;" /><p>然后我们就要来进行写代码了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/0a42c8f078f8441ea47b3ef4af3302f8.png" alt="1.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rock</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Rigidbody</span> rb<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings(扔出石头参数设置)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> force<span class="token punctuation">;</span><span class="token comment">//丢出去的冲击力大小</span>    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> target<span class="token punctuation">;</span><span class="token comment">//丢向的目标</span>    <span class="token keyword">private</span> <span class="token class-name">Vector3</span> direction<span class="token punctuation">;</span><span class="token comment">//丢出去的方向</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FlyToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//防止丢出去那一刹那玩家脱离丢失目标导致石头生成不出来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> <span class="token generic-method"><span class="token function">FindObjectOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PlayerController<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>                <span class="token comment">//Vector3.up是想在石头丢出去的时候上升一个高度</span>        direction <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position <span class="token operator">+</span> Vector3<span class="token punctuation">.</span>up<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>        <span class="token comment">//Impulse是冲击力的模式</span>        rb<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>direction <span class="token operator">*</span> force<span class="token punctuation">,</span>ForceMode<span class="token punctuation">.</span>Impulse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们将石头素材保存一个模板对象</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/735c192da1924614a7f5e0f0ee01b428.png" alt="4.png" style="zoom:80%;" /><h1 id="进一步完善石头人"><a href="#进一步完善石头人" class="headerlink" title="进一步完善石头人"></a>进一步完善石头人</h1><p>随后我们再次编辑石头人，因为我们的石头是从石头人的手上丢出去的，因此我们就要获得手的坐标，即下面的对象坐标</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/0cdbbddf408c42e6a443e151c343ce6b.png" alt="5.png" style="zoom:80%;" /><p>知道这个后我们暂时放在一边，来编写一下石头人的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Rock Settings（丢石头攻击的相关设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token class-name">GameObject</span> rockPrefab<span class="token punctuation">;</span><span class="token comment">//石头素材</span><span class="token keyword">public</span> <span class="token class-name">Transform</span> handPos<span class="token punctuation">;</span><span class="token comment">//丢出石头的手的坐标</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ThrowRock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建石头对象，第三个参数是旋转，这里选择维持初始旋转</span>        <span class="token class-name">GameObject</span> rock <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>rockPrefab<span class="token punctuation">,</span>handPos<span class="token punctuation">.</span>position<span class="token punctuation">,</span>Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>        rock<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rock<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>target <span class="token operator">=</span> attackTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把石头人的动画事件添加上去</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/6ec880f34ce24caab5c2270d61e5d04a.png" alt="6.png" style="zoom:80%;" /><p>最后别忘了还要选择石头的素材（就是我们刚刚保存好的素材模板），以及手的坐标</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/29b7a5e0ae72481a933c5728c35ca1b9.png" alt="7.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记19-设置石头人</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B019-%E8%AE%BE%E7%BD%AE%E7%9F%B3%E5%A4%B4%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>这一章节我们来设置石头人，由于和设置兽人相差不大，篇幅比较少</p><h1 id="设置动画"><a href="#设置动画" class="headerlink" title="设置动画"></a>设置动画</h1><p>我们去浏览石头人的动画可以发现，<code>Attack01</code>是类似拿起石头丢我们，它才是技能攻击，而<code>Attack02</code>是击晕玩家的攻击动画，可以作为普通攻击来使，因此我们在调整攻击动画时要注意分清</p><p>我们的动画控制器文件就选择是基于<code>兽人</code>的动画来完成，创建一个<code>New Animator Override Controller</code>，模板选择为兽人，然后再一个个动画替换上去</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/cbf3634f05844a5f98fed856698b1a5a.png" alt="1.png" style="zoom:80%;" /><p>其中<code>Run</code>并没有自带动画，我们可以用<code>Walk</code>代替</p><h1 id="编写代码文件"><a href="#编写代码文件" class="headerlink" title="编写代码文件"></a>编写代码文件</h1><p>我们像兽人代码文件那样单独创一个代码文件给石头人用，并且也是要继承<code>EnemyController</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Golem</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（石头人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//石头人击飞玩家</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> targetState <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> <span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>            targetState<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>characterStates<span class="token punctuation">,</span>targetState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再添加动画事件就行了</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记18-扩展方法</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B018-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B018-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这一章我们来熟悉一下扩展方法，所谓扩展方法就是在不继承一个类，但是可以额外编写一个类来扩展这个类的功能，比如这一章我们想让我们控制主角在兽人后面时兽人攻击不会造成伤害，这里就要用到<code>transfrom</code>类，但是<code>transfrom</code>里边没有这个方法，我们就要来扩展它</p><h1 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h1><p>要想我们的兽人敌人对身后玩家造成不了伤害，我们就可以来写一个方法，这个方法专门来判断玩家是否在兽人正前方扇形区域，如果在则返回<code>true</code>否则返回<code>false</code>，然后我们可以将这个方法加到计算伤害的<code>Hit()</code>函数里边进行一个判断，玩家在兽人视野范围内就造成伤害，反之不造成</p><p>这个扩展方法我们创建一个新的代码文件</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/1d4a90fb719d4281b68a709f01232cd2.png" alt="1.png" style="zoom:80%;" /><p>打开编写它</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionMethod</span><span class="token punctuation">&#123;</span>    <span class="token comment">//扩展方法类</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">float</span></span> dotThreshold <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment">//视野范围大小</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFacingTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Transform</span> transform <span class="token punctuation">,</span> <span class="token class-name">Transform</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//判断目标是否在视野范围内</span>        <span class="token class-name"><span class="token keyword">var</span></span> vectorToTarget <span class="token operator">=</span> target<span class="token punctuation">.</span>position <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//获得敌人和玩家的相对位置</span>        vectorToTarget<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向量化</span>        <span class="token comment">//Dot:两个矢量的点积。 点积是一个浮点值，等于两个矢量的大小相乘，然后乘以它们之间的角度的余弦。</span>        <span class="token class-name"><span class="token keyword">float</span></span> dot <span class="token operator">=</span> Vector3<span class="token punctuation">.</span><span class="token function">Dot</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>vectorToTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dot <span class="token operator">></span> dotThreshold<span class="token punctuation">;</span><span class="token comment">//如果玩家在敌人夹角120°(cos120 = 0.5)视野范围内则返回true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们使用<code>Vector3.Dot()</code>方法，官方API在<a href="http://docs.unity3d.com/ScriptReference/Vector3.Dot.html">这里</a>，同时也用了<code>transform.forward</code>来表示敌人面对的方向</p><p>同时还要注意到参数有个<code>this</code>，这样可以让方法加入到<code>Transform</code>类里面，变成它的一个方法</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f180df5587214500b2f7e3cb8e63072a.png" alt="2.png" style="zoom:80%;" /><p>最后我们回到<code>Hit()</code>函数中，把判断条件加上就完成了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于在敌人追主角的过程中主角可能会跑开，这时候如果攻击的话目标就丢失了</span>    <span class="token comment">//所以我们在攻击前判断目标是否为空，以防报错</span>    <span class="token comment">//同时还判断了玩家是否在敌人的视野范围内，在的话才造成伤害</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> transform<span class="token punctuation">.</span><span class="token function">IsFacingTarget</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>characterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当我们的玩家走到敌人后边的时候就不会受到伤害</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记17-设置兽人敌人</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B017-%E8%AE%BE%E7%BD%AE%E5%85%BD%E4%BA%BA%E6%95%8C%E4%BA%BA/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B017-%E8%AE%BE%E7%BD%AE%E5%85%BD%E4%BA%BA%E6%95%8C%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p> 在这一章节中我们来设置一下兽人敌人，由于它的<code>Attack02</code>动画包含一个推人的效果，我们可以对它进行单独的测试，而不是继续沿用之前的<code>EnemyController</code>，但是我们可以在它基础上进行添加，所以可以选择继承类方式改写</p><h1 id="继承EnemyController并添加推开人物方法"><a href="#继承EnemyController并添加推开人物方法" class="headerlink" title="继承EnemyController并添加推开人物方法"></a>继承EnemyController并添加推开人物方法</h1><p>因为兽人是用继承的代码，我们要专门创建一个文件夹放特定敌人的<code>EnemyController</code>子类代码</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/2a7f1d824413463f8bbb1701fb464525.png" alt="1.png" style="zoom:80%;" /><p>同时也把这个代码挂载到兽人身上</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Grunt</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnemyController</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Skill（兽人特殊攻击设置）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> kickForce <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">//推开敌人距离</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">kickOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果访问不了attackTarget要返回父类修改为protect属性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vector3</span> direction <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token operator">-</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>            direction<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//量化推开的方向</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">//velocity表示速度，这里给了主角一个反向速度，达到给推开的效果</span>            attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> direction<span class="token operator">*</span>kickForce<span class="token punctuation">;</span>                        attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Dizzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//人物进入眩晕状态</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把动画事件添加上，<code>Attack02</code>用的事件是我们上面写的<code>kickOff()</code></p><p>同时这里有个眩晕状态，我们把眩晕动画如下添加好，同时眩晕动画速度我改为了2，让它播放快一点</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/e375df607aa64f32b0779527e3494c29.png" alt="2.png" style="zoom:80%;" /><h1 id="替换动画并且添加一个动画行为"><a href="#替换动画并且添加一个动画行为" class="headerlink" title="替换动画并且添加一个动画行为"></a>替换动画并且添加一个动画行为</h1><p>我们把史莱姆的动画复制一份给兽人，然后为了保持兽人在推开人物时人物进入眩晕状态并且不能移动，我们还要添加一个动画行为（<code>Behaviour</code>）</p><p>替换动画过程不再描述，但是注意这里<strong>不能</strong>采用动画控制器继承的方式</p><p>这里就说一下动画行为，找到人物的<code>Dizzy</code>动画，点击<code>Add Behaviour</code>，创建一个叫做<code>Stop Agent</code>的行为，实际上就是一个代码文件，创建好后我们把这个代码文件归类放好</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/3b6e539cae684b47ae1971d9d95485de.png" alt="3.png" style="zoom:80%;" /><img src="https://p9-tt.byteimg.com/origin/pgc-image/752bc9fca53d4a6a80c77a7381d9a0f0.png" alt="4.png" style="zoom:80%;" /><p>这个代码文件打开就已经有一些注释在那了，我们可以直接取消我们要用方法的注释，这里用到的就是进入动画、动画播放时以及动画结束时刻的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopAgent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">StateMachineBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// OnStateEnter is called when a transition starts and the state machine starts to evaluate this state</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateEnter</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateUpdate</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateExit is called when a transition ends and the state machine finishes evaluating this state</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStateExit</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animator<span class="token punctuation">,</span> <span class="token class-name">AnimatorStateInfo</span> stateInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> layerIndex<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       animator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OnStateMove is called right after Animator.OnAnimatorMove()</span>    <span class="token comment">//override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//    // Implement code that processes and affects root motion</span>    <span class="token comment">//&#125;</span>    <span class="token comment">// OnStateIK is called right after Animator.OnAnimatorIK()</span>    <span class="token comment">//override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//    // Implement code that sets up animation IK (inverse kinematics)</span>    <span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们可以把行为放进人物的眩晕、受伤等动画，甚至是敌人的攻击动画</p><p>注意的是添加到敌人攻击动画时可能会有一个报错，原因是我们可能把敌人打死了，导致行为无法获得agent，解决办法如下，我们去到<code>EnemyController.cs</code>修改敌人死了之后的状态</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>collider<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防止时候开业再次攻击</span><span class="token comment">//agent.enabled = false;//直接关闭导航组件</span>agent<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//把agent的范围缩小</span><span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁游戏对象，延迟为2秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们原本想关闭agent以达到agent没有体积效果，所以可以把agent.enabled = false;语句改为了直接把agent范围缩小到0，也是同样的效果</p><p>到这我们就初步设置好了兽人了</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记16-制作更多的敌人</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B016-%E5%88%B6%E4%BD%9C%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%8C%E4%BA%BA/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B016-%E5%88%B6%E4%BD%9C%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%95%8C%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p> 这一章我们把我们的敌人数量制作地多一些，更加地去完善游戏</p><h1 id="制作多一个史莱姆"><a href="#制作多一个史莱姆" class="headerlink" title="制作多一个史莱姆"></a>制作多一个史莱姆</h1><p>制作多一个史莱姆很简单，只用对着之前的史莱姆<code>Ctrl + D</code>复制一下就可以</p><p>但是这之中也有存在问题，就是史莱姆会共用一个<code>Character Data</code>，这可以在每次开始游戏时创建一个临时<code>Data</code>给他们来解决</p><p>打开<code>Character States.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">CharacterData_SO</span> characterData<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CharacterData_SO</span> templateData<span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>templateData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//复制一个临时模板Data</span>        characterData <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>templateData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成多一个data</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后史莱姆身上的<code>Data</code>如下设置</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/e780aba5845e41caa4a1b38673b38708.png" alt="2.png" style="zoom:80%;" /><h1 id="放置一个刺刺龟"><a href="#放置一个刺刺龟" class="headerlink" title="放置一个刺刺龟"></a>放置一个刺刺龟</h1><p>我们的史莱姆素材文件夹下有另外一个敌人刺刺龟，我们也可以把它放置上来</p><p>由于它也是依赖<code>EnemyController.cs</code>的，所以我们在之前还要添加一行强制附带组件代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequireComponent</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CharacterStates</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以强制附带<code>CharacterStates</code>代码组件了</p><p>在素材中找到刺刺龟把它放置在地图上</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/c0a6ab51762547b5855e2d4d808bb14c.png" alt="3.png" style="zoom:80%;" /><p>然后为它添加<code>EnemyController.cs</code>，以及设置好基本信息</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/82f0fc3573f7434aa1a235f4fbe931c3.png" alt="4.png" style="zoom:80%;" /><p>还有一个关键的地方在于动画的切换，这里我们可以利用一个技巧，把史莱姆原来的<code>Animations</code>复制一个出来直接覆盖替换动画</p><p>我们在右键创建时选择<code>Animator Override Controller</code>就可以了</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/61c8eb67c769464eb07f58ab37b2c59d.png" alt="5.png" style="zoom:80%;" /><p>然后属性面板中第一个选项就会问我们要依靠哪个<code>Animation</code>为模板，我们选择史莱姆原来的动画</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/60d1f5873d4b440ba04764b3bdfd5cda.png" alt="6.png" style="zoom:80%;" /><p>之后再将它们替换就可以了，别忘了<code>Attack01</code>和<code>Attack02</code>要单独复制出来以及添加帧事件</p><h1 id="兽人和石头人"><a href="#兽人和石头人" class="headerlink" title="兽人和石头人"></a>兽人和石头人</h1><p>还有需要添加的就是兽人和石头人，这里我们暂时添加好素材再把它们移到地图上就好了，之后的事情下一章节再处理</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/712fe6fd05d24f17a782e3bbd8937ab7.png" alt="7.png" style="zoom:80%;" /><img src="https://p5-tt.byteimg.com/origin/pgc-image/c884e6e35d714f3988fb0a5b4109a5cc.png" alt="8.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记15-使用接口实现观察者模式的订阅和广播</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B015-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%B9%BF%E6%92%AD/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B015-%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%B9%BF%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p> 这一章我们使用接口来实现观察者模式的订阅和广播，同时也来实现玩家死了游戏结束之后敌人的获胜动画</p><h1 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h1><p>在<code>Tools</code>文件夹下我们新建一个代码文件<code>IEndGameObserver.cs</code>表示游戏结束之后的接口</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEndGameObserver</span><span class="token punctuation">&#123;</span>    <span class="token comment">//注意接口只写声明不写定义</span>    <span class="token comment">//游戏结束要操作的都在这个接口实现</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来到<code>EnemyController.cs</code>编写一个广播方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span><span class="token punctuation">,</span><span class="token class-name">IEndGameObserver</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获胜动画</span>        <span class="token comment">//停止所有移动</span>        <span class="token comment">//停止Agent</span>        isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        attackTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它要在游戏结束时要有操作的代码也可以像这种方式来继承接口并实现操作</p><h1 id="订阅接口"><a href="#订阅接口" class="headerlink" title="订阅接口"></a>订阅接口</h1><p>因为我们会有很多不同的代码文件都会继承这个接口，怎样来管理订阅也是值得考虑的事情</p><p>打开上一章创建的<code>GameManager.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>GameManager<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CharacterStates</span> playerStates<span class="token punctuation">;</span>    <span class="token comment">//游戏结束时调用的方法的数组</span>    List<span class="token operator">&lt;</span>IEndGameObserver<span class="token operator">></span>endGameObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IEndGameObserver<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RigisterPlayer</span><span class="token punctuation">(</span><span class="token class-name">CharacterStates</span> player<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过外界注册的方式来获得对象的playerStates</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playerStates <span class="token operator">=</span> player<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddObserve</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//加入待操作数组</span>        endGameObservers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>gameObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RemoveObserve</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将特定的观察者在待操作数组中删除</span>        endGameObservers<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>gameObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyObserves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//调用待操作数组中每一个观察者</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">IEndGameObserver</span> gameObserver <span class="token keyword">in</span> endGameObservers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            gameObserver<span class="token punctuation">.</span><span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们是要在主角死了之后开始游戏结束的操作，所以回到<code>PlayerController.cs</code>在判断主角死了之后调用广播</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断死亡</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">NotifyObserves</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们在<code>EnemyController.cs</code>中还要补充一个加入待操作数组方法和移除方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//void OnEnable()&#123;//Unity的一个启动游戏时自动调用的函数</span><span class="token comment">//  GameManager.Instance.AddObserve(this);</span><span class="token comment">// &#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//开始游戏时先检测是否勾选了守卫状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isGuard<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>        <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//FIXME:场景切换做好后修改掉</span>    GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddObserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>GameManager<span class="token punctuation">.</span>IsInitialized<span class="token punctuation">)</span>         <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果GameManager没有给构建的话就直接return</span>        GameManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RemoveObserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>OnEnable()</code>是在游戏开始时早期就调用的，这时候我们这样写会发生报错，我们要等到后面写场景加载时才用这种方法，这里暂时把加入待操作数组代码单独写到<code>Start()</code>里</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/5e902802764e44b099915b6323377dfb.png" alt="1.png" style="zoom:80%;" /><h1 id="配置敌人胜利动画"><a href="#配置敌人胜利动画" class="headerlink" title="配置敌人胜利动画"></a>配置敌人胜利动画</h1><p>我们打开动画管理器，配置敌人在打死主角后的动画</p><p>新建一个<code>Victory Layer</code>（注意权重值为1），以及一个<code>Win</code>布尔值控制动画触发</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/85512e9ac113448c808c81d1b29dc079.png" alt="1.png" style="zoom:80%;" /><p>返回<code>EnemyController.cs</code>代码我们要配置动画变量什么时候触发</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//血量变0则死亡状态为真</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//加了个else是防止死后敌人在胜利动画下一帧又给切换回普通动画</span>        <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastAttackTime<span class="token operator">-=</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span><span class="token comment">//每一帧都减冷却</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获胜动画</span>    <span class="token comment">//停止所有移动</span>    <span class="token comment">//停止Agent</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Win"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    attackTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们发现主角死了之后还是可以控制移动，这里我们在<code>PlyaerController.cs</code>修复一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveToTarget</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果死了就不能移动</span><span class="token function">StopAllCoroutines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止其它移动命令</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//如果死了就不能移动</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token comment">//判断是否暴击</span>charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记14-泛型单例模式</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B014-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B014-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>这一章我们来编写一个泛型单例模式的代码，这是因为我们的项目中会有很多的<code>Manager</code>，如果每个都使用单例模式会更好地去管理和使用</p><p>例如其中控制我们游戏的开始暂停等一般是用<code>Game Manager</code>来命名，我们来创建一个代码文件以及一个空对象使得代码可以依附在它上面</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/d8bf83d3ad554952a66a0b00aafc1b96.png" alt="1.png" style="zoom:80%;" /><p>这个代码我们先放在一边之后再补充，先把泛型单例模式代码写了先</p><h1 id="泛型单例模式"><a href="#泛型单例模式" class="headerlink" title="泛型单例模式"></a>泛型单例模式</h1><p>创建目录文件如下</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/86a804f3de9a4c9b960af8c63dd89626.png" alt="2.png" style="zoom:80%;" /><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Sigltion<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> Instance<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//允许子类对Awake进行重写</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            instance <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//检测单例是否生成</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsInitialized<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//允许子类修改销毁时的操作</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一旦一个A类继承了<code>Sigltion&lt;A&gt;</code>之后，我们就可以在其它类中调用A类的单例，如：<code>A.Instance</code></p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记13-敌人的守卫状态和死亡状态</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B013-%E6%95%8C%E4%BA%BA%E7%9A%84%E5%AE%88%E5%8D%AB%E7%8A%B6%E6%80%81%E5%92%8C%E6%AD%BB%E4%BA%A1%E7%8A%B6%E6%80%81/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B013-%E6%95%8C%E4%BA%BA%E7%9A%84%E5%AE%88%E5%8D%AB%E7%8A%B6%E6%80%81%E5%92%8C%E6%AD%BB%E4%BA%A1%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p> 这一章节我们来制作敌人的守卫状态和死亡状态</p><h1 id="敌人的守卫状态（Guard）"><a href="#敌人的守卫状态（Guard）" class="headerlink" title="敌人的守卫状态（Guard）"></a>敌人的守卫状态（Guard）</h1><p>打开<code>EnemyController.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Quaternion</span> guardRotation<span class="token punctuation">;</span><span class="token comment">//记录敌人最初的旋转角度，用于脱离追击回去守卫点砖头转头</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    guardRotation <span class="token operator">=</span> transform<span class="token punctuation">.</span>rotation<span class="token punctuation">;</span><span class="token comment">//获得最初旋转角度</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>守卫状态            isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//脱离追击状态</span>            <span class="token comment">//如果在追击主角时回到守卫状态，就要跑回守卫点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position <span class="token operator">!=</span> guardPos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//播放走路动画</span>                agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment">//导航回最初守卫点</span>                agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> guardPos<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">SqrMagnitude</span><span class="token punctuation">(</span>guardPos <span class="token operator">-</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">&lt;=</span>agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//SqrMagnitude也是可以用于比较距离的方法，比起Distance稍微快一些</span>                    <span class="token comment">//这里是判断是否到达最初守卫点可以停止范围</span>                    isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token comment">//慢慢转头。第三个参数越接近1转得越快</span>                    transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Lerp</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span>guardRotation<span class="token punctuation">,</span><span class="token number">0.01f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们就写好了守卫状态的代码，其中<code>SqrMagnitude()</code>作用和<code>Distance()</code>一样都是比较两个点的距离，然后我们还加了慢慢转头的效果，否则敌人回到守卫点是不会转头的</p><h1 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h1><p>我们希望当敌人血量为0时播放死亡动画并且尸体消失掉</p><h2 id="设置死亡动画"><a href="#设置死亡动画" class="headerlink" title="设置死亡动画"></a>设置死亡动画</h2><p>打开动画控制器，我们新建一个<code>Death Layer</code>，不要忘了权重设为1</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/32be87ac0205413280a7f42a61d7296e.png" alt="1.png" style="zoom:80%;" /><p>这里有个<code>GetHit</code>是用来做暴击伤害受伤效果的，它有左边的<code>Hit</code>触发，而我们的死亡动画<code>Die</code>连着<code>Any State</code>表示任何状态都能转移过来，由布尔值<code>Death</code>控制</p><p><strong>特别要注意的地方：</strong>关于死亡动画的设置<code>Can Transition To</code>一定不能勾选，不然会发生鬼畜</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/497e554f53c24b17be551acb0694058c.png" alt="2.png" style="zoom:80%;" /><p>接下来主角的动画也是如此设置</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/66e702dd2c644d058b5e628fbcf052c6.png" alt="3.png" style="zoom:80%;" /><h2 id="编写动画状态转移代码"><a href="#编写动画状态转移代码" class="headerlink" title="编写动画状态转移代码"></a>编写动画状态转移代码</h2><p>回到我们的<code>EnemyController.cs</code>中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Collider</span> collider<span class="token punctuation">;</span><span class="token comment">//碰撞体组件</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isDead<span class="token punctuation">;</span><span class="token comment">//死亡状态控制</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    collider <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Collider<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">.</span>currentHealth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        isDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//血量变0则死亡状态为真</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Death"</span><span class="token punctuation">,</span>isDead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否播放死亡动画</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//第一个判断是否为死亡</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isDead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果发现player 切换到CHASE</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">;</span>        <span class="token comment">//Debug.LogFormat("敌人&#123;0&#125;发现了玩家",this.name);//测试代码</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>    collider<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防止时候开业再次攻击</span>    agent<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//直接关闭导航组件</span>    <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁游戏对象，延迟为2秒</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们设置了<code>Death</code>的动画状态，注意开头<code>if(isDead)</code>的下一个是<code>else if</code>，而<code>Hit</code>的状态可以去到<code>CharcterStates.cs</code>中设置</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharcterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharcterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>        defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将来要做的事情</span>    <span class="token comment">//TODO:血量条UI</span>    <span class="token comment">//TODO:打死怪后加经验</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在中间我们打了一行代码，用来获取被打者的Animator并设置动画<code>Hit</code>状态，这样就可以集中管理暴击受伤动画了</p><p>最后对于主角我们也用相同的办法来写这些代码就大功告成了</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记12-实现攻击数值计算</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B012-%E5%AE%9E%E7%8E%B0%E6%94%BB%E5%87%BB%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B012-%E5%AE%9E%E7%8E%B0%E6%94%BB%E5%87%BB%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p> 这一章节中我们来实现攻击伤害的计算，给予人物或敌人真实的攻击伤害</p><h1 id="补充人物攻击动画"><a href="#补充人物攻击动画" class="headerlink" title="补充人物攻击动画"></a>补充人物攻击动画</h1><p>在之前我们要给人物添加一下暴击动画，和上一章节设置敌人动画类似，注意要设置动画切换效果</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/db2c7f3914614d4ea5ec93211e2b47a7.png" alt="1.png" style="zoom:80%;" /><p>打开<code>PlayerController.cs</code>，修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span>          charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//攻击动画和CD都在下面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lastAttactTime<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//CD冷却完成可执行攻击</span>        animator<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Critical"</span><span class="token punctuation">,</span>charcterStates<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加了传递是否暴击</span>        animator<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//普通攻击</span>        lastAttactTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span><span class="token comment">//修改了这里的CD时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们修改了两个地方，一个是增加了暴击判断，另一个是修改了CD时间判断</p><h1 id="增加攻击数值计算"><a href="#增加攻击数值计算" class="headerlink" title="增加攻击数值计算"></a>增加攻击数值计算</h1><p>前面补充完成后，我们就可以正式来写攻击伤害的数值计算了</p><p>打开<code>CharcterStates.cs</code>，我们在最下面加上我们的伤害计算代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>        attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment">//随机暴击率语句</span>        charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//伤害计算区</span><span class="token preprocessor property">#<span class="token directive keyword">region</span> Charcter Combat</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token class-name">CharcterStates</span> attacker<span class="token punctuation">,</span><span class="token class-name">CharcterStates</span> defener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算伤害数值</span>    <span class="token comment">//当前攻击力减去目标的防御力，如果防御力过高就是0伤害</span>    <span class="token class-name"><span class="token keyword">int</span></span> damage <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>defener<span class="token punctuation">.</span>currentDefence<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentHealth <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>currentHealth<span class="token operator">-</span>damage<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//血量也是最小值锁在0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token comment">//判断被打者是否受到暴击并且播放受伤动画</span>            defener<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将来要做的事情</span>    <span class="token comment">//TODO:血量条UI</span>    <span class="token comment">//TODO:打死怪后加经验</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CurrentDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在攻击力范围内取随机数返回一个随机攻击力</span>    <span class="token class-name"><span class="token keyword">float</span></span> coreDamage <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>attackData<span class="token punctuation">.</span>minDamage<span class="token punctuation">,</span>attackData<span class="token punctuation">.</span>maxDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果暴击的话还要计算上暴击率</span>        coreDamage <span class="token operator">*=</span>attackData<span class="token punctuation">.</span>criticalMultiplier<span class="token punctuation">;</span><span class="token comment">//乘等于</span>        Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"暴击了！伤害为（不算目标防御力）：&#123;0&#125;"</span><span class="token punctuation">,</span>coreDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>coreDamage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用伤害计算方法"><a href="#调用伤害计算方法" class="headerlink" title="调用伤害计算方法"></a>调用伤害计算方法</h1><p>伤害计算代码写好后，我们就要去想如何调用它，在哪里调用它了</p><p>参考一些RPG游戏，一般都是当你的武器挥出去后接触到敌人那一瞬间计算伤害，我们也可以按照这样来做</p><h2 id="在人物身上调用"><a href="#在人物身上调用" class="headerlink" title="在人物身上调用"></a>在人物身上调用</h2><p>首先要调出<code>Animation</code>窗口</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/42623310028b4fbcafc6c49ce9fbc6a6.png" alt="2.png" style="zoom:80%;" /><p>然后窗口左上角选择上我们的攻击动画<code>Attack01</code>，我们就可以在攻击动画里面的某个特定帧添加事件了</p><p>我们再次编辑一下<code>PlayerController.cs</code>代码加一个用来调用的方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//Animation Event</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//计算伤害</span>    targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到<code>Animation</code>窗口，将它添加为事件</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/3ebdba5a85864a339407b9a8d21a740f.png" alt="4.png" style="zoom:80%;" /><p><strong>注意：同样的暴击动画也要加上</strong></p><h2 id="在敌人身上调用"><a href="#在敌人身上调用" class="headerlink" title="在敌人身上调用"></a>在敌人身上调用</h2><p>然后在敌人身上我们也要进行同样的操作，打开<code>EnemyController.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//EnemyController.cs</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于在敌人追主角的过程中主角可能会跑开，这时候如果攻击的话目标就丢失了</span>    <span class="token comment">//所以我们在攻击前判断目标是否为空，以防报错</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> targetStates <span class="token operator">=</span> attackTarget<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetStates<span class="token punctuation">.</span><span class="token function">TakeDamage</span><span class="token punctuation">(</span>charcterStates<span class="token punctuation">,</span>targetStates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在为<code>Animation</code>添加动画时我们发现当前史莱姆的动画是<code>只读</code>属性的，对于这种情况我们可以把动画单独复制到其它地方，再将复制出来的动画替换原来的，就可以进行事件添加了</p><p>如图对着动画文件按<code>Ctrl+D</code>可以快速复制</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/3831ed71b8dc46cc8d7ce464438e15b3.png" alt="5.png" style="zoom:80%;" /><p>然后我们将复制出来的动画（这里有两个）分类放好</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/cded851a377744a2a2c53f78e2573698.png" alt="6.png" style="zoom:80%;" /><p>然后进行动画替换</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/99667e3e7b754c4f8b286410045bac15.png" alt="7.png" style="zoom:80%;" /><p>最后再进行动画帧事件添加操作就行了</p><p>到这我们就把伤害计算代码和效果都写出来了，下一章节中我们还会去补充如果敌人或人物血量到0了时候的状态</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记第一期</title>
      <link href="LeetCode/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
      <url>LeetCode/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode刷题笔记第一期"><a href="#LeetCode刷题笔记第一期" class="headerlink" title="LeetCode刷题笔记第一期"></a>LeetCode刷题笔记第一期</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直想在刷题的时候把想要记下的笔记记下来，但是没有找到很好的地方，但是现在有了博客之后就可以写在这的</p><p>写这个刷题笔记一个是想时不时回来巩固一下算法，另一个是想记录下自己的算法能力成长的过程，同时也是想为实习做准备</p><p>写这个笔记是大二暑假时期，之前也有一些算法基础，参加过的算法相关竞赛只有一次蓝桥杯，也希望能够通过刷题和做笔记能够有所长进</p><p>✨注：我写算法的语言主打C++</p><p>那么，就开始吧！</p><hr><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452.用最少数量的箭引爆气球"></a>452.<a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/">用最少数量的箭引爆气球</a></h2><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p><p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>xstart</code>，<code>xend</code>， 且满足  <code>xstart</code> ≤ x ≤ <code>xend</code>，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><p>给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。</p><p>示例：</p><blockquote><p>输入：points = [[10,16],[2,8],[1,6],[7,12]]<br>输出：2<br>解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</p></blockquote><p>这一题拿到题目时看了好几次都看不懂题目，看了一下别人画的图才明白题的意思，和另外题 <code>435. 无重叠区间</code>有点相似</p><p>我们可以在每一次射击箭的时候尽量往用少一点的方向去想，当气球重叠时便一起射，这是局部最优，然后每次局部最优所造成的就是全局最优，射完全部气球所用的弓箭是最少，这便可以用贪心算法来求解</p><p>借用官方解答所给的图来解释</p><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f83bd4a2e87746078b4cac68d1f4d1d5.png"></p><p>当把弓箭挪到右区间最小的时候（如第三个图的蓝色）就可以一箭四雕，因为题目所给的条件<code>xstart</code> ≤ x ≤ <code>xend</code>时气球就会给射爆，这里包含了边界值条件，所以在闭区间位置也满足</p><p>因此我就有了基本思路，先把这些气球排列，然后从第二个气球遍历，每次与前一个气球作比较，如果两个气球区间相交，那就可以略过当前气球进入下一次比较（做个标记，代表可以在这一个弓箭射完），具体如何略过看代码；如果气球不相交了，那就证明要用多一发弓箭了，此时弓箭数要加一，然后继续往下比较</p><p>下面是自己参考别人解答后写出来的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">VecSort</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>size<span class="token punctuation">)</span><span class="token comment">//数组为空</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>points<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>VecSort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按气球起点进行从小到大排序</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//返回结果，不为空至少需要一只箭</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//从前往后遍历气球</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//当前气球与前一个气球不重叠</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//重叠则跳过当前气球</span>                <span class="token comment">//（利用闭区间最右位置可以射到的规则让其长度变短，以达到可跳过的当前气球目的）</span>                points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做出来之后时间复杂度为<em>O(nlogn)<em>因为用了个快排，空间复杂度为</em>O(1)</em></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/3af7d43845b04870bda4754ca1805c0e.jpg" alt="452.jpg" style="zoom:80%;" /><hr><h2 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/">763. 划分字母区间</a></h2><p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p><p>示例：</p><blockquote><p>输入：S = “ababcbacadefegdehijhklij”<br>输出：[9,7,8]<br>解释：<br>划分结果为 “ababcbaca”, “defegde”, “hijhklij”。<br>每个字母最多出现在一个片段中。<br>像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</p></blockquote><p>这种题型第一次见，不怎么会，因为尽可能地要划分多个区域，从而达到某个或多个字母只出现在这片区域中，那么就可以先记录下每个字母最后出现的位置</p><p>然后再次遍历字符串，不断更新标识符<code>end</code>，该标识符指向的是当前遍历过的字母中，最持久的字符最后出现的位置，也相当于是这片区域最后的位置，所以我们只用找出这个标识符最终的位置就能够划分一个区域出来了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> str_size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>str_size<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str_size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>res<span class="token punctuation">;</span>        <span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个字母最后出现的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录分割数据的开头和结尾位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            end <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//贪心策略地方，尽可能找到字母最后出现的位置从而划分区域</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果找到之前遍历过的所有字母的最远边界，说明这个边界就是分割点了</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度<em>O(n)<em>，空间复杂度</em>O(1)</em></p><img src="https://p5-tt.byteimg.com/origin/pgc-image/c6d28e63caa845aba5e8479b6f016d58.jpg" alt="763.jpg" style="zoom:80%;" /><hr><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="88-合并两个有序数组—（简单）"><a href="#88-合并两个有序数组—（简单）" class="headerlink" title="88. 合并两个有序数组—（简单）"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a>—（简单）</h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p><p>示例1：</p><blockquote><p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3<br>输出：[1,2,2,3,5,6]</p></blockquote><p>示例2：</p><blockquote><p>输入：nums1 = [1], m = 1, nums2 = [], n = 0<br>输出：[1]</p></blockquote><p>这道题是多指针中的一种题型，但是它需要的是逆向指针，知道原理后比较简单</p><p>因为这两个数组已经排好序，我们可以把两个指针分别放在两个数组的末尾，即 nums1 的m - 1 位和 nums2 的 n - 1 位每次将较大的那个数字复制到 nums1 的后边，然后向前移动一位。因为我们也要定位 nums1 的末尾，所以我们还需要第三个指针，以便复制。<br>在以下的代码里，我们直接利用 m 和 n 当作两个数组的指针，再额外创立一个 pos 指针，起始位置为 m + n - 1。每次向前移动 m 或 n 的时候，也要向前移动 pos。这里需要注意，如果 nums1的数字已经复制完，不要忘记把 nums2 的数字继续复制；如果 nums2 的数字已经复制完，剩余nums1 的数字不需要改变，因为它们已经被排好序。  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>size2<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">//需要三个指针，分别是m-1,n-1和m+n-1，前两个可以用m n 代替</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums1<span class="token punctuation">[</span>pos<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">?</span>nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">:</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums1<span class="token punctuation">[</span>pos<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度<em>O(m+n)<em>，因为指针最多遍历m+n个数，空间复杂度</em>O(1)</em></p><hr><h2 id="142-环形链表-II—（中等）"><a href="#142-环形链表-II—（中等）" class="headerlink" title="142. 环形链表 II—（中等）"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a>—（中等）</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><p><em>进阶：</em></p><p><em>你是否可以使用 O(1) 空间解决此题？</em></p><blockquote><p>示例：</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/aeba8d5b296441c6a8d25a7bc3e7eb31.png" alt="1" style="zoom:80%;" /><p>输入：head = [3,2,0,-4], pos = 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p>本题第一次做稍微有难度，涉及到一些数学知识</p><p>所使用的是快慢指针，两个指针都是从头结点开始，快指针每次走两格，慢指针每次走一格，如果他们可以相遇，就代表链表是有环的，因为快指针每次走的比慢指针多<code>1</code>格，只要是有环路肯定能相遇</p><p>其次，在第一次相遇后，我们将快指针重置为头结点位置，之后快慢指针<code>同时走</code>，每次都是走<code>1</code>步，直到两指针再一次相遇就是我们要找的环入口了，具体是为什么呢？我们看下面的图</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/c1f26d9f0524448ebd0245449d12eb45.png" alt="code" style="zoom:80%;" /><p>我们设<code>x</code>是头结点到环形入口节点的节点数，<code>y</code>是从入口节点到两个指针第一次相遇的节点的节点数，当第一次两指针在同一个节点相遇时，慢指针走了<code>x+y</code>，快指针走了<code>x+y+n(z+y)</code>其中<code>n(z+y)</code>是在环内多走了<code>n</code>圈</p><p>又因为快指针走的节点数是慢指针的两倍则有方程：<code>2(x+y)=x+y+n(z+y)</code>，化简的出<code>x=n(y+z)-y</code>，从n(y+z)提出一个y+z得出公式：<code>x=(n-1)(y+z)+z</code>，这个时候我们假设<code>n=1</code>，即快指针只用在环内多走一圈就，就可以得出<code>x=z</code></p><p>这样就得出了最终的结论：当两个指针在第一次相遇后，此时相遇节点到环形入口节点长度<code>等于</code>头结点到环形入口长度，那么问题就很容易了，我们随便将一个指针<code>重置</code>回头结点，再让两个指针同时出发，并且每一步只走<code>一格</code>长度，当再次相遇时，位置就是环形入口节点了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">||</span>head<span class="token operator">-></span>next<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//快指针</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//慢指针</span>        <span class="token comment">//第一次相遇，判断是否有环路</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fast<span class="token operator">||</span><span class="token operator">!</span>fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            fast<span class="token operator">=</span>fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow<span class="token operator">=</span>slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重置快指针</span>        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//第二次相遇则是入口</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为：<em>O(n)<em>，空间复杂度为</em>O(1)</em></p><hr><h2 id="76-最小覆盖子串—（困难）"><a href="#76-最小覆盖子串—（困难）" class="headerlink" title="76. 最小覆盖子串—（困难）"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. 最小覆盖子串</a>—（困难）</h2><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p><p>注意：</p><p>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p><p>示例 1：</p><blockquote><p>输入：s = “ADOBECODEBANC”, t = “ABC”<br>输出：”BANC”</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “a”, t = “a”<br>输出：”a”</p></blockquote><p>示例 3:</p><blockquote><p>输入: s = “a”, t = “aa”<br>输出: “”<br>解释: t 中两个字符 ‘a’ 均应包含在 s 的子串中，<br>因此没有符合条件的子字符串，返回空字符串。</p></blockquote><p>这个题目中要注意的是字符串t是可以包含<em>重复</em>字母的</p><p>所运用的是滑动窗口，由于之前没有做过滑动窗口的题，所以先看了解释才开始做的，更多细节在<a href="https://leetcode-cn.com/problems/minimum-window-substring/solution/zui-xiao-fu-gai-zi-chuan-by-leetcode-solution/">官方解析</a>和视频，滑动窗口图示如下：</p><img src="https://cube-resources.lenovo.com.cn/cube/86cf648e03a1a5daceab2cfbdb802819.gif" alt="滑动窗口" style="zoom:80%;" /><p>首先是运用两个数组，一个是记录滑动窗口中遍历到的t字符串含有的字母个数，而另一个则是记录t字符串每个字母的个数。然后还有个比较重要的就是<code>distance</code>，这个变量是用来记录当前滑动窗口区域中拥有对照字符串t中所需要的字符个数</p><p>整个滑动窗口流程大致是：</p><p>当右指针前进时遍历到一个所需字符则<code>distance+1</code>，直到<code>distance == t.size()</code>时停止前进，<strong>注意当一个字符出现超过所需数但是distance还没达标时，distance不增加</strong>，如下面代码中的<code>winFre[s[right]]&gt;=tFre[s[right]]</code>时distance不会再继续加1。</p><p>之后轮到左指针前进，它会跳过一些多余的字符以尽可能地缩小区域，它也要剔除重复的字符数，当<code>winFre[s[right]]&gt;tFre[s[right]]</code>时distance不会相减，因此<code>distance</code>的作用可以看做是两边字母的边界值。在左指针遇到不能再继续前进时会比较当前最小的覆盖子串区间是否要更新，最后下一次循环中又要恢复为右区间前进，直到右区间到达t字符串的长度才会退出循环。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">minWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sLen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tLen <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sLen<span class="token operator">&lt;</span>tLen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//特殊情况</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//左指针</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//右指针</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">winFre</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录滑动窗口中所包含对照字符串每个字母的个数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">tFre</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录对照字符串中所含有的每个字母的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">:</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//遍历对照字符串t</span>            tFre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录返回字符串的开始下标位置</span>        <span class="token keyword">int</span> minLen <span class="token operator">=</span> sLen<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//记录当前遍历得到的最小覆盖子串长度</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录滑动窗口中所包含的字母个数和对照字符串所需要的字母个数差距（相同时不加）</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>sLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环结束条件是右指针到达最后一个字符</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//首先是右指针往右走，遇到不是所需要找的字符跳过</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                distance<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//滑动窗口遇到不够字母总数时distance加一</span>            winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>distance <span class="token operator">==</span> tLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//滑动窗口左指针前进</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> tFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    distance<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//遇到刚好满足字符数条件时减去distance，以使恢复下一次循环是右指针前进</span>                <span class="token keyword">int</span> tempWinLen <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span><span class="token comment">//当前滑动窗口的字符长度</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>minLen<span class="token operator">></span>tempWinLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//如果当前记录在内的最小区间没有新的小则替换它</span>                    minLen <span class="token operator">=</span> tempWinLen<span class="token punctuation">;</span>                    begin <span class="token operator">=</span> left<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                                winFre<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//cout&lt;&lt;begin&lt;&lt;" "&lt;&lt;minLen;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minLen <span class="token operator">==</span> sLen <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>minLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(n)，空间复杂度O(k)，k为两个传进来的字符串长度之和</p><hr><h2 id="524-通过删除字母匹配到字典里最长单词—（中等）"><a href="#524-通过删除字母匹配到字典里最长单词—（中等）" class="headerlink" title="524. 通过删除字母匹配到字典里最长单词—（中等）"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/">524. 通过删除字母匹配到字典里最长单词</a>—（中等）</h2><p>给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。</p><p>如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。</p><p>示例 1：</p><blockquote><p>输入：s = “abpcplea”, dictionary = [“ale”,”apple”,”monkey”,”plea”]<br>输出：”apple”</p></blockquote><p>示例 2：</p><blockquote><p>输入：s = “abpcplea”, dictionary = [“a”,”b”,”c”]<br>输出：”a”</p></blockquote><p>注意这里的<code>字典序</code>概念：基于字母顺<em>序</em>排列的单词按字母顺<em>序</em>排列的方法，例：abc &lt; bbc，可以用C++中<code>string</code>类自带的成员函数（非static）<code>a.compare(string&amp; b)</code>来比较</p><p>这道题刚开始想就是普通地把字典中的字符串每个遍历，并作比较是否为s字符串的子串，比较之后再比较字典序。以为这个方法效率不行，想不到官方解答给出最有效率的就是这个了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">findLongestWord</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sLen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dSize <span class="token operator">=</span> dictionary<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string maxStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//记录最后要返回的长度最长且字典序最小的字符串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str <span class="token operator">:</span> dictionary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsSubStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>maxStr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    maxStr <span class="token operator">=</span> str<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">IsSubStr</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//检测b是不是a的子串</span>        <span class="token keyword">int</span> subSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bLen <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> b<span class="token punctuation">[</span>subSize<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">++</span>subSize<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>subSize <span class="token operator">==</span> bLen<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为<em>O(n·x)<em>其中n是字典数组长度，x是数组中字符串平均长度，</em>O(x)</em></p><hr><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="154-寻找旋转排序数组中的最小值-II—（困难）"><a href="#154-寻找旋转排序数组中的最小值-II—（困难）" class="headerlink" title="154. 寻找旋转排序数组中的最小值 II—（困难）"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找旋转排序数组中的最小值 II</a>—（困难）</h2><p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：<br>若旋转 4 次，则可以得到 [4,5,6,7,0,1,4]<br>若旋转 7 次，则可以得到 [0,1,4,4,5,6,7]<br>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p>给你一个可能存在 重复 元素值的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [1,3,5]<br>输出：1</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [2,2,2,0,1]<br>输出：0</p></blockquote><p>这道题感觉LeetCode难度分的挺迷的，说是困难其实也没什么难度，也是使用<code>left,mid,right</code>三个指针，只要只要考虑几点就行了</p><p>这里有三种情况，分别是：</p><p>1、<code>nums[mid]</code>小于<code>nums[right]</code>，证明我们要找的最小值在前半段或者是<code>nums[mid]</code>本身，因此我们把<code>right = mid</code></p><p>2、<code>nums[mid]</code>大于<code>nums[right]</code>，证明最小值通过数组旋转给调到有半段去了，而且此时的<code>nums[mid]</code>肯定不是我们要找的数，所以我们将<code>left = mid + 1</code></p><p>3、排除上面两种情况之后，就要考虑数组中有重复的数字，而且可能就是当前指针指着的，我们只需要将右指针往前走就行了<code>--right</code>，至于为什么不是左指针往后走，是因为：</p><ul><li>此操作不会使数组越界：因为迭代条件保证了 right &gt; left &gt;= 0；</li><li>此操作不会使最小值丢失：假设<code>nums[right]</code>是最小值，有两种情况：</li><li>1）若 <code>nums[right]</code> 是唯一最小值：那就不可能满足判断条件 <code>nums[mid] == nums[right]</code>，因为 <code>mid &lt; right</code>（left != right  且 mid = (left + right) / 2 向下取整）；</li><li>2）若 nums[right] 不是唯一最小值，由于<code> mid &lt; right</code> 而 <code>nums[mid] == nums[right]</code>，即还有最小值存在于 <code>[left, right - 1]</code>区间，因此不会丢失最小值。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token punctuation">:</span>    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> right <span class="token operator">=</span> nLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//前半部分是增序序列</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//后半部分为降序序列</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度 O(logN)，最坏情况也只到 O(N)，比如给定的数组每个数字都是一样的 {1,1,1,1,1}</p><hr><h2 id="540-有序数组中的单一元素—（中等）"><a href="#540-有序数组中的单一元素—（中等）" class="headerlink" title="540. 有序数组中的单一元素—（中等）"></a><a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/">540. 有序数组中的单一元素</a>—（中等）</h2><p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p><p>示例 1:</p><blockquote><p>输入: nums = [1,1,2,3,3,4,4,8,8]<br>输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums =  [3,3,7,7,10,11,11]<br>输出: 10</p></blockquote><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><p>这道题可以观察题意发现，在出现独立数之前，数组的下标都是有规律的，偶数（包含0）对应一对重复数的第一个，奇数对应第二个。一旦独立数出现之后，情况就反过来了</p><p>总体上看的话，整个数组肯定是奇数个的，因为其余重复数是偶数个再加上一个独立数就是奇数个</p><p>因此可以看下面的例子，当我们把一个数组的中中间的一对元素移除之后，剩下左边的数组全是重复的元素，个数为偶数；而右边含有一个独立数元素，个数为奇数。</p><p><img src="https://i.loli.net/2021/07/31/njUaBzt62Sv5OIf.png" alt="1.png"></p><p>此时我们就可以通过判断左右子数组含有元素的个数是奇还是偶来进行下一步往哪边判断</p><p>下面有几种情况我们可以来分析一下，假设左指针是<code>lo</code>，右指针是<code>hi</code></p><p>情况1：</p><p>中间元素的同一元素在右边，且被 mid 分成两半的数组为偶数。</p><p>我们将右子数组的第一个元素移除后，则右子数组元素个数变成奇数，我们应将 <code>lo</code> 设置为 <code>mid + 2</code></p><p><img src="https://i.loli.net/2021/07/31/bnv7lY6X3uTIWw9.png" alt="2.jpg"></p><p>情况2：</p><p>中间元素的同一元素在右边，且被 <code>mid</code> 分成两半的数组为奇数。</p><p>我们将右子数组的第一个元素移除后，则右子数组的元素个数变为偶数，我们应将 <code>hi</code> 设置为 <code>mid - 1</code></p><p><img src="https://i.loli.net/2021/07/31/mfnQIPMUGhT5sED.png" alt="3.png"></p><p>例子 3：中间元素的同一元素在左边，且被 mid 分成两半的数组为偶数。</p><p>我们将左子数组的最后一个元素移除后，则左子数组的元素个数变为奇数，我们应将 hi 设置为 mid - 2。</p><p><img src="https://i.loli.net/2021/07/31/25rqAzunOkFvGPU.png" alt="4.png"></p><p>例子 4：中间元素的同一元素在左边，且被 mid 分成两半的数组为奇数。</p><p>我们将左子数组的最后一个元素移除后，则左子数组的元素个数变为偶数，我们应将 lo 设置为 mid + 1。</p><p><img src="https://i.loli.net/2021/07/31/xSkLFir6aE1oIPc.png" alt="5.png"></p><p>还有最后一种情况，就是刚好我们的中间指针指向的数和前面后面的数都不相等，就代表这个数就是我们要找的独立数了，这个时候就可以直接return</p><p>明白原理之后就可以写代码了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//O(log n)时间复杂度方法</span>        <span class="token keyword">int</span> nLen <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nLen <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//只有一个数直接返回</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//中间指针的数与前一个数相等</span>                mid<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//中间指针后退以便计算左边子数组的个数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//左边是偶数的话唯一数在右边</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token comment">//否则唯一数在左边</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//中间指针和后面一个数相等的话</span>                mid<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//中间指针前进一格，以便计算右边子数组的个数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> mid<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//中间数与前后的数都不相等，代表我们找到了要的那个数</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法时间复杂度为O(log n)，空间复杂度为O(1)</p><p>在此题目的官方题解中还有第三种解法，<a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/solution/you-xu-shu-zu-zhong-de-dan-yi-yuan-su-by-leetcode/"><strong>方法三：仅对偶数索引进行二分搜索</strong></a>，这个解法时间复杂度为O(n/2) = O(n)，比起上面的算法更优雅一些，可以去看一下</p><hr><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序要懂得常用的那几个排序，同时还要求可以默写出来，此后会有专门的文章来记录各种常用的排序算法的代码，这里暂时跳过，直接看一个基于快速排序的<strong>快速选择算法</strong>题目</p><h2 id="215-数组中的第K个最大元素—（中等）"><a href="#215-数组中的第K个最大元素—（中等）" class="headerlink" title="215. 数组中的第K个最大元素—（中等）"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a>—（中等）</h2><p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p>示例 1:</p><blockquote><p>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5</p></blockquote><p>示例 2:</p><blockquote><p>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4<br>输出: 4</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p>遇到这种寻找数组中第x个最大（小）元素的题目，我们都可以用快速选择的方法来解决</p><p>因为我们只用找某个第x个最大（小）的数，因此并不用对整个数组排序，从而把快速排序的O(n*log n)的平均时间复杂度降到O(n)，但是要注意的是最差情况下还是可能O(n^2)</p><p>快速排序是一种分治算法，而快速选择也类似，假设这里有一个数组<strong>a[l…r]<strong>，我们要找到数组</strong>第k大</strong>的数，快速选择可以分为以下步骤：</p><ul><li><strong>分解</strong>：将数组分为a[l…q-1]，a[q]，a[q+1…r]，其中左半边的子数组a[l…q-1]每一个元素都小于等于a[q]，而对于右半边的子数组，a[q]都会小于等于右半边子数组的每一个元素</li><li><strong>解决</strong>：不像快速排序，我们不用把左右两边子数组进行排序，只用处理好a[q]两边子数组满足<code>分解</code>步骤的要求就行了。因为当分解好后，a[q]在数组中的位置就是我们快排后最终它所在的位置，当分解到a[q]的下标q正好是我们要找的下标时就直接return a[q]</li></ul><p>时间复杂度：</p><p>我们知道快速排序的性能和「划分」出的子数组的长度密切相关。直观地理解如果每次规模为 n 的问题我们都划分成 1和 n - 1，每次递归的时候又向 n - 1 的集合中递归，这种情况是最坏的，时间代价是 O(n ^ 2)<br> )。我们可以引入随机化来加速这个过程，它的时间代价的期望是 O(n)，证明过程可以参考「《算法导论》9.2：期望为线性的选择算法」。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">QuickSelect</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//nums[l]是哨兵数</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">></span>i<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>left<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>j<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> traget <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">;</span><span class="token comment">//目标</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">QuickSelect</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span>traget<span class="token punctuation">)</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> traget<span class="token punctuation">)</span><span class="token comment">//目标在右边子数组</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token comment">//目标在左边子数组</span>                r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>搜索一般分为<strong>深度优先搜索（DFS）</strong>和<strong>广度优先搜索（BFS）</strong>，它们被广泛运用在图和树等结构中</p><p><strong>深度优先搜索（depth-first seach， DFS）</strong>：在搜索到一个新的节点时，立即对该新节点进行遍<br>历；因此遍历需要用<strong>先入后出的栈</strong>来实现，也可以通过与栈等价的<strong>递归</strong>来实现。对于树结构而言，<br>由于总是对新节点调用遍历，因此看起来是向着“深”的方向前进。  </p><p><strong>深度优先搜索</strong>也可以用来<strong>检测环路</strong>：记录每个遍历过的节点的父节点，若一个节点被再次遍<br>历且父节点不同，则说明有环。我们也可以用之后会讲到的拓扑排序判断是否有环路，若最后存<br>在入度不为零的点，则说明有环。<br>有时我们可能会需要对已经搜索过的节点进行标记，以防止在遍历时重复搜索某个节点，这<br>种做法叫做<strong>状态记录</strong>或<strong>记忆化（memoization）</strong>。  </p><p><strong>广度优先搜索（breadth-first search， BFS）</strong>：不同与深度优先搜索，它是一层层进行遍历的，因<br>此需要用<strong>先入先出的队列</strong>而非先入后出的栈进行遍历。由于是按层次进行遍历，广度优先搜索时<br>按照“广”的方向进行遍历的，也常常用来处理最短路径等问题。  </p><p>这里要注意，深度优先搜索和广度优先搜索都可以处理<strong>可达性</strong>问题，即从一个节点开始是否<br>能达到另一个节点。因为深度优先搜索可以利用递归快速实现，很多人会习惯使用深度优先搜索<br>刷此类题目。实际软件工程中，很少见到递归的写法，因为一方面难以理解，另一方面可能<br>产生栈溢出的情况；而用栈实现的深度优先搜索和用队列实现的广度优先搜索在写法上并没有太<br>大差异，因此使用哪一种搜索方式需要根据实际的功能需求来判断。  </p><h2 id="934-最短的桥—（中等）"><a href="#934-最短的桥—（中等）" class="headerlink" title="934. 最短的桥—（中等）"></a><a href="https://leetcode-cn.com/problems/shortest-bridge/">934. 最短的桥</a>—（中等）</h2><p>在给定的二维二进制数组 A 中，存在两座岛。（岛是由四面相连的 1 形成的一个最大组。）</p><p>现在，我们可以将 <code>0</code> 变为 <code>1</code>，以使两座岛连接起来，变成一座岛。</p><p>返回必须翻转的 <code>0</code> 的最小数目。（可以保证答案至少是 <code>1 </code>）</p><p>示例 1：</p><blockquote><p>输入：A = [[0,1],[1,0]]<br>输出：1</p></blockquote><p>示例 2：</p><blockquote><p>输入：A = [[0,1,0],[0,0,0],[0,0,1]]<br>输出：2</p></blockquote><p>示例 3：</p><blockquote><p>输入：A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]<br>输出：1</p></blockquote><p>示例4：</p><blockquote><p>输入：<br>[[1,1,1,1,1],<br>[1,0,0,0,1],<br>[1,0,1,0,1],<br>[1,0,0,0,1],<br>[1,1,1,1,1]]<br>输出：1  </p></blockquote><p><strong>提示：</strong></p><ul><li><code>2 &lt;= A.length == A[0].length &lt;= 100</code></li><li><code>A[i][j] == 0</code> 或 <code>A[i][j] == 1</code></li></ul><p>岛屿问题一般都是与dfs有关系，大多都是套模板</p><p>这里有题目得知一共有两个岛屿，其余的都是水，这里用示例4来说</p><p>刚开始两座岛屿是隔开的，因此我们可以先遍历其中一个岛屿，并把整个岛屿遍历完，同时边遍历边把这个岛的<code>1</code>改成<code>2</code>作为标记</p><p>当把这个岛全部遍历完时，此时地图上有三个部分，分别是：岛屿1、岛屿2和水</p><p>紧接着再选择一个岛屿（这里假设选择岛屿1），使用广度搜索层层遍历，当第一次遇到岛屿2时走过的层数就是最短桥</p><p>代码有点多，大致分为四个步骤</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> direction<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方向数组</span>    <span class="token keyword">int</span> <span class="token function">shortestBridge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//步骤1：遍历一个岛，把1改成2作为标记</span>        <span class="token comment">//dfs</span>        <span class="token keyword">int</span> findFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//记录是否找到岛屿了</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//第一层</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//第二层</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//找到了岛屿</span>                    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//步骤2：深度搜索同时把当前整个大陆涂上2</span>                    findFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//找到岛屿，标记以便退出循环，因为找到一块其它相连的都会在dfs中涂上2</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//找到后就退出了</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>findFlag<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 此时，连通块已涂色，分为三块，0是水，1和2代表两个连通块（岛1和岛2）</span>        <span class="token comment">//步骤3：再选择一个岛屿（这里选择岛屿1），为广度搜索队列做准备而入列</span>        <span class="token keyword">int</span> step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录层数，最终返回的答案</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> qMap<span class="token punctuation">;</span><span class="token comment">//选择pair是为了存储坐标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//把岛屿1的点坐标全部入列</span>                    qMap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//步骤4：广度搜索队列中的岛屿，层层推进向外扩张</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qMap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//队列不为空就在循环内</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> qMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前层要遍历的次数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> cur <span class="token operator">=</span> qMap<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x<span class="token operator">=</span>cur<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token keyword">int</span> y<span class="token operator">=</span>cur<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                qMap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//向四周扩散</span>                    <span class="token keyword">int</span> x_next<span class="token operator">=</span>x<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> y_next<span class="token operator">=</span>y<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>x_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x_next<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//找到岛屿2，可以返回了</span>                            <span class="token keyword">return</span> step<span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//遍历的还是当前岛屿的版块，继续搜索</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            <span class="token comment">//遍历的是海洋</span>                            qMap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x_next<span class="token punctuation">,</span>y_next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队列</span>                            map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//涂色，防止遍历重复</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            step<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//遍历一层结束，答案加一</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度搜索，将整块大陆的1改成2</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> map<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//往四个方向扩张</span>            <span class="token keyword">int</span> x_next<span class="token operator">=</span>x<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y_next<span class="token operator">=</span>y<span class="token operator">+</span>direction<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x_next<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>y_next<span class="token operator">&lt;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//限制条件，所寻找的下一个点没有越界，同时下一个点也是属于陆地</span>                map<span class="token punctuation">[</span>x_next<span class="token punctuation">]</span><span class="token punctuation">[</span>y_next<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//涂色</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>x_next<span class="token punctuation">,</span>y_next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜索</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(MN)，其中 M 和 N 分别是数组行数和列数</p><p>空间复杂度：O(MN)</p><hr><h2 id="126-单词接龙-II-—（困难）"><a href="#126-单词接龙-II-—（困难）" class="headerlink" title="126. 单词接龙 II  —（困难）"></a><a href="https://leetcode-cn.com/problems/word-ladder-ii/">126. 单词接龙 II</a>  —（困难）</h2><p>按字典 wordList 完成从单词 beginWord 到单词 endWord 转化，一个表示此过程的 转换序列 是形式上像 beginWord -&gt; s1 -&gt; s2 -&gt; … -&gt; sk 这样的单词序列，并满足：</p><ul><li>每对相邻的单词之间仅有单个字母不同。</li><li>转换过程中的每个单词 si（1 &lt;= i &lt;= k）必须是字典 wordList 中的单词。注意，beginWord 不必是字典 wordList 中的单词。</li><li>sk == endWord</li></ul><p>给你两个单词 beginWord 和 endWord ，以及一个字典 wordList 。请你找出并返回所有从 beginWord 到 endWord 的 最短转换序列 ，如果不存在这样的转换序列，返回一个空列表。每个序列都应该以单词列表 [beginWord, s1, s2, …, sk] 的形式返回</p><p>示例 1：</p><blockquote><p>输入：beginWord = “hit”, endWord = “cog”, wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]<br>输出：[[“hit”,”hot”,”dot”,”dog”,”cog”],[“hit”,”hot”,”lot”,”log”,”cog”]]<br>解释：存在 2 种最短的转换序列：<br>“hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”<br>“hit” -&gt; “hot” -&gt; “lot” -&gt; “log” -&gt; “cog”</p></blockquote><p>示例 2：</p><blockquote><p>输入：beginWord = “hit”, endWord = “cog”, wordList = [“hot”,”dot”,”dog”,”lot”,”log”]<br>输出：[]<br>解释：endWord “cog” 不在字典 wordList 中，所以不存在符合要求的转换序列。</p></blockquote><p><strong>提示：</strong></p><ul><li>1 &lt;= beginWord.length &lt;= 7</li><li>endWord.length == beginWord.length</li><li>1 &lt;= wordList.length &lt;= 5000</li><li>wordList[i].length == beginWord.length</li><li>beginWord、endWord 和 wordList[i] 由小写英文字母组成</li><li>beginWord != endWord</li><li>wordList 中的所有单词 <strong>互不相同</strong></li></ul><p>题目第一眼看上去很复杂，需要多读几遍，注意到示例1中假设有多条最短的转换序列，这些序列都要返回，这个点不能忘记。其次是<code>beginWord</code>可以不在字典内，但是<code>endWord</code>一定要在里边，如果不在的话就要返回空数组</p><p>这道题我们把字典里的每个单词看成不同的节点，借用LeetCode官方解答的图就是下面这样</p><p><img src="https://i.loli.net/2021/08/02/JtMma8hzRXOT4uS.png"></p><p>然后从开始的单词循序渐进到最后一个单词的过程如下</p><p><img src="F:\编程\LeetCode刷题笔记\图片\第一期\深度搜索\126\126_fig2.png" alt="126_fig2"></p><p>明白这个之后，我们就要思考怎么遍历它们</p><p>我们可以把起始字符串、终止字符串、以及单词表里所有的字符串想象成节点。若两个字符<br>串只有一个字符不同，那么它们相连。因为题目需要输出修改次数最少的所有修改方式，因此我<br>们可以使用广度优先搜索，求得起始节点到终止节点的最短距离</p><p>为什么不用DFS的原因是DFS需要剪枝，处理起来比较麻烦</p><p>一般的BFS模板套路如下</p><blockquote><p>定义 层节点 容器<br>根节点 压入容器内<br>while (容器非空) {<br>    获取容器内节点的个数（即当前处理层节点个数）<br>    for (当前层节点个数) {<br>        从容器中获取一个节点<br>        按业务逻辑处理单个节点<br>        获取当前节点的 子节点 压入容器内<br>    }<br>}</p></blockquote><p>这题同样是可以套用这个模版来解决，需要修改的点：</p><ul><li>需要改一下 单个节点 的 数据结构</li><li>处理单个节点的业务逻辑（回溯做业务，HashMap辅助业务逻辑）</li></ul><p>单个节点的结构使用 <code>vector&lt;string&gt;</code> 类型，也就是自上而下单次 转换序 的累加值。</p><pre><code>      hit         \         hit,hot      /          \  hit,hot,dot    hit,hot,lot  /                 \hit,hot,dot,dog     hit,hot,lot,log   /                      \hit,hot,dot,dog,cog       hit,hot,lot,log,cog</code></pre><p>而节点内的最后一个 string 元素决定了 下层（也就是树型结构的子节点）节点，也就是 wordList 内的值。<br>在获取到下层节点时，是需要把从 wordList 里面找到的元素给删除，避免 重复转换 进入死循环。</p><p>我们也可以双向来搜索，即从起始节点和终止节点分别进行广度优先搜索，每次只延展当前层节点数最少<br>的那一端，这样我们可以减少搜索的总结点数。举例来说，假设最短距离为 4，如果我们只从一<br>端搜索 4 层，总遍历节点数最多是 1 + 2 + 4 + 8 + 16 = 31；而如果我们从两端各搜索两层，总遍<br>历节点数最多只有 2 × (1 + 2 + 4) = 14。  </p><p><strong>双向遍历理解起来比较难，不强求一下子就能明白，可以先理解好单向遍历，到时候回来再看看双向的可能就明白了</strong></p><p>这里先放单向遍历的代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">findLadders</span><span class="token punctuation">(</span>string beginWord<span class="token punctuation">,</span> string endWord<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将字典的每个单词录入哈希表中，方便后面查找</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>wordList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>wordList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span><span class="token comment">//待返回答案</span>        deque<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> worker<span class="token punctuation">;</span><span class="token comment">//层节点容器，记录每一层中得到的转换序列</span>        worker<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>beginWord<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由第一个字符串开始出发，将他作为根节点</span>        <span class="token comment">//bfs</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>worker<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//记录这一层已经转化的点，在这一轮结束时在字典中删除，防止下次再访问</span>            unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> worker<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//层遍历，</span>                <span class="token comment">//（这里换成int i = 0; i &lt; worker.size(); ++i会超时）</span>                <span class="token comment">//获取节点容器的第一个节点，并pop掉</span>                vector<span class="token operator">&lt;</span>string<span class="token operator">></span> sub <span class="token operator">=</span> worker<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//取得这一行转换序列的最后一个字符串，因为它决定下一个要寻找的元素</span>                string tail <span class="token operator">=</span> sub<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tail<span class="token operator">==</span>endWord<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果取得的是想要的字符串</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//?</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>tail<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//回溯试探，改变不同字符来获取下一个要走的点</span>                    <span class="token keyword">char</span> temp <span class="token operator">=</span> tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//保存原来的字符以便恢复</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">;</span><span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span>temp<span class="token punctuation">)</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>search<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            <span class="token comment">//试探字典中是否包含当前临时字符串</span>                            <span class="token comment">//如果包含的话</span>                            visited<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将该字符串记录为已转化的点</span>                                                        <span class="token comment">//记录当前层</span>                            sub<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>                            worker<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向容器保存好子节点</span>                            sub<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯恢复</span>                        <span class="token punctuation">&#125;</span>                                            <span class="token punctuation">&#125;</span>                    tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token comment">//把字符串恢复好，以备下一个字符的试探</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment">//当res的数目大于0就证明找到了所有路径了</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> str<span class="token operator">:</span>visited<span class="token punctuation">)</span>                search<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除字典中已经用过的单词，防止下次循环继续赋值</span>        <span class="token punctuation">&#125;</span><span class="token comment">//end while</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//默认情况返回空</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(n)，n 为 wordList 的个数；忽略 string 的复制带来时间，和 26 个字母遍历的系数。</p><p><strong>双向遍历解法这里待补充，只放个代码先，具体讲解可以去看<a href="https://leetcode-cn.com/problems/word-ladder-ii/solution/2chong-jie-fa-jian-ji-dai-ma-qing-xi-jie-3sjt/">这个题解</a></strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">findLadders</span><span class="token punctuation">(</span>string beginWord<span class="token punctuation">,</span> string endWord<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//首先需要使用集合保存wordList，因为需要判断某单词是否在单词表中(count方法)</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> result<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> words<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span> str <span class="token operator">:</span> wordList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            words<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断结束单词是否在单词列表中，如果不在，则直接返回空表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>words<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>endWord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建两个集合，实现双向查找</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> q1<span class="token punctuation">&#123;</span>beginWord<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> q2<span class="token punctuation">&#123;</span>endWord<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        words<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span><span class="token punctuation">;</span>        words<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>endWord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建map集合保存每个单词中一个字母发生变化并且存在于单词表中的单词列表</span>        <span class="token comment">//此map用于广度遍历</span>        unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> next<span class="token punctuation">;</span>        <span class="token comment">//双集合寻找，标志具体是哪个集合寻找</span>        <span class="token keyword">bool</span> reversed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> find <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//next数据的搜寻</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//需要创建新的集合保存一轮遍历下来，每个单词只改变一个字母且在单词表中的单词</span>            <span class="token comment">//即保存第二层需要遍历的单词</span>            unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>            <span class="token comment">//遍历q1中的每个单词</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span> w <span class="token operator">:</span> q1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                string s <span class="token operator">=</span> w<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//保存改变的字符，在每一轮最后复原单词</span>                    <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">;</span>                        <span class="token comment">//如果q2集合中有此单词则说明查找成功</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>q2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            reversed <span class="token operator">?</span> next<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">:</span> next<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                            find <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            reversed <span class="token operator">?</span> next<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">:</span> next<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                            q<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//words.erase(s);</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//改回来</span>                    s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span> s<span class="token operator">:</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                words<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//q1保存下一趟需要遍历的单词集合</span>            <span class="token comment">//q2则保存另一个集合</span>            <span class="token comment">//谁小遍历谁，减小开销</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> q2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                q1 <span class="token operator">=</span> q<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                q1 <span class="token operator">=</span> q2<span class="token punctuation">;</span>                q2 <span class="token operator">=</span> q<span class="token punctuation">;</span>                reversed <span class="token operator">=</span> <span class="token operator">!</span>reversed<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>        <span class="token comment">//现在需要对构造好的next进行查找,并找到所有路径</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> path<span class="token punctuation">&#123;</span> beginWord <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span><span class="token operator">&amp;</span> next<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>path <span class="token punctuation">,</span> string <span class="token operator">&amp;</span> src<span class="token punctuation">,</span> string <span class="token operator">&amp;</span> des<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>src <span class="token operator">==</span> des<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span> s <span class="token operator">:</span> next<span class="token punctuation">[</span>src<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">bfs</span><span class="token punctuation">(</span>next <span class="token punctuation">,</span> result <span class="token punctuation">,</span> path <span class="token punctuation">,</span> s <span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="130-被围绕的区域-—（中等）"><a href="#130-被围绕的区域-—（中等）" class="headerlink" title="130. 被围绕的区域  —（中等）"></a><a href="https://leetcode-cn.com/problems/surrounded-regions/">130. 被围绕的区域</a>  —（中等）</h2><p>给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符 <code>&#39;X&#39;</code> 和 <code>&#39;O&#39;</code> ，找到所有被 <code>&#39;X&#39;</code> 围绕的区域，并将这些区域里所有的 <code>&#39;O&#39;</code> 用 <code>&#39;X&#39;</code> 填充。</p><p>示例1：</p><img src="https://i.loli.net/2021/08/03/uURHlsoYcjTyCXt.jpg" style="zoom:80%;" /><blockquote><p>输入：board = [[“X”,”X”,”X”,”X”],[“X”,”O”,”O”,”X”],[“X”,”X”,”O”,”X”],[“X”,”O”,”X”,”X”]]<br>输出：[[“X”,”X”,”X”,”X”],[“X”,”X”,”X”,”X”],[“X”,”X”,”X”,”X”],[“X”,”O”,”X”,”X”]]<br>解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的 ‘O’ 都不会被填充为 ‘X’。 任何不在边界上，或不与边界上的 ‘O’ 相连的 ‘O’ 最终都会被填充为 ‘X’。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p></blockquote><p>示例2：</p><blockquote><p>输入：board = [[“X”]]<br>输出：[[“X”]]</p></blockquote><p>提示：</p><ul><li>m == board.length</li><li>n == board[i].length</li><li>1 &lt;= m, n &lt;= 200</li><li>board[i][j] 为 ‘X’ 或 ‘O’</li></ul><p>这道题刚开始我就拿来自己做，做法是按顺序扫描，然后做标记等，但是做到后面的用例都会有几个过不了，一直改来改去导致代码臃肿，达到了一百多行，因此只能换种方法</p><p>先来分析题干，本题给定的矩阵中有三种元素：  字母 X； 被字母 X 包围的字母 O； 没有被字母 X 包围的字母 O。本题要求将所有被字母 X 包围的字母 O都变为字母 X ，但很难判断哪些 O 是被包围的，哪些 O 不是被包围的。</p><p>此题目中要注意的是在<strong>边界</strong>中的 <code>O</code>都不会给填充成<code>X</code>，因此我们可以从这里下手，先探测边界中有<code>O</code>的地方，之后再由此延展到内部，将相连的O都标记为一个值（假设标记为<code>B</code>）</p><p>待到全部边界O以及与它相连的O都标记完后，此时的平面上只有三种值，一个是<code>X</code>，一个是<code>O</code>，还有一个是<code>B</code>，这个时候的B都是不可以填充的，因为他们都与边界值相连，不满足条件。因此我们只用把剩下的O填充为X就行了</p><p>我们就可以再次按顺序扫描，遇到B回滚为O，遇到O则填充为X，这里不用担心会搞混，因为是按顺序扫描的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//全局变量，不用重复计算</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> direction<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方向上、左、下、右</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        row <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//行数</span>        col <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//列数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>x <span class="token operator">&lt;</span> row<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//第一层遍历</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>y <span class="token operator">&lt;</span> col<span class="token punctuation">;</span><span class="token operator">++</span>y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//第二层遍历</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">==</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">==</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//end y</span>        <span class="token punctuation">&#125;</span><span class="token comment">//end x</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>x <span class="token operator">&lt;</span> row<span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//第一层遍历</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>y <span class="token operator">&lt;</span> col<span class="token punctuation">;</span><span class="token operator">++</span>y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//第二层遍历</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'B'</span><span class="token punctuation">)</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span>                    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'X'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//end y</span>        <span class="token punctuation">&#125;</span><span class="token comment">//end x</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//是O的话就标记为B</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">></span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">></span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'O'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//从边界往里面扩展，标记为B</span>        <span class="token keyword">int</span> x_next<span class="token punctuation">;</span>        <span class="token keyword">int</span> y_next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//往不同方向搜索</span>            x_next<span class="token operator">=</span>x<span class="token operator">+</span>direction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            y_next<span class="token operator">=</span>y<span class="token operator">+</span>direction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>x_next<span class="token punctuation">,</span>y_next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为O(M*N)，M为平面行数，N为平面列数，深度优先搜索过程中，每一个点至多只会被标记一次。</p><p>空间复杂度为O(M*N)，主要为深度优先搜索的栈的开销。</p><hr><h1 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h1><p>顾名思义， 分治问题由“分”（divide）和“治”（conquer）两部分组成，通过把原问题分为子问题，再将子问题进行处理合并，从而实现对原问题的求解。  </p><p>归并排序就是典型的分治问题，其中“分”即为把大数组平均分成两个小数组，通过递归实现，最终我们会得到多个长度为 1 的子数组;“治”即为把已经排好序的两个小数组合成为一个排好序的大数组，从长度为 1 的子数组开始，最终合成一个大数组。  </p><p>我们也使用数学表达式来表示这个过程。定义 T(n) 表示处理一个长度为 n 的数组的时间复杂度，则归并排序的时间复杂度递推公式为 T(n) = 2T(n/2) + O(n)。其中 2T(n/2) 表示我们分成了两个长度减半的子问题， O(n) 则为合并两个长度为 n/2 数组的时间复杂度。那么怎么利用这个递推公式得到最终的时间复杂度呢？这里我们可以利用著名的主定理（Master theorem）求解：</p><p>定理 8.1. 主定理</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210804175401668.png" alt="image-20210804175401668" style="zoom:80%;" /><p>通过主定理我们可以知道，归并排序属于第二种情况，且时间复杂度为 O(n log n)。其他的分治问题也可以通过主定理求得时间复杂度  </p><h2 id="241-为运算表达式设计优先级-—（中等）"><a href="#241-为运算表达式设计优先级-—（中等）" class="headerlink" title="241. 为运算表达式设计优先级  —（中等）"></a><a href="https://leetcode-cn.com/problems/different-ways-to-add-parentheses/">241. 为运算表达式设计优先级</a>  —（中等）</h2><p>给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 +, - 以及 ×。</p><p>示例 1:</p><blockquote><p>输入: “2-1-1”<br>输出: [0, 2]<br>解释:<br>((2-1)-1) = 0<br>(2-(1-1)) = 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: “2×3-4×5”<br>输出: [-34, -14, -10, -10, 10]<br>解释:<br>(2×(3-(4×5))) = -34<br>((2×3)-(4×5)) = -14<br>((2×(3-4))×5) = -10<br>(2×((3-4)×5)) = -10<br>(((2×3)-4)×5) = 10</p></blockquote><p>此题一看是挺复杂的，但是我们慢慢来分析，由示例的括号可以看出，每次的括号出现都是在符号出现的前后，因此我们可以通过这些符号递归下手，遇到符号就分开两个数，然后进行计算结果，最后层层递归得到最终答案</p><p>以 2 * 3 - 4 * 5 为例。</p><p>2 和 3 - 4 * 5 两部分，中间是 * 号相连。</p><p>2 * 3 和 4 * 5 两部分，中间是 - 号相连。</p><p>2 * 3 - 4 和 5 两部分，中间是 * 号相连。</p><p>有了两部分的结果，然后再通过中间的符号两两计算加入到最终的结果中即可。</p><p>比如第一种情况，2 和 3 - 4 * 5 两部分，中间是 * 号相连。</p><p>2 的解就是 [2]，3 - 4 * 5 的解就是 [-5, -17]。</p><p>把两部分解通过 * 号计算，最终结果就是 [-10, -34]。</p><p>另外两种情况也类似。</p><p>然后还需要递归出口。</p><p>如果给定的字符串只有数字，没有运算符，那结果就是给定的字符串转为数字，这个就要作为递归出口的条件</p><p>比如上边的第一种情况，2 的解就是 [2]。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>string expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sLen <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sLen<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ways<span class="token punctuation">;</span><span class="token comment">//最终返回的答案</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sLen<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//从第一位开始遍历</span>            <span class="token keyword">char</span> currentChar <span class="token operator">=</span> expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前遍历到的字符串</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>currentChar <span class="token operator">==</span> <span class="token string">'+'</span><span class="token operator">||</span>currentChar <span class="token operator">==</span> <span class="token string">'-'</span><span class="token operator">||</span>currentChar <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果当前字符是有效运算符号的话</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> left <span class="token operator">=</span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归符号前面的</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> right <span class="token operator">=</span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归符号后边的</span>                <span class="token comment">//cout&lt;&lt;"size: "&lt;&lt;left.size()&lt;&lt;" "&lt;&lt;right.size()&lt;&lt;endl;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> l <span class="token operator">:</span> left<span class="token punctuation">)</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> r <span class="token operator">:</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//cout&lt;&lt;"num: "&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span>                        <span class="token keyword">switch</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>ways<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>ways<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token operator">-</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>ways<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ways<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ways<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ways<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完这个之后可以发现，在递归过程中有许多数据进行了重复计算，这时候就可以加一个记忆表来记录每次计算的结果以便后面直接获得而不是再次计算</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*动态规划    首先将字符串中的数字和操作符分别存储下来    第i个操作符对应的数字是i和i+1，同理第i个数的前面的操作符是i-1，后面的一个是i（i表示在数组中的序号）    dp[i][j]表示从第i个数字到第j个数字的所有情况        （1）i==j            等于数字本身的值        （2）i != j(j肯定是大于i的)             将i-j分成两个式子来看，[i,i]op[i+1,j],[i,i+1]op[i+2,j]...[[i,j-1]]op[j,j]            将上面的所有情况全部组合起来            现在需要考虑一个问题是[i,i+k]op[i+k+1,j]的op应该是ops数组里面的哪一个，应该是ops[i+k]    有了以上，我们就可以写出动态规划了，还有一个需要注意的地方是，（2）情况也就是一个遍历，但是遍历的顺序需要注意，不应该是[0,j]->[j-1,j]而应该是[j-1,j]->[0->j]。如果是从[0,j]开始，你会发现[1,j]..[j-1,j]这些你需要的都还没算*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>string input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> ops<span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOp</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                ops<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1 <span class="token operator">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r2 <span class="token operator">:</span> dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">calculate</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span>ops<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">isOp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> op<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="数学问题"><a href="#数学问题" class="headerlink" title="数学问题"></a>数学问题</h1><h2 id="最大公因数和最小公倍数公式"><a href="#最大公因数和最小公倍数公式" class="headerlink" title="最大公因数和最小公倍数公式"></a>最大公因数和最小公倍数公式</h2><p>利用辗转相除法，我们可以很方便地求得两个数的最大公因数（greatest common divisor， gcd）</p><p>将两个数相乘再除以最大公因数即可得到最小公倍数（least common multiple, lcm）  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步地，我们也可以通过扩展欧几里得算法（extended gcd）在求得 a 和 b 最大公因数的同时，也得到它们的系数 x 和 y，从而使 ax + by = gcd(a, b)  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">xGCD</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> gcd <span class="token operator">=</span> <span class="token function">xGCD</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> y1<span class="token punctuation">,</span> y <span class="token operator">=</span> x1 <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y1<span class="token punctuation">;</span>    <span class="token keyword">return</span> gcd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="204-计数质数-—（简单）"><a href="#204-计数质数-—（简单）" class="headerlink" title="204. 计数质数  —（简单）"></a><a href="https://leetcode-cn.com/problems/count-primes/">204. 计数质数</a>  —（简单）</h2><p>统计所有小于非负整数 <em><code>n</code></em> 的质数的数量。</p><p>示例 1：</p><blockquote><p>输入：n = 10<br>输出：4<br>解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：n = 0<br>输出：0</p></blockquote><p>示例 3：</p><blockquote><p>输入：n = 1<br>输出：0</p></blockquote><p>提示：</p><p><code>0 &lt;= n &lt;= 5 * 10^6</code></p><p>这道题主要是要知道埃拉托斯特尼筛法（Sieve of Eratosthenes，简称埃氏筛法） ，其原理是从 1 到 n 遍历，假设当前遍历到m，则把所有小于 n 的、且是 m 的倍数的整数标为和数；遍历完成后，没有被标为和数的数字即为质数   </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>count<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">*</span>j <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    isPrime<span class="token punctuation">[</span>i<span class="token operator">*</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们利用质数的一些性质还可以将算法优化，跳过不必要的偶数，减少时间复杂度</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//利用质数的一些性质，我们可以进一步优化该算法。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">prime</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sqrtn <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//偶数一定不是质数</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> sqrtn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//最小质因子一定小于等于开方数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 避免偶数和重复遍历</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">--</span>count<span class="token punctuation">;</span>                    prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">do</span><span class="token punctuation">&#123;</span>                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> sqrtn <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 避免偶数和重复遍历</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="264-丑数-II-—（中等）"><a href="#264-丑数-II-—（中等）" class="headerlink" title="264. 丑数 II  —（中等）"></a><a href="https://leetcode-cn.com/problems/ugly-number-ii/">264. 丑数 II</a>  —（中等）</h2><p>给你一个整数 <code>n</code> ，请你找出并返回第 <code>n</code> 个 <strong>丑数</strong> 。</p><p><strong>丑数</strong> 就是只包含质因数 <code>2</code>、<code>3</code> 和/或 <code>5</code> 的正整数。</p><p>示例 1：</p><blockquote><p>输入：n = 10<br>输出：12<br>解释：[1, 2, 3, 4, 5, 6, 8, 9, 10, 12] 是由前 10 个丑数组成的序列。</p></blockquote><p>示例 2：</p><blockquote><p>输入：n = 1<br>输出：1<br>解释：1 通常被视为丑数。</p></blockquote><p>提示：</p><p><code>1 &lt;= n &lt;= 1690</code></p><p>这道题主要是理解丑数是什么概念，如果从1开始自底向上计算，丑数则是一个特定的序列，每个数要么是2的倍数，要么是3的倍数或者要么是5的倍数，例如6、8都是丑数，但7、14不是，因为它们包含<a href="https://baike.baidu.com/item/%E8%B4%A8%E5%9B%A0%E5%AD%90/10720836">质因子</a>7。 习惯上我们把1当做是第一个丑数。</p><p>又例如前20个丑数为：1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36</p><p>理解好之后，我们就可以来看题目了，题目要求我们输出第n个丑数，n是外界传进来的参数，这里我们可以使用自底向上的方法来推算出第n个丑数</p><p>这里给了两种方法，一个是最小堆法，另一个则是三指针方法</p><h3 id="最小堆法"><a href="#最小堆法" class="headerlink" title="最小堆法"></a>最小堆法</h3><p>比较简单的解法是使用优先队列来实现最小堆：</p><ol><li>起始先将最小丑数 1 放入队列</li><li>每次从队列取出最小值 x，即<code>top()</code>值，然后再分别将x与2、3、5相乘得出来的答案入队</li><li>对步骤 2 循环多次，第 n 次出队的值即是答案</li></ol><p>同时为了防止多个相同的数入队导致索引错乱，这里另外用了个<code>set</code>来判断一个数是否入队过，如果没有则入队列</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">//集合，判断一个数是否入队过</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token comment">//最小堆</span>                <span class="token comment">//将1作为第一个丑数</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token comment">//推算到第n个丑数直接返回</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//将x值分别与2,3,5相乘</span>                <span class="token keyword">long</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断当前的数是否入队过，如果已存在则跳过</span>                <span class="token punctuation">&#123;</span>                    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为：O(n log n)，其中往优先队列中添加元素花费O(log n)时间</p><p>空间复杂度为：O(n)</p><h3 id="三指针法"><a href="#三指针法" class="headerlink" title="三指针法"></a>三指针法</h3><p>由于丑数序列可以自底向上推算，我们可以写出来它的推算公式</p><p>由质因数2推算：1×2、 2×2、3×2、4×2、5×2、6×2、8×2 ……</p><p>由质因数3推算：1×3、 2×3、3×3、4×3、5×3、6×3、8×3 ……</p><p>由质因数5推算：1×5、 2×5、3×5、4×5、5×5、6×5、8×5 ……</p><p>鉴于上面的公式因此我们可以用三个指针（例如：<code>p2,p3,p5</code>）分别指向质因数2、3、5它们自己的公式列</p><p>然后每次都将它们所指的数乘上对应的2、3或5（<code>p2 × 2</code>、<code>p3 × 3</code>、<code>p5 × 5</code>），得出的三个结果再取出最小的结果</p><p>之后再判断这个结果是哪几个指针乘出来的，并将该指针往前进（这一步就是为了从小到大排序，自底向上推算）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//三指针方法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//建立推演数组，arr[0]不用</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1作为第一个丑数</span>        <span class="token keyword">int</span> p2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>p3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>p5<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//三指针初始化</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//索引值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span>arr<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span>c<span class="token operator">=</span>arr<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minNum <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取三个数乘出来最小的数值</span>            <span class="token comment">//这里不能用else if</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minNum<span class="token operator">==</span>a<span class="token punctuation">)</span> <span class="token operator">++</span>p2<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minNum<span class="token operator">==</span>b<span class="token punctuation">)</span> <span class="token operator">++</span>p3<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minNum<span class="token operator">==</span>c<span class="token punctuation">)</span> <span class="token operator">++</span>p5<span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>minNum<span class="token punctuation">;</span><span class="token comment">//赋值，这样就可以按顺序从小到大推演</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span>arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为：O(n)</p><p>空间复杂度为：O(n)</p><hr><h2 id="313-超级丑数-—（中等）"><a href="#313-超级丑数-—（中等）" class="headerlink" title="313. 超级丑数  —（中等）"></a><a href="https://leetcode-cn.com/problems/super-ugly-number/">313. 超级丑数</a>  —（中等）</h2><p>超级丑数 是一个正整数，并满足其所有质因数都出现在质数数组 primes 中。</p><p>给你一个整数 n 和一个整数数组 primes ，返回第 n 个 超级丑数 。</p><p>题目数据保证第 n 个 超级丑数 在 32-bit 带符号整数范围内。</p><p>示例 1：</p><blockquote><p>输入：n = 12, primes = [2,7,13,19]<br>输出：32<br>解释：给定长度为 4 的质数数组 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：n = 1, primes = [2,3,5]<br>输出：1<br>解释：1 不含质因数，因此它的所有质因数都在质数数组 primes = [2,3,5] 中。</p></blockquote><p>提示：</p><ul><li>1 &lt;= n &lt;= 106</li><li>1 &lt;= primes.length &lt;= 100</li><li>2 &lt;= primes[i] &lt;= 1000</li><li>题目数据 保证 primes[i] 是一个质数</li><li>primes 中的所有值都 互不相同 ，且按 递增顺序 排列</li></ul><p>这一题和上一题唯一不同的地方就是在于给定的质因数不固定，这一题的质因数是由外界提供的，我们仍然可以用多指针的方法来解决</p><p>因为给的质因数不确定，我们就用一个数组专门保存质因数指针<code>(pointers)</code>，同时用一个数组保存每一回合循环求出来的新丑数序列<code>(newUglyNum)</code>，再将它们最小的放在推算数组中，而这个推算数组实际上是动态规划，因此这里代码命名为<code>dp</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//思路： 1. 第 n 个超级丑数是基于 前面某一个超级丑数乘以某一个 primes[i] 得到的，基于这一递推关系，</span><span class="token comment">//          可以使用「动态规划」。</span><span class="token comment">//       2. </span><span class="token comment">// 时间 O（n * m） ，空间 O （n + m）</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthSuperUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> primes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//第一个丑数为1</span>        <span class="token keyword">int</span> pLen<span class="token operator">=</span>primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//质因数序列长度</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pointers</span><span class="token punctuation">(</span>pLen<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录质因数对应的指针指向</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">newUglyNum</span><span class="token punctuation">(</span>pLen<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时记录当前新的丑数序列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> minNum <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token comment">//这回合循环所求得的丑数序列中的最小值</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>pLen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                newUglyNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>pointers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//新的丑数序列=旧序列*对应的质因数</span>                minNum <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minNum<span class="token punctuation">,</span>newUglyNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minNum<span class="token punctuation">;</span><span class="token comment">//更新dp</span>            <span class="token comment">//更新指针序列</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>pLen<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>newUglyNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>minNum<span class="token punctuation">)</span>                    <span class="token operator">++</span>pointers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为： O（n * m），m是质因数数组长度</p><p>空间复杂度为：O （n + m），m是质因数数组长度</p><hr><h2 id="384-打乱数组-洗牌算法-—（中等）"><a href="#384-打乱数组-洗牌算法-—（中等）" class="headerlink" title="384. 打乱数组(洗牌算法)  —（中等）"></a><a href="https://leetcode-cn.com/problems/shuffle-an-array/">384. 打乱数组</a>(洗牌算法)  —（中等）</h2><p>给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。</p><p>实现 Solution class:</p><ul><li>Solution(int[] nums) 使用整数数组 nums 初始化对象</li><li>int[] reset() 重设数组到它的初始状态并返回</li><li>int[] shuffle() 返回数组随机打乱后的结果</li></ul><p>示例：</p><blockquote><p>输入</p><p>[“Solution”, “shuffle”, “reset”, “shuffle”]<br>[[[1, 2, 3]], [], [], []]<br>输出<br>[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]</p><p>解释</p><p>Solution solution = new Solution([1, 2, 3]);<br>solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]<br>solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]<br>solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]</p></blockquote><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 200</li><li>-106 &lt;= nums[i] &lt;= 106</li><li>nums 中的所有元素都是 唯一的</li><li>最多可以调用 5 * 104 次 reset 和 shuffle</li></ul><p>这一题主要是了解一个经典的算法——<strong>Fisher-Yates 洗牌算法</strong>，其原理就像我们平时打牌时洗牌方法一样，通过随机交换位置来实现随机打乱，同时该算法又有正向和反向区分</p><p>我这里用的是反向洗牌，简单来说就是从数组最后一个元素开始往前洗牌，每一次将当前遍历到的元素与前面随机一个元素交换，直到遍历完就是反向洗牌了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> myVec<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Solution</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>myVec<span class="token operator">=</span>nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** Resets the array to its original configuration and return it. */</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> myVec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** Returns a random shuffling of the array. */</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arr</span><span class="token punctuation">(</span>myVec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可以使用反向或者正向洗牌， 效果相同。</span>        <span class="token comment">// 反向洗牌：</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>myVec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 正向洗牌：</span>        <span class="token comment">// for (int i = 0; i &lt; n; ++i) &#123;</span>        <span class="token comment">// int pos = rand() % (n - i);</span>        <span class="token comment">// swap(shuffled[i], shuffled[i+pos]);</span>        <span class="token comment">// &#125;</span>                <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your Solution object will be instantiated and called as such: * Solution* obj = new Solution(nums); * vector&lt;int> param_1 = obj->reset(); * vector&lt;int> param_2 = obj->shuffle(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为：O(N)</p><hr><h1 id="剑指三剑客之一：链表"><a href="#剑指三剑客之一：链表" class="headerlink" title="剑指三剑客之一：链表"></a>剑指三剑客之一：链表</h1><h2 id="206-反转链表-—（简单）"><a href="#206-反转链表-—（简单）" class="headerlink" title="206. 反转链表   —（简单）"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a>   —（简单）</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><img src="https://i.loli.net/2021/10/14/weZdSAOvHo9Y6VQ.png" style="zoom:80%;" /><p><strong>提示：</strong></p><ul><li><p>链表中节点的数目范围是 <code>[0, 5000]</code></p></li><li><p><code>-5000 &lt;= Node.val &lt;= 5000</code></p></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><p>本题目如同进阶所说的有两个解决方法，迭代和递归，都挺简单掌握的，主要是要自己画图理解，<strong>链表题首先要搞好的就是可以把图画出来</strong></p><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><img src="https://i.loli.net/2021/10/14/VTz2ubdKR8BQFX4.gif" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ListNode<span class="token operator">*</span> t <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><img src="https://i.loli.net/2021/10/14/sEJCNMY7Ad1Q3xq.gif" style="zoom:80%;" /><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ListNode<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记11-添加攻击属性</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B011-%E6%B7%BB%E5%8A%A0%E6%94%BB%E5%87%BB%E5%B1%9E%E6%80%A7/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B011-%E6%B7%BB%E5%8A%A0%E6%94%BB%E5%87%BB%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>在这一章节中我们来给人物还有史莱姆添加攻击的属性，同时也给史莱姆补充上攻击的动作，那么我们就开始吧</p><h1 id="创建有关攻击的ScriptableObject"><a href="#创建有关攻击的ScriptableObject" class="headerlink" title="创建有关攻击的ScriptableObject"></a>创建有关攻击的ScriptableObject</h1><p>首先还是新建文件夹和代码文件👇</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/b58fb07a9dd74e99a87414a252bf97d5.png" alt="1.png" style="zoom:80%;" /><p>打开这个代码，我们来写一下有关攻击的属性</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Attack/Attack Data"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttackData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//记录攻击相关属性</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> attackRange<span class="token punctuation">;</span><span class="token comment">//近战攻击范围</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> skillRange<span class="token punctuation">;</span><span class="token comment">//远程攻击范围</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> coolDown<span class="token punctuation">;</span><span class="token comment">//CD冷却</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> minDamage<span class="token punctuation">;</span><span class="token comment">//攻击最小伤害</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> maxDamage<span class="token punctuation">;</span><span class="token comment">//攻击最大伤害</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> criticalMultiplier<span class="token punctuation">;</span><span class="token comment">//暴击加成百分比</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> criticalChance<span class="token punctuation">;</span><span class="token comment">//暴击率</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打完代码之后我们就可以建立一个有关攻击的<code>ScriptableObject</code>了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/ab9faff156ca410f9a77dd7090b983e8.png" alt="2.png" style="zoom:80%;" /><p>然后我们可以根据自己需求进行属性值设定</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/cc0abf9d1c1f4e6d8accc357cba98c51.png" alt="3.png" style="zoom:80%;" /><p>同时我们还要将它挂载到人物和敌人身上，我们打开<code>Monobehavior</code>文件夹下的<code>CharcterStates.cs</code>代码文件，这个代码文件是挂辅助将ScriptableObject挂载的</p><p>然后添加一行代码，接受外界提供的<code>Player BaseAttackData</code>的ScriptableObject</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">AttackData_SO</span> attackData<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们就可以回到史莱姆上挂载了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/ba22aeebd6224df78664695acf1c927f.png" alt="4.png" style="zoom:80%;" /><h1 id="补充之前的攻击相关代码"><a href="#补充之前的攻击相关代码" class="headerlink" title="补充之前的攻击相关代码"></a>补充之前的攻击相关代码</h1><p>还记得之前在写人物和史莱姆攻击时留下来的一些待补充代码吗？我们现在就可以逐步来完善它们了</p><p>第一个要修改的是<code>PlayerController.cs</code>里面人物的攻击距离，之前我们一直是默认为1，但是现在我们可以来补充它了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//ScriptableObject相关变量</span><span class="token keyword">private</span> <span class="token class-name">CharcterStates</span> charcterStates<span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    charcterStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//TODO:添加人物攻击距离</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span>          charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在声明一个<code>CharcterStates</code>后，我们要把这里的while判断条件右边的1改成<code>charcterStates.attackData.attackRange</code>以获取攻击距离判断</p><p>然后是<code>EnemyController.cs</code>，这里修改量比较大</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//ScriptableObject相关变量</span><span class="token keyword">private</span> <span class="token class-name">CharcterStates</span> charcterStates<span class="token punctuation">;</span><span class="token comment">//这个敌人攻击相关的</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> lastAttackTime<span class="token punctuation">;</span><span class="token comment">//上一次攻击的时间（用来实现CD冷却效果）</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    charcterStates <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharcterStates<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastAttackTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span><span class="token comment">//开始获取冷却时间</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    lastAttackTime<span class="token operator">-=</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span><span class="token comment">//每一帧都减冷却</span><span class="token punctuation">&#125;</span><span class="token comment">//判断攻击距离函数</span><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//人物在敌人的攻击距离内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span>            <span class="token operator">&lt;=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>attackRange<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//人物在敌人的远程攻击距离内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackTarget<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span>            <span class="token operator">&lt;=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>skillRange<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击            <span class="token comment">//...</span>            <span class="token comment">//TODO:在攻击范围攻击</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//停止跟随</span>                agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//停下来</span>                <span class="token comment">//攻击冷却完成进行攻击，在前面声明了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lastAttackTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    lastAttackTime <span class="token operator">=</span> charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>coolDown<span class="token punctuation">;</span>                    <span class="token comment">//暴击判断，随机获取的数值（0到1之间）在暴击率内则是暴击</span>                    <span class="token comment">//charcterStates.isCritical下面会讲，用来记录是否暴击的变量</span>                    charcterStates<span class="token punctuation">.</span>isCritical <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&lt;</span>                        charcterStates<span class="token punctuation">.</span>attackData<span class="token punctuation">.</span>criticalChance<span class="token punctuation">;</span>                    <span class="token comment">//执行攻击</span>                    <span class="token function">Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//攻击控制函数</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//攻击时敌人看向目标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//近身攻击动画</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//远程或技能攻击动画</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到中间控制攻击的时候有一个<code>charcterStates.isCritical</code>的新变量，这是在<code>CharcterStates.cs</code>中新声明的，可以供外界访问的布尔值，用来记录当前是否为暴击，同时虽然它是public属性，但是我们可以用<code>[HideInInspector]</code>将其隐藏起来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//CharcterStates.cs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterStates</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HideInInspector</span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> isCritical<span class="token punctuation">;</span><span class="token comment">//是否暴击</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码开始复杂了起来，需要好好理解哦</p><h1 id="添加攻击动画"><a href="#添加攻击动画" class="headerlink" title="添加攻击动画"></a>添加攻击动画</h1><p>我们看到上面的代码有两个动画需要我们来添加，一个是近身攻击动画，一个是远程或技能动画</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/3d2834012c04439d824cd2b2bbb56556.png" alt="5.png" style="zoom:80%;" /><p>我们按上图这样编辑动画控制器，建立两个<code>Trigger</code>类型的变量来分别控制<code>Attack01</code>和<code>Attack02</code>的动画触发条件，其次要注意的地方就是由巡逻状态切换过去攻击状态时并不需要动画的过渡效果，同时记得不要忘记把触发条件选择上</p><p>然后我们回到代码中，找到控制攻击的<code>Attack()</code>函数补充一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//控制敌人攻击的函数</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//攻击时敌人看向目标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//近身攻击动画</span>        anim<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TargetInSkillRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//远程或技能攻击动画</span>        anim<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Skill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就实现了基本的攻击效果</p><p>我们还可以把暴击效果加上，可以把Skill动画换成我们的暴击效果动画</p><p>再次打开动画控制器，添加一个布尔类型的变量<code>Critical</code></p><p>我们把<code>Attack02</code>当做暴击动画，然后调整一下动画的切换过程</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/d665b2ca32e840c8868baf19b0e587cf.png" alt="6.png" style="zoom:80%;" /><p>这里注意一点就是还要区别普通攻击时<code>Critical</code>触发状态应该是<code>false</code>，以防动画冲突</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/4745d79d02704b0c9ef1bf7903896d5b.png" alt="7.png" style="zoom:80%;" /><p>然后返回代码，我们要时刻获取是否为暴击状态，那么可以如下操作</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//实时更新Animator里面史莱姆的状态布尔值</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Critical"</span><span class="token punctuation">,</span>charcterStates<span class="token punctuation">.</span>isCritical<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时刻获取是否为暴击</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>SwitchAnimation()</code>是放在Update()里面运行的，所以可以把暴击状态放在这里让它每一刻都获取暴击状态</p><h1 id="修复人物脱离敌人攻击范围后敌人不动问题"><a href="#修复人物脱离敌人攻击范围后敌人不动问题" class="headerlink" title="修复人物脱离敌人攻击范围后敌人不动问题"></a>修复人物脱离敌人攻击范围后敌人不动问题</h1><p>最后，我们有个小问题要修复一下</p><p>由于之前我们写了发现敌人时敌人就要停下来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，如果人物脱离敌人攻击范围时我们就要把停止状态取消掉，不然就会出现敌人停留在原地的现象</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击<span class="token comment">//...</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//拉脱回上一个状态</span>        agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//人物脱离追击范围后，敌人停在当前位置</span>        isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        isFollow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//找到人物就跑着追</span>        agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//&lt;-----------停止状态取消</span>        agent<span class="token punctuation">.</span>speed<span class="token operator">=</span>speed<span class="token punctuation">;</span>        <span class="token comment">//人物进到敌人的范围会给追击</span>        agent<span class="token punctuation">.</span>destination<span class="token operator">=</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到这，我们就完成了给人物和敌人添加攻击属性，并且还为敌人加了普通攻击和暴击等攻击动画，让游戏开始变得有模有样起来</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记10-为人物添加属性</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B010-%E4%B8%BA%E4%BA%BA%E7%89%A9%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B010-%E4%B8%BA%E4%BA%BA%E7%89%A9%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>🎈<strong>注意</strong>：从这一章开始，笔记内容会在一些比较简单的地方进行简略</p><h1 id="认识Scriptable-Object"><a href="#认识Scriptable-Object" class="headerlink" title="认识Scriptable Object"></a>认识Scriptable Object</h1><p>这一章开始我们会频繁地使用代码以及更多地<code>ScriptableObject</code>起来，什么是Scriptable Object呢？就像下图我们的<code>Pipeline Setting</code>文件夹下的东西就是我们一种Scriptable Object实现方式</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/158275c63e164f448921282c6cefad4a.png" alt="1.png" style="zoom:80%;" /><p>关于它的更多特性可以上网搜索资料，这里不过多描述</p><p>那么我们这次就拿它来给我们的人物包括敌人创建一些基本的属性值，如：血量、防御值等等</p><h1 id="为人物添加属性值"><a href="#为人物添加属性值" class="headerlink" title="为人物添加属性值"></a>为人物添加属性值</h1><p>首先要在<code>Scripts</code>文件夹创建一些文件夹以便日后管理</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/5a19a7e92b1e41d1ad6996dbb1a0563a.png" alt="2.png" style="zoom:80%;" /><p>两个文件夹分别是存放挂载（MonoBehavior）与建立（ScriptableObject）我们的Scriptable Object的代码文件用的</p><p>除了上面的两个文件夹外，还有专门有用来存放<code>ScriptableObject</code>数据的文件夹</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/dd8e1a4b80a646f5835de7c6834b4f19.png" alt="3.png" style="zoom:80%;" /><h2 id="创建专门存放属性值的Scriptable-Object"><a href="#创建专门存放属性值的Scriptable-Object" class="headerlink" title="创建专门存放属性值的Scriptable Object"></a>创建专门存放属性值的Scriptable Object</h2><p>之后再在<code>Charcter States/ScriptableObject</code>文件夹下新建个代码脚本文件<code>CharcterData_SO.cs</code></p><p>代码内容如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//添加右键菜单</span><span class="token punctuation">[</span><span class="token function">CreateAssetMenu</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Charcter States/Data"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token comment">//注意这个类继承的是ScriptableObject类</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一段代码可以在右键菜单中添加一个选项</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/54d3f5656d33441fa14682fcf33ee71f.png" alt="4.1.png" style="zoom:80%;" /><p>创建出来的就是一个基于<code>CharcterData_SO</code>的ScriptableObject，我们将其命名为<code>Player Data</code></p><img src="https://p3-tt.byteimg.com/origin/pgc-image/5ff5985ea4a742efa56703027a071053.png" alt="4.png" style="zoom:80%;" /><img src="https://p26-tt.byteimg.com/origin/pgc-image/b6c7ca8158fb45f89fa331bffdba9eba.png" alt="5.png" style="zoom:80%;" /><p>这个时候还是什么都没有的，我们重新打开<code>CharcterData_SO.cs</code>继续填写代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//添加右键菜单</span><span class="token punctuation">[</span><span class="token function">CreateAssetMenu</span><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">"New Data"</span><span class="token punctuation">,</span>menuName <span class="token operator">=</span> <span class="token string">"Charcter States/Data"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterData_SO</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"States Info（属性信息）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> maxHealth<span class="token punctuation">;</span><span class="token comment">//最大生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentHealthl<span class="token punctuation">;</span><span class="token comment">//当前生命值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> baseDefence<span class="token punctuation">;</span><span class="token comment">//基础防御值</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> currentDefence<span class="token punctuation">;</span><span class="token comment">//当前防御值</span>    <span class="token comment">//攻击力比较复杂，打算分开写，这里暂时不写着先</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们赋予了4个属性，当Unity编译之后在我们刚刚新创建的<code>Player Data</code>就有了改变，多了几个属性值出来</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/a9cdd098cf54461a8f0387b00d539f9b.png" alt="6.png" style="zoom:80%;" /><h2 id="挂载Scriptable-Object"><a href="#挂载Scriptable-Object" class="headerlink" title="挂载Scriptable Object"></a>挂载Scriptable Object</h2><p>那么有了存放的ScriptableObject之后，我们还要想办法将其运用（即挂载）到人物身上，方便数据之间的读取</p><p>我们在<code>Charcter States/MonoBehavior</code>中新建一个代码脚本，命名为<code>CharcterStates.cs</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharcterStates</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CharcterData_SO</span> charcterData<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> MaxHealth<span class="token punctuation">&#123;</span>        <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token comment">//取值属性</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>charcterData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> charcterData<span class="token punctuation">.</span>maxHealth<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span><span class="token punctuation">&#123;</span><span class="token comment">//赋值属性</span>            charcterData<span class="token punctuation">.</span>maxHealth <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//TODO:照上面模式写出其它几个属性值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中用到了C#的<strong>属性</strong>，即<code>get</code>和<code>set</code>来读取或写入人物的最大生命值，剩下的几个属性值也是同样方法来写</p><p>写好之后我们保存一下代码，将代码文件当作组件添加到人物上面</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/4ccad37c1e6e4765a5459eef8bf7e044.png" alt="7.png" style="zoom:80%;" /><p>可以看到它需要接受一个<code>CharcterData_SO</code>类型的</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记9-敌人的随机巡逻</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B09-%E6%95%8C%E4%BA%BA%E7%9A%84%E9%9A%8F%E6%9C%BA%E5%B7%A1%E9%80%BB/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B09-%E6%95%8C%E4%BA%BA%E7%9A%84%E9%9A%8F%E6%9C%BA%E5%B7%A1%E9%80%BB/</url>
      
        <content type="html"><![CDATA[<p>​    在上一章节我们实现了敌人的追击效果，也就是敌人的追击状态，而这一章节我们来实现它的巡逻状态效果</p><h1 id="实时显示巡逻范围"><a href="#实时显示巡逻范围" class="headerlink" title="实时显示巡逻范围"></a>实时显示巡逻范围</h1><p>​    由于之后会有一个记录敌人巡逻范围的变量，因此为了方便到时候的设置，这里介绍一个函数可以实时在<code>Scene</code>窗口上显示这个范围出来</p><p>​    因为这个变量是在<code>EnemyController.cs</code>代码文件里声明的，所以我们就直接在此代码文件里用这个函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Patrol State（巡逻状态的设置项）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> potralRange<span class="token punctuation">;</span><span class="token comment">//巡逻圈的半径大小</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDrawGizmosSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Gizmos<span class="token punctuation">.</span>color <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span>        Gizmos<span class="token punctuation">.</span><span class="token function">DrawWireSphere</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在敌人当前位置画一个球形范围的线</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <code>OnDrawGizmosSelected()</code>是来自于<code>MonoBehaviour</code>类的一个函数，这里代码意思是只要选中了代码所在的对象上就会绘画出一个球形的线，而这个球形的半径就是<code>potralRange</code>，例如当此值调成为2时，球形如下图所示👇</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/8c138a5dc08f44ed92287bc624597238.png" alt="1.png" style="zoom:80%;" /><p>​    当然你也可以添加其它参数的可视化效果，可以自由发挥</p><h1 id="实现敌人巡逻"><a href="#实现敌人巡逻" class="headerlink" title="实现敌人巡逻"></a>实现敌人巡逻</h1><p>​    接下来就进入正题，如何实现敌人巡逻，我们可以在它设定的巡逻范围内获得一个点，然后再让敌人走过去，反复执行这个动作，就可以让敌人巡逻起来了</p><h2 id="随机获得巡逻范围内的一个点"><a href="#随机获得巡逻范围内的一个点" class="headerlink" title="随机获得巡逻范围内的一个点"></a>随机获得巡逻范围内的一个点</h2><p>​    要获得巡逻范围内的一个点，我们就要有一个Vector3变量来记录这个点，然后每次使用随机数来改变它，所以我们创建一个函数来专门随机获得这个点的值</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Vector3</span> wayPoint<span class="token punctuation">;</span><span class="token comment">//敌人巡逻的下一个随机目标点</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取下一个巡逻的随机目标点</span>    <span class="token comment">//Y轴是控制高度的，所以不用获取，保持原来的就行</span>    <span class="token comment">//获取的范围时[-potralRange,potralRange]</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomX <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomZ <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在敌人自己本身的坐标点上进行取随机点</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//FIXME:有可能出现问题</span>    wayPoint <span class="token operator">=</span> randomPoint<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    由于Y轴是记录敌人所在的高度的，所以这里暂时不用获取随机数，保持原来效果</p><p>​    同时上面代码中给标记了一个FIXME，有可能出现一个问题，我们先放一边到时候再来发现修改</p><h2 id="修改状态切换"><a href="#修改状态切换" class="headerlink" title="修改状态切换"></a>修改状态切换</h2><p>​    获取了随机点后，我们还要回到<code>SwitchStates()</code>函数中修改一下状态的衔接</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>巡逻        isChase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不是追逐动画</span>        agent<span class="token punctuation">.</span>speed <span class="token operator">=</span> speed<span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token comment">//巡逻速度是追逐速度的一半</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>wayPoint<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果下一个巡逻点和当前人物的坐标点小于等于可移动距离则不移动</span>            isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不播放走路的动画</span>            <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个巡逻点随机数</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//满足行走条件</span>            isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//敌人动画改为走路动画</span>            agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> wayPoint<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上面就是判断到敌人为巡逻状态时要做的事情，里面还有一个if语句是用于判断如果下一个巡逻的点小于或等于导航组件可以移动的范围时就不移动，再获得下一个巡逻点</p><p>🎄而 <a href="https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent-stoppingDistance.html">stoppingDistance</a> 是<code>Nav Mesh Agent</code>组件里的一个属性，代表<code>停止距离</code>，即如果给定的目的点与当前点的距离小于这个值的话，敌人时不会进行移动的，这个值我们也可以在属性面板中进行调整</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/107272d76d03463c8012565f3e821a87.png" alt="2.png" style="zoom:80%;" /><p>​    了解到这些之后我们继续回到代码中，我们写了巡逻状态时要做的事情，那么我们该怎样判断并进入巡逻状态呢？下面我们就来写一下这些代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//...</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> isGuard<span class="token punctuation">;</span><span class="token comment">//当前敌人是否为警卫（警戒状态）</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//开始游戏时先检测是否勾选了守卫状态</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isGuard<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>        <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止开始时巡逻点是空的默认走到地图(0,0,0)位置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这里我们新建了一个公开的布尔值变量<code>isGuard</code>，可以直接在属性面板勾选，用来判断当前敌人是否为一个守卫，如果为守卫就不会进行巡逻了</p><p>​    在弄好这些之后，敌人巡逻的基本功能就实现了，现在我们就可以去试玩一下了</p><h2 id="修复一些问题"><a href="#修复一些问题" class="headerlink" title="修复一些问题"></a>修复一些问题</h2><p>​    在试玩的过程中，会出现一些问题，我们下面就来修复它们</p><h3 id="敌人巡逻的范围越来越远"><a href="#敌人巡逻的范围越来越远" class="headerlink" title="敌人巡逻的范围越来越远"></a>敌人巡逻的范围越来越远</h3><p>​    首先是敌人巡逻范围的问题，如果只依照上面的代码我们会发现敌人的巡逻范围会越来越远，这是因为取随机坐标点的代码逻辑考虑不对劲</p><p>​    我们回到上面的标有FIXME代码块中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//在敌人自己本身的坐标点上进行取随机点</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    出现问题的就是在上面这一句代码，我们取到的下一个随机目标点是基于敌人现在的位置基础上的，也就是每次取到的随机点都与现在位置相加，这就不对了，如果一直往同一个方向相加，只会导致敌人走的越来越远</p><p>​    因此这里<strong>不应该</strong><code>transform.position+xxx</code></p><p>​    </p><p>​    那么解决方案怎么样做呢？我们可以在游戏开始初始化把当前敌人所在的位置记录下来，然后每次取随机点是基于这个点来进行坐标相加的</p><p>​    同时这个坐标点也不止在巡逻状态这里用得到，我们在守卫状态下也需要这个初始坐标点，守卫状态下如果追击敌人脱战之后，我们必须让敌人回到这个初始坐标点继续守卫</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Vector3</span> puardPos<span class="token punctuation">;</span><span class="token comment">//当前敌人游戏开始时的初始位置</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span> guardPos <span class="token operator">=</span> guardPos <span class="token operator">=</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>guardPos<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>guardPos<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    按照上面的代码修改，我们就解决了这个问题</p><p>​    🎈<strong>要注意</strong>：新的坐标点的Y轴还是以敌人当前位置为基础的</p><h3 id="敌人移动卡住"><a href="#敌人移动卡住" class="headerlink" title="敌人移动卡住"></a>敌人移动卡住</h3><p>​    第二个可能遇到的问题就是可能敌人走着走着会突然给卡住，但它仍然处于移动状态，这可能是因为所获取的目标点为<strong>不可移动区域</strong>造成的，例如树木、石头所在的点</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/e5d07eb926e74385a3d3454bf171703c.png" alt="3.png" style="zoom:80%;" /><p>​    因此解决方法就是我们在获取点之后要判断一下所获得的点是否为到达的点，如果不是就再获取一遍</p><p>​    这里可以用到 <a href="https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent.html">NavMeshAgent</a> 的一个方法 <a href="https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent.SamplePathPosition.html">SamplePathPosition()</a> ，可以帮助我们来判断敌人到目标点是否可以行走，我们回到<code>GetNewWayPoint()</code>函数中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取下一个巡逻的随机目标点</span>    <span class="token comment">//Y轴是控制高度的，所以不用获取，保持原来的就行</span>    <span class="token comment">//获取的范围时[-potralRange,potralRange]</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomX <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">float</span></span> randomZ <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token operator">-</span>potralRange<span class="token punctuation">,</span>potralRange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Vector3</span> randomPoint <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>guardPos<span class="token punctuation">.</span>x<span class="token operator">+</span>randomX<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>guardPos<span class="token punctuation">.</span>z<span class="token operator">+</span>randomZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//检测下个点是否可行</span>    <span class="token class-name">NavMeshHit</span> hit<span class="token punctuation">;</span>    wayPoint <span class="token operator">=</span><span class="token comment">//如果新的目标点可以到达则赋值，否则则把敌人当前所在点赋值</span>        NavMesh<span class="token punctuation">.</span><span class="token function">SamplePosition</span><span class="token punctuation">(</span>randomPoint<span class="token punctuation">,</span><span class="token keyword">out</span> hit<span class="token punctuation">,</span>potralRange<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> hit<span class="token punctuation">.</span>position <span class="token punctuation">:</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token comment">//提供一个参考点，输出属性的网格信息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样我们就解决了敌人会卡住的问题</p><h3 id="增加敌人等待时间"><a href="#增加敌人等待时间" class="headerlink" title="增加敌人等待时间"></a>增加敌人等待时间</h3><p>​    还有一个可以完善的地方就是敌人在移动到一个新的点后，它会立即又前往下一个地点，这里可以为它增加一些等待时间</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Patrol State（巡逻状态的设置项）"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//...</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> lookAtTime<span class="token punctuation">;</span><span class="token comment">//敌人到达一个点停留的时间</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> remainLookAtTime<span class="token punctuation">;</span><span class="token comment">//还剩下的停留时间</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//脱离战斗后判断回到守卫状态还是巡逻状态</span>                enemyStates <span class="token operator">=</span> isGuard <span class="token punctuation">?</span> EnemyStates<span class="token punctuation">.</span>GUARD <span class="token punctuation">:</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//判断是否到了随机巡逻点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>wayPoint<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> agent<span class="token punctuation">.</span>stoppingDistance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果下一个巡逻点和当前人物的坐标点小于等于可移动距离则不移动</span>                isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//不播放走路的动画</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>remainLookAtTime <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果剩余等待时间大于0则继续等待</span>                    remainLookAtTime <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个巡逻点随机数</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//满足行走条件</span>                isWalk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//敌人动画改为走路动画</span>                agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> wayPoint<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//PATROL</span>    <span class="token punctuation">&#125;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetNewWayPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取下一个巡逻的随机目标点</span>    remainLookAtTime <span class="token operator">=</span> lookAtTime<span class="token punctuation">;</span><span class="token comment">//重置剩余等待时间</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上面代码中我们添加了两个变量，<code>lookAtTime</code>表示需要等待时间的长度（可供外界进行调整），<code>remainLookAtTime</code>表示当前敌人还剩余的等待时间，然后我们在<code>SwitchEnemyStates()</code>函数里的追击状态中判断敌人到达了目标点就开始逐帧递减<code>remainLookAtTime</code>，当减到小于0敌人才会开始走动，同时再一次调用<code>GetNewWayPoint()</code>时会重置<code>remainLookAtTime</code></p><p>​    🎈注意：<code>lookAtTime</code>的单位是<strong>秒</strong></p><p>​    在switch代码前面还添加了一条语句用来判断脱离战斗后敌人回到守卫状态还是巡逻状态，这可以让我们敌人更加完善</p><p>​    到这里，本章的目的就实现了，我们让敌人随机巡逻了起来，快去游戏中试试吧！</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记8--为敌人添加追击效果以及动画切换管理</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B08-%E4%B8%BA%E6%95%8C%E4%BA%BA%E6%B7%BB%E5%8A%A0%E8%BF%BD%E5%87%BB%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E5%8A%A8%E7%94%BB%E5%88%87%E6%8D%A2%E7%AE%A1%E7%90%86/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B08-%E4%B8%BA%E6%95%8C%E4%BA%BA%E6%B7%BB%E5%8A%A0%E8%BF%BD%E5%87%BB%E6%95%88%E6%9E%9C%E4%BB%A5%E5%8F%8A%E5%8A%A8%E7%94%BB%E5%88%87%E6%8D%A2%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!--终于期末考完试了，可以回到Unity上来了😃--><p>​    我们来继续完善敌人，还记得我们有个动画切换的框架代码摆在那吗？这一次我们来为敌人添加追击效果并且对不同状态下的动画切换进行管理</p><h1 id="保存修改后的素材"><a href="#保存修改后的素材" class="headerlink" title="保存修改后的素材"></a>保存修改后的素材</h1><p>​    在进行切换动画之前，我们先将上一次修改后的主角和史莱姆保存为一个素材对象，这方便以后我们的使用，特别是史莱姆，将其保存为素材对象后就可以批量创建敌人了</p><h2 id="保存主角为素材对象"><a href="#保存主角为素材对象" class="headerlink" title="保存主角为素材对象"></a>保存主角为素材对象</h2><p>​    由于我们的主角小狗在之前就保存为素材了，而在上一章我们为其添加了一个胶囊碰撞体，这里我们只用将胶囊碰撞体保存一下就行了</p><p>​    在<code>Hierarchy</code>视图选择我们的小人<code>Player</code>，然后找到胶囊碰撞体组件，右键它，按下图找到<code>Added Component-&gt;Apply to Prefab &#39;Player&#39;</code>，点击它就可以将新增加的胶囊碰撞体应用在原本的素材上了</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/f15d609363c14d13b3e1a79616db15e6.png" alt="1.png" style="zoom:80%;" /><h2 id="保存史莱姆敌人为素材对象"><a href="#保存史莱姆敌人为素材对象" class="headerlink" title="保存史莱姆敌人为素材对象"></a>保存史莱姆敌人为素材对象</h2><p>​    保存史莱姆也是一个简单的事情，只用在<code>Hierarchy</code>视图下将史莱姆拖拽到到<code>Prefab-&gt;Characters</code>文件夹下就行了，注意在弹出的窗口中选择<code>Original Prefab</code></p><img src="https://p3-tt.byteimg.com/origin/pgc-image/e4d3d1be8f5a4a63aae9fa7f85938fdb.png" alt="2.png" style="zoom:80%;" /><h1 id="思考如何敌人的追击效果"><a href="#思考如何敌人的追击效果" class="headerlink" title="思考如何敌人的追击效果"></a>思考如何敌人的追击效果</h1><p>​    对于敌人追击我们人物，简而言之就是敌人的移动目标是我们的人物，我们可以在原有的代码基础上来实现追击效果</p><p>​    打开我们的<code>EnemyController.cs</code>代码文件，我们可以先在类中添加一个<code>attackTarget</code>的变量，这个代表着我们敌人追击的目标，并在先前写的<code>FoundPlayer</code>函数里对其赋予目标（即将在敌人一定范围找到人物时，追击目标为敌人）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">GameObject</span> attackTarget<span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Collider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> colliders <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">OverlapSphere</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>sightRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接受一个圆点，一个半径的参数，返回的是碰撞体数组</span>                <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> target <span class="token keyword">in</span> colliders<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//循环碰撞体数组，逐个查找</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//当前循环到的碰撞体的标签为Player就代表找到人物了</span>                attackTarget<span class="token operator">=</span>target<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    做好上面这些后，我们要回到<code>SwitchEnemyStates</code>函数里进行完善Switch框架</p><p>​    在追击中，我们要思考一下在这过程有哪些行为，首先是追击敌人，追击到了的话会进行攻击，如果目标脱离了追击范围则应该回到上一个状态，同时这整个流程都要有动画的切换。以下代码中便用了TODO来描述要做的事情</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//...</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击                <span class="token comment">//TODO:追击Player</span>                <span class="token comment">//TODO:在攻击范围攻击</span>                <span class="token comment">//TODO:配合动画</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//TODO:拉脱回上一个状态</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//人物进到敌人的范围会给追击</span>                    agent<span class="token punctuation">.</span>destination<span class="token operator">=</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    写了以上的代码后，当我们的人物靠近敌人时就被追击了，我们还可以给不同的状态赋予不同的速度，如守卫状态移动速度慢一点，而追击速度快一点等等</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> speed<span class="token punctuation">;</span><span class="token comment">//敌人的速度</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        speed<span class="token operator">=</span>agent<span class="token punctuation">.</span>speed<span class="token punctuation">;</span><span class="token comment">//在初始化时速度初始化为原来默认的速度</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    之后我们就可以在<code>Switch</code>中不同状态下给定不同的速度值了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//举个栗子</span><span class="token comment">//case xxx:</span>speed <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>agent<span class="token punctuation">.</span>speed<span class="token operator">=</span>speed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="给敌人添加动画"><a href="#给敌人添加动画" class="headerlink" title="给敌人添加动画"></a>给敌人添加动画</h1><h2 id="一些要注意的地方"><a href="#一些要注意的地方" class="headerlink" title="一些要注意的地方"></a>一些要注意的地方</h2><p>​    上面的代码我们打好后先放在一边，先来看看史莱姆的动画如何添加</p><p>​    和之前的小狗一样，我们可以在素材的文件夹下预览动画的效果</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/cbd42713bc444c18836fedb8b0b42622.png" alt="3.png" style="zoom:80%;" /><p>​    上图中可以看到有两个<code>Idle（闲置）</code>的动画效果，其中的<code>IdleBattle</code>是在攻击玩家中间CD时间时的闲置动作，而<code>IdleNormal</code>则是在一般闲置状态下的闲置效果，这里要注意区分</p><p>​    知道这些后，我们就可以再次使用动画控制器来管理动画的切换了</p><h2 id="使用动画管理器来管理动画"><a href="#使用动画管理器来管理动画" class="headerlink" title="使用动画管理器来管理动画"></a>使用动画管理器来管理动画</h2><p>​    首先在<code>Animations</code>文件夹下新建一个<code>Animator Controller</code>专门用来管理史莱姆的动画，这里我将它命名为<code>Enemy _Slime</code>，🎈记住创建好后要拖拽到史莱姆的属性面板上应用该Animator Controller</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/7fbb2f64cba8440f93954e02b86e2f50.png" alt="4.png" style="zoom:80%;" /><p>​    接着双击打开他进入动画管理器</p><p>​    因为敌人有多种状态，所以我们要考虑如何来规划这些动画。而这里则可以使用不同的<code>Layer</code>来实现不同的状态</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/d35a90c16257478d823a52b598c87578.png" alt="5.png" style="zoom:80%;" /><center>可以在不同的Layer中实现不同状态的动画</center><h3 id="Base-Layer"><a href="#Base-Layer" class="headerlink" title="Base Layer"></a>Base Layer</h3><p>​    刚开始我们只用到<code>Base Layer</code>，其它的layer我们之后再创建。而在最开始的<code>Base Layer</code>当中，我们完成最基本的状态：普通闲置和行走（巡逻状态）</p><p>​    如下图找到对应的动画并拖拽到动画控制器中，并进行状态转移的设置</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/138c62781a3b47deb564aacdc3bd0e6f.png" alt="6.png" style="zoom:80%;" /><p>​    那么闲置状态切换到行走状态的条件是什么呢？在之前我们控制小人行走的动画切换是通过鼠标点击的方式来判断，而这里敌人的状态切换可以看做是一个逻辑状态，因此我们可以建立一个布尔变量来控制它们的切换，这里命名为<code>Walk</code></p><img src="https://p5-tt.byteimg.com/origin/pgc-image/fc09aba486814ef9942061481e2d610e.png" alt="7.png" style="zoom:80%;" /><p>​    然后填写动画之间的切换条件</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/9bfd3f46132a4c938c0dddaf775ab53b.png" alt="8.png" style="zoom:80%;" /><center>两个切换都要（一个为true，一个为false）</center><p>​    </p><h3 id="Attack-Layer（实现追击）"><a href="#Attack-Layer（实现追击）" class="headerlink" title="Attack Layer（实现追击）"></a>Attack Layer（实现追击）</h3><p>​    接下来我们新建一个新的Layer，并将其命名为<code>Attack Layer</code>，我们的追击动画切换就在这里面来实现</p><p>​    新建好后我们要设置一下这个Layer的权重值，这里要调整<code>Weight</code>值为最大<code>1</code>，表示在动画触发的时候是完全覆盖原来的Base Layer里的动画，如果不是1的话就相当于是叠加原来的动画，两者进行混合</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/f5282b22821c4d0b919674b2c68cca85.png" alt="9.png" style="zoom:80%;" /><p>​    那么我们是如何知道上一个状态是怎么切换到当前的Layer呢？我们可以在新建的Layer中创建一个<code>Empty State</code>并将它命名为<code>Base State</code>，这个空的State可以代表我们之前任意一个Layer，当满足条件的时候它就会切换过来并进一步切换动画</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/ac40128c56244e46893c469a70178825.png" alt="10.png" style="zoom:80%;" /><p>​    切换过来<code>Attack Layer</code>的时候我们最先要进入的是一个闲置状态，再加上这是一个专门用于追击的Layer，因此我们可以使用<code>Idle_Battle</code>这个动画</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/38b8683f9e2644ab8d281f80bcdd34fd.png" alt="11.png" style="zoom:80%;" /><p>​    同样我们切换条件也是可以建立一个<code>布尔值</code>变量来控制，这里取名为<code>Chase</code></p><p>​    上面的是一个敌人攻击空当时CD动画，当然我们还要有一个追的动画，也是要靠一个<code>布尔值</code>变量来控制，如下图</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/43a30493ed3d4be0a6204f23af878588.png" alt="12.png" style="zoom:80%;" /><p>​    这里我把追击的动画（<code>RunFWD</code>）加了上去，并用一个新的布尔值<code>Follow</code>来作为它与<code>IdleBattle</code>之间的切换判断条件</p><p>​    🎈注意将三个布尔值都应用到对应的动画切换判断上去哦！</p><p>​    这样一来就有了一个逻辑：如果敌人发现了我们的控制的小人，并且两者距离大于敌人的攻击距离，敌人则会进行追击我们的小人，当靠近后则会进行攻击CD状态，等到下一个攻击到来（攻击动画效果这里还没实现）</p><h2 id="使用代码配合动画切换"><a href="#使用代码配合动画切换" class="headerlink" title="使用代码配合动画切换"></a>使用代码配合动画切换</h2><p>​    完成动画管理器中的前置工作后，我们就可以着手来写代码从而配合我们的动画切换了</p><p>​    打开<code>EnemyController.cs</code>，首先要获取<code>Animator</code>组件的信息</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Animator</span> anim<span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>        anim <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    然后要声明三个布尔变量对照着动画管理器的那三个布尔变量（Walk、Chase、Follow）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span><span class="token comment">//动画控制的三个布尔值变量</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isWalk<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isChase<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isFollow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这三个变量是用来实时更新动画控制器里的布尔变量的，因此我们要使用一个函数，并将它放在<code>Update()</code>里边</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>        <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//实时更新Animator里面史莱姆的三个布尔值</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Walk"</span><span class="token punctuation">,</span>isWalk<span class="token punctuation">)</span><span class="token punctuation">;</span>        anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Chase"</span><span class="token punctuation">,</span>isChase<span class="token punctuation">)</span><span class="token punctuation">;</span>        anim<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token string">"Follow"</span><span class="token punctuation">,</span>isFollow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样一来，我们在其它函数里更改了这三个is布尔值的话，他们就可以实时同步到Animator里面了</p><p>​    紧接着我们回到<code>SwitchEnemyStates()</code>函数里面修改一下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//...</span><span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//...</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>追击<span class="token comment">//TODO:追击Player</span>    <span class="token comment">//TODO:在攻击范围攻击</span>            <span class="token comment">//TODO:配合动画</span>        isWalk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//追击时就不是走路了</span>        isChase <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//切换到追击的Layer层动画</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//TODO:拉脱回上一个状态</span>        isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        isFollow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//找到人物就跑着追</span>      agent<span class="token punctuation">.</span>speed<span class="token operator">=</span>speed<span class="token punctuation">;</span>        <span class="token comment">//人物进到敌人的范围会给追击</span>        agent<span class="token punctuation">.</span>destination<span class="token operator">=</span>attackTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    到这里我们就实现了敌人追击我们的状态啦，快去游戏中试一下吧</p><h1 id="解决敌人停下来有延迟的问题"><a href="#解决敌人停下来有延迟的问题" class="headerlink" title="解决敌人停下来有延迟的问题"></a>解决敌人停下来有延迟的问题</h1><p>​    试过游戏后我们可能会发现一个问题，就是当我们人物脱离敌人追击范围时敌人会再走一小段路才会停下来，这是因为我们没有及时修改敌人移动的目的地，也就是<code>agent.destination</code>，当脱离追击范围后，敌人的目的地还在后面一小段路，从而导致了延迟的效果</p><p>​    这里修改它也很简单，在上面代码添加一条语句就可以了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//...</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//拉脱回上一个状态</span>    agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//人物脱离追击范围后，敌人停在当前位置</span>    isFollow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样，敌人在脱离追击状态时就会立刻停在当前位置了</p><p>​    🎉到这里，本章我们就成功实现了敌人的一个简单的追击状态及动画切换管理，下一章我们将更加完善敌人其它一些状态，例如巡逻效果等</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记7--修改相机移动视角以及添加敌人范围检测</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B07-%E4%BF%AE%E6%94%B9%E7%9B%B8%E6%9C%BA%E7%A7%BB%E5%8A%A8%E8%A7%86%E8%A7%92%E4%BB%A5%E5%8F%8A%E6%B7%BB%E5%8A%A0%E6%95%8C%E4%BA%BA%E8%8C%83%E5%9B%B4%E6%A3%80%E6%B5%8B/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B07-%E4%BF%AE%E6%94%B9%E7%9B%B8%E6%9C%BA%E7%A7%BB%E5%8A%A8%E8%A7%86%E8%A7%92%E4%BB%A5%E5%8F%8A%E6%B7%BB%E5%8A%A0%E6%95%8C%E4%BA%BA%E8%8C%83%E5%9B%B4%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>​    这一章我们将对项目做一些调整，包括：设置自由移动视角的相机、检测人物是否到达敌人附近、切换到追击模式等。以后我们可能会多次在项目开发途中停下来做一些小小的优化之类的，这些都是很有必要的。</p><h1 id="将相机改成可自由移动视角"><a href="#将相机改成可自由移动视角" class="headerlink" title="将相机改成可自由移动视角"></a>将相机改成可自由移动视角</h1><p>​    到目前为止我们的相机虽然都是可以跟随人物移动的，但是它视角是固定的，不能自由地去移动视角。如果你想更改成自由视角的相机的话，那么就现在来实现吧！</p><p>​    这里最主要的就是将<code>Cinemachine</code>插件中的<code>Virtual Camera</code>换成<code>FreeLook Camera</code></p><p>​    因此我们选择原来创建的<code>Virtual Camera</code>，然后将它关闭（如果你已经决定不想使用可以直接删除），具体关闭方法就是取消下图所示的勾勾</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/be709270a95a408ca723e83e24f0df33.png" alt="1.png" style="zoom:80%;" /><p>​    凡是关闭后的对象在列表中都会变成淡灰色的</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/076433cd57354d968359194bacc2c638.png" alt="2.png" style="zoom:80%;" /><p>​    之后我们再选中主摄像机，<code>Main Camera</code>，在Unity上方菜单中选择<code>Cinemachine</code>插件列表菜单项👉之后再选择如图第二个选项<code>FreeLook Camera</code></p><img src="https://p3.toutiaoimg.com/origin/pgc-image/487625f3bdce4f8db3115e37d2e53046.png" alt="3.png" style="zoom:80%;" /><p>​    创建完毕后，我们将新的相机和旧的相机都命名一下，防止搞混。</p><p>​    我们同样要来选择一下相机的跟踪对象和观察对象，我们把控制人物<code>Player</code>拖进去</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/586146b0a6ab4820958b1903848901a8.png" alt="4.png" style="zoom:80%;" /><p>​    我们在窗口中可以看到摄像机旁边有上中下三个红色圈圈，同时还有一条弧线包裹住它们，这是代表着我们相机可以在这三个维度里面自由旋转切换摄像机角度，同时可以进行上下角度的切换，我们可以根据喜好来调整这几个圈圈</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/7dacd6ce8f324399aa660d3d593e8e2c.png" alt="5.png" style="zoom:80%;" /><p>​    然后就是如何来控制摄像机移动了，我们在<code>FreeLook Camera</code>的属性面板中可以看到有个<code>Axis Control</code>的项，在这里我们可以看到控制Y轴移动的是<code>Mouse Y</code>，控制X轴移动的是<code>Mouse X</code>，即默认情况是鼠标移动来控制，我们可以在此修改它</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/d5c98a365df147d79a90ce4fa823e67e.png" alt="6.png" style="zoom:80%;" /><p>​    我们打开<code>Project Setting...</code>，里面有个<code>Input Manager</code>，在这里就可以修改具体关于<code>Axis</code>按键的设置</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/3d0286059bc547ccabd4c79efcf82bef.png" alt="7.png" style="zoom:80%;" /><p>​    在Mouse Y下面有一个<code>Mouse ScrollWheel</code>，这个就是鼠标的滚轮，可以利用这个来进行视角的拉远和拉近</p><p>​    还有一个<code>Horizontal</code>的选项，这个可以来控制视角左右移动，并且它可以利用我们提供的自定义按键，如：A和D，只需要在<code>Negative Button</code>和<code>Positive Button</code>分别填入你想要的按键</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/20c6e5d985d34974b7e52ecdafb2ff24.png" alt="8.png" style="zoom:80%;" /><p>​    自定义好按键之后，我们要把具体的<code>Axes</code>名称复制到摄像机属性面板中，如果测试的时候发现视角移动是反向的可以把<code>Invert</code>可选框的勾勾去掉，转向速度太慢可以修改<code>Speed</code>里的数值</p><p>​    🎈在调试之前可以把<code>Save During Play</code>选上，这样便可以点<code>Game</code>游玩时边玩边调整，并且修改的数据可以保存下来</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/1dd06a7a2f0e49d39f3622ffa4bead06.png" alt="9.png" style="zoom:80%;" /><p>​    这样，我们的摄像机视角控制就自定义好了</p><p>​    如果发现摄像机离人物太近，我们可以修改以下的参数</p><p>​    <code>Orbits</code>项分别有三个<code>Rig</code>的修改参数框，我们可以在这修改</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/54045622e4a64873846e612a7e679804.png" alt="10.png" style="zoom:80%;" /><p>​    这里我的参数修改如下</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/eeb5b826c51240e3bcf20c7f1ae81ac3.png" alt="11.png" style="zoom:80%;" /><p>​    到这我们的自由视角相机就设置好了</p><h1 id="检测人物是否在敌人附近"><a href="#检测人物是否在敌人附近" class="headerlink" title="检测人物是否在敌人附近"></a>检测人物是否在敌人附近</h1><p>​    接下来我们来实现让敌人检测人物是否在它自身的附近</p><p>​    我们打开之前已经写了一点框架的<code>EnemyController.cs</code>代码文件，先修改一下前面声明的<code>enemyStates</code>，将其改为<code>private</code>，因为这个敌人状态是靠后面代码自动改变的，不需要手动来弄，没有必要设成public</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">EnemyStates</span> enemyStates<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    </p><p>​    然后我们可以弄一个变量，表示敌人的可视范围</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Basic Settings"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> sightRadius<span class="token punctuation">;</span><span class="token comment">//敌人的可视范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    这里我用了一个<code>[Header(&quot;Basic Settings&quot;)]</code>，这样做可以在对象的属性面板有一个划分的作用，以后我们都可以这样来划分一些代码公开给外界的设置项👇</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/6c60b7836bf74b1fb0671f9c2af7253f.png" alt="12.png" style="zoom:80%;" /><p>​    然后就到了我们关键的一个部分，写一个检测敌人附近是否有人物的函数，这里是利用了 <a href="https://docs.unity3d.com/ScriptReference/Physics.OverlapSphere.html">Physics.OverlapSphere</a> 的方法，这个函数检测了一个球体范围内是否有碰撞体，因此我们可以为人物添加一个碰撞体再结合这个方法来实现</p><p>​    我们先来写实现代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> colliders <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">OverlapSphere</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>sightRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//接受一个圆点，一个半径的参数，返回的是碰撞体数组</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> target <span class="token keyword">in</span> colliders<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//循环碰撞体数组，逐个查找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Player"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//当前循环到的碰撞体的标签为Player就代表找到人物了</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    因为<code>OverlapSphere</code>返回的是碰撞体数组，我们之后只要在这数组中遍历查找是否有标签为<code>Player</code>的对象就行了</p><p>​    然后修改一下之前的<code>SwitchEnemyStates</code>函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果发现player 切换到CHASE</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            enemyStates <span class="token operator">=</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">;</span>            Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"敌人&#123;0&#125;发现了玩家"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试代码</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    写完代码后别忘了我们要为人物添加一个碰撞体，这里我选用的就是胶囊碰撞体<code>Capsule Collider</code>，然后调整一下胶囊的大小</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/31bf56dfd4ae4f998acbbc3320e577de.png" alt="13.png" style="zoom:80%;" /><img src="https://p3.toutiaoimg.com/origin/pgc-image/12273ccf82704bbdb3a69d8ff64a940c.png" alt="15.png" style="zoom:80%;" /><p>​    最后再把人物的标签设为<code>Player</code>，然后把之前设的公开变量<code>Sight Radius</code>视野范围赋予一个值</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/5fa32863fb39401ba974cd2e18443420.png" alt="14.png" style="zoom:80%;" /><img src="https://p3.toutiaoimg.com/origin/pgc-image/3892abc4f74f4700b0078adcbe3aa7ac.png" alt="16.png" style="zoom:80%;" /><p>​    这样我们就完成了敌人范围检测人物的功能了！</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记6-创建敌人</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B06-%E5%88%9B%E5%BB%BA%E6%95%8C%E4%BA%BA/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B06-%E5%88%9B%E5%BB%BA%E6%95%8C%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>​     在本章节中，我们来学习如何创建我们的第一个敌人并添加一些关于移向敌人的代码和攻击动画，从而使我们的游戏更加完善</p><h1 id="下载并安装敌人素材"><a href="#下载并安装敌人素材" class="headerlink" title="下载并安装敌人素材"></a>下载并安装敌人素材</h1><p>​    我们今天要下载的敌人素材名字是<strong>RPG Monster Duo PBR Polyart</strong>，大家可以去 Assert Store 上下载下来</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/06c4964d32aa45fa89ebb17df55275cf.jpg" alt="1.1.jpg" style="zoom:80%;" /><p>​    同样的，下载完后我们选择 <code>Import</code> 加载进我们的项目里，再把新素材的文件夹分类放好</p><p>​    我们可以预览一下刚下好的素材，但是发现是没有贴图的，这是因为我们还没把素材升级到URP，我们将素材升级一下就可以显示正常了，还记得如何将素材升级URP吗？不记得的话可以翻看前面的文章哦</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/9190e65818cf49a5ba851b0aabec2db9.png" alt="2.png" style="zoom:80%;" /><h1 id="布置并设置敌人的基本属性和状态"><a href="#布置并设置敌人的基本属性和状态" class="headerlink" title="布置并设置敌人的基本属性和状态"></a>布置并设置敌人的基本属性和状态</h1><h2 id="使用代码约束的方式来添加组件"><a href="#使用代码约束的方式来添加组件" class="headerlink" title="使用代码约束的方式来添加组件"></a>使用代码约束的方式来添加组件</h2><p>安装好敌人素材后，我们就可以把敌人拖到地图中了，将它放到你喜欢的位置之后，就可以着手来修改一下它的基本属性了</p><p>​    从这里开始我们要长远考虑，我们以后需要添加的敌人会有很多，而这些敌人都需要挂载一些相同的组件，我们需要有一种更好的方法来为以后敌人一键添加这些组件，而不是一个一个来添加，那么我们就开始吧</p><p>​    首先在下图的<code>Scripts👉Charcters</code>文件夹位置新建一个 C# 代码文件，可以命名为 <strong>EnemyController</strong>，然后打开编辑</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/30321fb536f94b068f6b998b8e2b663e.png" alt="3.png" style="zoom:80%;" /><p>​    这个时候我们就可以来想一下，我们一般敌人需要哪些组件呢？首先想到的是智能导航 <code>NavMeshAgent</code>，那我们要确保它敌人对象肯定挂载这个组件的话，我们可以使用以下代码来约束它</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequireComponent</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">NavMeshAgent</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    把<code>[RequireComponent()]</code>这一个约束句子放在代码文件开头的位置，就可以实现当你把代码作为一个组件添加到敌人或其它Unity对象中时，自动添加给约束的组件了</p><p>​    按上面代码来举栗子，当我把包含上面代码的文件作为组件添加到我们的敌人中时，会自动附带一个<code>NavMeshAgent</code>组件了</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/ff7fb226a3524c7e8aec1e566b2a0e43.png" alt="4.png" style="zoom:80%;" /><p>​    而且当你试图删除<code>NavMeshAgent</code>组件时Unity还会发出警告提示不能删除</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/85dda0a8a4a2418cb95ff0402e2a5292.png" alt="5.png" style="zoom:80%;" /><p>​    所以当你的代码需要用到一定的组件在多个物体上，你就可以运用这种方式来确保你的物体包含了这些组件，以致于你的代码能够正常运行</p><p>​    到这里，我们就可以在<code>Awake()</code>函数里面获取我们的组件了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequireComponent</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">NavMeshAgent</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NavMeshAgent</span> agent<span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h2 id="设置敌人基本属性"><a href="#设置敌人基本属性" class="headerlink" title="设置敌人基本属性"></a>设置敌人基本属性</h2><p>​    接下来我们设置一下敌人的基本属性，先来看看<code>NavMeshAgent</code>的信息</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/8c5a62e350ad41d689b6fd0a38cfd104.png" alt="6.png" style="zoom:80%;" /><p>​    这里我修改了一下这个敌人的速度<code>Speed</code>，因为速度太快会导致我们的主角无法摆脱战斗；同样修改了的还有转角速度<code>Angular Speed</code>和高度<code>Height</code>，这些都可以自己尝试来调整到自己喜欢的数值</p><p>​    其次，我们还要来添加一个碰撞体组件<code>Collider</code>，我们要借用这个碰撞体来判断我们鼠标的射线是否点击到了我们的敌人，如果没有碰撞体我们是没有办法来判断是否击中的。</p><p>​    我们可以根据自己喜好和需求来添加不同的碰撞体组件，我这里为了简单就使用<code>BoxCollider</code></p><img src="https://p3.toutiaoimg.com/origin/pgc-image/11640e3d6b6048f282feb4622684ece2.png" alt="7.png" style="zoom:80%;" /><p>​    添加好调整一下方体的位置，使方框刚好包含敌人</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/3f63124e04c9414a94edbdfc62310fb5.png" alt="8.png" style="zoom:80%;" /><p>​    其次，我们还要调整一下我们敌人的图层，以防被其它东西挡住了看不见。</p><p>​    和之前剔除人物遮挡一样步骤，我们只需要添加一个图层并在<code>URP</code>文件中的<code>Layer Mask</code>下拉列表（可以多选）勾选我们的新图层就行了</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/eb0776b3a1324e76919f62b6201061ca.png" alt="10.png" style="zoom:80%;" /><img src="https://p5.toutiaoimg.com/origin/pgc-image/c1efe22bdbce4eeb839e358479ad7702.png" alt="11.png" style="zoom:80%;" /><p>​    图层加了之后也别忘了也要新建一个<code>Enemy</code>的标签</p><h2 id="编写敌人的状态"><a href="#编写敌人的状态" class="headerlink" title="编写敌人的状态"></a>编写敌人的状态</h2><p>​    首先我们要思考一下敌人会有多少种状态呢？这里我可以先想到有：警戒、巡逻、追击主角、死亡 这四种状态，当然你也可以根据你所喜好的状态去设计</p><p>​    我们在<code>EnemyController.cs</code>代码文件中添加下面这一行枚举代码，<u>注意是打在类的外边作为全局形式</u></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnemyStates</span><span class="token punctuation">&#123;</span>GUARD<span class="token punctuation">,</span>PATROL<span class="token punctuation">,</span>CHASE<span class="token punctuation">,</span>DEAD<span class="token punctuation">&#125;</span><span class="token comment">//敌人的四种状态，警戒、巡逻、追击、死亡</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    然后我们再在类中声明变量</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">EnemyStates</span> enemyStates<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    这个时候我们返回Unity中就可以在敌人对象中代码组件部分看到多了个<code>Enemy States</code>的下拉菜单了</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/09d6536220f44ff2919ed22b29442031.png" alt="9.png" style="zoom:80%;" /><p>​    这里我们可以利用较为简单的状态切换方式—Switch切换，当然还可以选择复杂点的状态机切换方式，这里暂时不使用先，打开我们的<code>EnemyController.cs</code>代码文件，写一个基本的Switch判断框架</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchEnemyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>enemyStates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>GUARD<span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>PATROL<span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>CHASE<span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> EnemyStates<span class="token punctuation">.</span>DEAD<span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    以上的框架编写好后我们先放一边到时候再来补充</p><h1 id="添加人物移动到敌人的方法"><a href="#添加人物移动到敌人的方法" class="headerlink" title="添加人物移动到敌人的方法"></a>添加人物移动到敌人的方法</h1><h2 id="添加事件"><a href="#添加事件" class="headerlink" title="添加事件"></a>添加事件</h2><p>​    接下来又要回到我们的<code>MouseManager.cs</code>代码文件中，我们要添加一个新的事件，来代表当我们鼠标点击敌人时的事件</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">></span></span> OnEnemyClicked<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    这样我们事件发生的时候传递的就是<code>GameObject</code>类型，也就是我们鼠标点击的敌人了，这样做我们就可以获得更多的敌人相关信息，比如坐标、名字等</p><p>​    然后我们再把当前代码文件下的<code>MouseControl</code>函数修改一下，添加一些代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Enemy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            OnEnemyClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里传递的是射线碰撞到的对象，也就是敌人了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    接下来转到<code>PlayerController.cs</code>代码文件来配置一下角色点击到敌人的反应</p><p>​    我们在代码文件的类下添加下面的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">GameObject</span> attactTarget<span class="token punctuation">;</span><span class="token comment">//为了编写点击敌人函数方便而声明的变量</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> lastAttactTime<span class="token punctuation">;</span><span class="token comment">//一个关于上一次攻击时间的变量，简单的计时器，一旦超过所给的CD时间就可以再攻击一次</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span><span class="token comment">//普通移动</span>        MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnEnemyClicked<span class="token operator">+=</span>EventAttact<span class="token punctuation">;</span><span class="token comment">//我们点击了攻击目标，即敌人</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这里就可以填写点击敌人后需要的操作了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h2 id="利用协程的方式来写人物移向敌人"><a href="#利用协程的方式来写人物移向敌人" class="headerlink" title="利用协程的方式来写人物移向敌人"></a>利用协程的方式来写人物移向敌人</h2><p>​    那么我们就要来思考<code>EventAttact</code>在函数里要实现什么了</p><p>​    首先我们来实现小人跑到敌人的面前，这里就要判断小人是否到了可以攻击敌人的射程，如果没有到的话就要继续移动，而这就要用到<code>协程</code>的方式来实现，具体关于什么是协程大家可以自行搜寻资料</p><p>​    我们在上面代码的基础下，再写一个关于协程的函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这里用到的IEnumerator就是一个协程</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    同时因为我们即将要用到上面声明过的<code>attactTarget（GameObject类型）</code>我们还要对原先的函数进行一些修改</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>        attact <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    现在我们就可以正式来编写<code>MoveToAttackTarget</code>函数了</p><p>​    因为要实现小人跑到敌人面前，那么就先要实现小人会转向我们的目标，这样我们就可以用下面这行代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//因为这个代码文件是作为组件安在小人对象上的，因此前面this.transform获取的是小人的transform</span>    <span class="token comment">//transform自带的LookAt()函数就可以实现小人的转向</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    接着，我们可以写一个循环，当小人与敌人的距离大于所给定的<code>攻击距离</code>（这里暂时定为1，到时候可以更改，甚至可以根据武器种类不同而给定不同的值）时，小人就不断地向敌人靠近（之所以要不断循环判断，是因为敌人可能处在巡逻的状态，每一帧的位置都不一样，因此要不断更新目的地）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//取消人物的停止状态</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span class="token comment">//小人的目的地是敌人</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//下一帧再执行循环判断</span>    <span class="token punctuation">&#125;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//人物到达敌人面前停下来</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这个方法在while循环前后都用到了<code>agent.isStopped</code>，当它为<code>true</code>能够让人物停止，而<code>false</code>时代表没停止</p><p>​    打完上面的代码，我们还要回到<code>EventAttact</code>添加一句代码从而调用协程</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventAttact</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果鼠标点击的目标不为空，或者点击的敌人不是属于死亡状态</span>        attactTarget <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样我们就可以初步实现小人向敌人移动，并在移动的时候不停地来判断是否到达攻击距离了</p><h2 id="最后的修改"><a href="#最后的修改" class="headerlink" title="最后的修改"></a>最后的修改</h2><p>​    但是我们会发现一个Bug，就是在往敌人方向移动的过程中我们是无法取消移动或移向新的目标地点的，这是因为我们在协程代码的循环并没有判断到停止指令，因此我们来完善一下</p><p>​    我们可以在移动方法<code>MoveToTarget</code>中添加代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveToTarget</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//解决攻击完后无法移动</span>        <span class="token function">StopAllCoroutines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//停止所有的协程</span>        agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这个<code>StopAllCoroutines()</code>方法可以将所有进行中的协程停止，就可以实现当我们在移向敌人的过程中，点击了其它位置就能中断移向敌人并移动到新的目的地了</p><p>​    同时上面还有一行<code>agent.isStopped = false</code>，这是为了防止我们攻击完敌人后处于人物停止状态而导致无法移动</p><h1 id="添加一下攻击动画和攻击冷却时间"><a href="#添加一下攻击动画和攻击冷却时间" class="headerlink" title="添加一下攻击动画和攻击冷却时间"></a>添加一下攻击动画和攻击冷却时间</h1><h2 id="添加攻击敌人的动画"><a href="#添加攻击敌人的动画" class="headerlink" title="添加攻击敌人的动画"></a>添加攻击敌人的动画</h2><p>​    我们来添加一下人物攻击敌人的动画吧，打开我们人物<code>Player</code>的动画<code>Animation</code>修改动画</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/895243b835bf4d71a0f6c9eb1e871794.png" alt="12.png" style="zoom:80%;" /><p>​    先新建一个<code>Trigger</code>类型的变量，命名为<code>Attack</code></p><img src="https://p9.toutiaoimg.com/origin/pgc-image/c3199d9921284b15b414308b04f3e837.png" alt="13.png" style="zoom:80%;" /><p>​    然后我们从人物素材包中找到攻击动画，再把该动画拖出来（这里我用的是<code>Attack01</code>）</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/171d1f9a693d4ce090172252c58f7825.png" alt="14.png" style="zoom:80%;" /><p>​    拖出来后我们将其重命名节点为<code>Attack Base</code>，然后与普通动作节点建立来回两条切换的线路</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/4251a0aadfe145dd8e29234f9c0cb7f4.png" alt="15.png" style="zoom:80%;" /><p>​    紧接着，我们设置一下普通动画切换到攻击动画的设置，由于我们是当<code>Attack</code>变量触发就会进入攻击动画的，因此不需要退出时间</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/d09bbe1e30774774a22d75da1fa8c35d.png" alt="16.png" style="zoom:80%;" /><p>​    同时还要注意切换条件是变量<code>Attack</code>给触发就进行切换</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/9e975d5f4a0140aaa81400ea62bfd6c6.png" alt="16.5.png" style="zoom:80%;" /><p>​    然后是攻击动画切换回普通动画的设置，这里我们想攻击动画播放完再切换回去，因此退出动画可以设置为1，同时过渡动画可以按自己喜好自行设置</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/d09bbe1e30774774a22d75da1fa8c35d.png" alt="16.png" style="zoom:80%;" /><p>​    动画建立好后，我们的动画触发跟着冷却时间一起设置</p><h2 id="添加攻击冷却时间"><a href="#添加攻击冷却时间" class="headerlink" title="添加攻击冷却时间"></a>添加攻击冷却时间</h2><p>​    还记得前面声明的<code>lastAttactTime</code>变量吗？这里就是用到它的时候，延续着上边协程函数，我们的冷却时间代码和动画触发代码都在这里编写</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//当人物到达可以攻击敌人的距离后</span><span class="token keyword">if</span><span class="token punctuation">(</span>lastAttactTime<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    animator<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发攻击动画</span>    lastAttactTime <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token comment">//重置冷却时间</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    把这一段代码放在原来的协程函数就变成</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">MoveToAttackTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">,</span>attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较人物和敌人的距离是否大于0攻击距离，Distance()可以比较两个Vector3距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> attactTarget<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    agent<span class="token punctuation">.</span>isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//攻击动画和CD都在下面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lastAttactTime<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        animator<span class="token punctuation">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"Attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发攻击动画</span>        lastAttactTime <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token comment">//重置冷却时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    我们这里写到了重置冷却时间，但这个时间肯定要有一个递减的过程的，那我们就要找个地方来让它递减，这里<code>Update</code>是一个不错的选择</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">SwitchPlyerAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastAttactTime <span class="token operator">-=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span><span class="token comment">//递减去每一帧之间的时间</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    这样，一个冷却时间的效果还有攻击动画就完成啦！</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记5--剔除人物的遮挡</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B05-%E5%89%94%E9%99%A4%E4%BA%BA%E7%89%A9%E7%9A%84%E9%81%AE%E6%8C%A1/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B05-%E5%89%94%E9%99%A4%E4%BA%BA%E7%89%A9%E7%9A%84%E9%81%AE%E6%8C%A1/</url>
      
        <content type="html"><![CDATA[<p>​    我们发现在移动到一些物体（比如说树）后面的时候，人物就会给遮挡住了，那么有什么办法可以剔除掉这个遮挡呢？可以参考一些游戏，大部分游戏在移动到遮挡物后面时会把人物的轮廓显示出来，这个章节我们就来实现这种效果。</p><h1 id="利用-Shader-Graph（着色器可视化编辑器）剔除遮挡"><a href="#利用-Shader-Graph（着色器可视化编辑器）剔除遮挡" class="headerlink" title="利用 Shader Graph（着色器可视化编辑器）剔除遮挡"></a>利用 Shader Graph（着色器可视化编辑器）剔除遮挡</h1><h2 id="创建一个Shader"><a href="#创建一个Shader" class="headerlink" title="创建一个Shader"></a>创建一个Shader</h2><p>​    首先为了以后的操作方便，我们在 Materials 文件夹下再新建一个 <strong>Shader Graph 文件夹</strong>，我们就在这个文件夹目录下新建一个 Shader Graph （Create —&gt; Shader —&gt; Universal Render Pipeline —&gt; Unlit Shader Graph）并将它命名为 <strong>Occlusion Shader</strong> （遮挡着色器）。</p><p>​    同时选中该 Shader 右键新建一个 Material 材质，命名为 <strong>Occlusion</strong> ，将它拖到上级目录 Materials ，完成后如下图所示</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/bda871c8cfc34794a0f19650681d08c2.jpg" alt="1.jpg" style="zoom:80%;" /><img src="https://p6.toutiaoimg.com/origin/pgc-image/7e8acbcfdcb349588d889a38ea6b699d.jpg" alt="2.jpg" style="zoom:67%;" /><p>​    </p><p>​    做好这些分类工作后，我们双击打开 Occlusion Shader 打开着色器编辑器窗口，看到如下界面，我们可以先在右上角的 Graph Settings 选项卡中<strong>勾选 Alpha Clip</strong> 打开透明通道，勾选了这个之后我们就可以在 Fragment 节点中修改透明值了</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/6d0dd303bf884583b5bf7803d0f5998a.jpg" alt="3.jpg" style="zoom:80%;" /><p>​    然后我们在空白的地方右键新建一个节点，搜索添加  <strong>Fresnel Effect</strong> （菲涅尔效应），我们到时候可以将人物应用这个 Shader 来实现透明化的效果</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/ef52362a31bb45228a82e169ee052644.jpg" alt="4.jpg" style="zoom:80%;" /><p>​    但是我们看这个光圈有点单调，我们可以给它来上点颜色</p><h2 id="添加颜色"><a href="#添加颜色" class="headerlink" title="添加颜色"></a>添加颜色</h2><p>​    要添加颜色，首先就要在左上角新建一个 <strong>Color类型</strong> 的参数（这些新建出来的参数之后都可以直接材质对象的属性界面板修改它们），然后给这个参数设置一个默认颜色值</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/afff800563c946299acfd483a3bb2f67.jpg" alt="5.jpg" style="zoom:80%;" /><p>​    有了颜色值，我们想应用到上面的 Fresnel Effect 节点的话，有个方法就是将它们相乘，这样颜色就可以与之混合：拖拽 Fresnel Effect 节点窗口的 Out 然后点击空白处，在弹出的搜索框中搜索 Multiply（乘），这时候就多了一个节点窗口，A值由原来的 Fresnel Effect 节点输入进来，而剩下一个B值就是留给我们颜色的</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/ca8248f9b6e046ae959697d41e8da5d8.jpg" alt="6.jpg" style="zoom:80%;" /><p>​    此时我们再将左上角的 Color 拖拽出来，并传给B值，这样颜色就混合进去Fresnel Effect 节点了</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/278510f8f57e4f57a093c66168a16cd7.jpg" alt="7.jpg" style="zoom:80%;" /><p>​    将 Multiply 节点输出 Out 值拖入到 Fragment 节点的 Base Color 项中，可以看到右下角的预览窗口就是我们材质的最终效果了</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/7dc333ce40314957b7ed649b5b9fa013.jpg" alt="8.jpg" style="zoom:80%;" /><p>​    当然我们还可以更完善一下，添加一些额外的东西</p><h2 id="添加噪点"><a href="#添加噪点" class="headerlink" title="添加噪点"></a>添加噪点</h2><p>​    我们可以添加一些噪点填充我们的材质</p><p>​    右键创建一个 <strong>Dither</strong> 节点窗口，改变X的值可以看到噪点渐变的效果</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/5253d92200c34098b2989374df8573da.jpg" alt="9.jpg" style="zoom:80%;" /><p>​    由于这个X值是一个 Float 类型，我们可以创建一个<strong>float类型参数</strong>来供外界改变它，我们就把这个参数命名为 <strong>DitherCount</strong> ，默认值可以暂时设为1</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/3554a59477874c29b9730008f8d6207c.jpg" alt="10.jpg" style="zoom:80%;" /><p>​    最后将输出 Out 值传给 Fragment 节点中的 Alpha 即可</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/52e712db91204e3b869a6f13a4876508.jpg" alt="11.jpg" style="zoom:80%;" /><p>​    </p><h2 id="保存Shader并生成为材质"><a href="#保存Shader并生成为材质" class="headerlink" title="保存Shader并生成为材质"></a>保存Shader并生成为材质</h2><p>​    最后的最后我们可以再添加一个控制 Alpha Clip Threshold （Alpha阈值）的参数值，当然它也是 float类型的，命名为 AlphaThreshold</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/891aa0b188d44acc835c192ca99c33de.jpg" alt="12.jpg" style="zoom:80%;" /><p>​    </p><p>​    点击保存，我们就可以在最开始创建的 Occlusion 材质看到效果了，可以看到它的属性面板中有了三个参数，这三个参数就是我们在 Shader 编辑器中创建的三个变量值</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/a2f1c9f63ad443778b5f1cc23c69996a.jpg" alt="13.jpg" style="zoom:80%;" /><h1 id="将材质应用到人物中"><a href="#将材质应用到人物中" class="headerlink" title="将材质应用到人物中"></a>将材质应用到人物中</h1><h2 id="创建一个Render-Objects"><a href="#创建一个Render-Objects" class="headerlink" title="创建一个Render Objects"></a>创建一个Render Objects</h2><p>​    在上面创建好了材质后，我们就可以尝试把它应用到我们的人物里了，我们想要的是当人物移动到树等物体后面给遮挡时应用这个材质，这样就等同于显示人物的轮廓了，那就让我们开始吧！</p><p>​    我们找到我们的 Pipeline Setting 文件夹，选中 <strong>UniversalRenderPipelineAsset_Renderer</strong> ，在右边的属性面板中点击 <strong>Add Renderer Feature</strong> 按钮，新建一个 <strong>Render Objects</strong></p><p>​    因为我们要区分人物在遮挡物前面和在遮挡物后面的情况，所以可以先将这个 Render Object 命名为 <strong>CharcterBehind</strong> ，而判断是否在遮挡物后面的条件就是根据 深度（Depth）来判断，所以我们要勾选 <strong>Depth</strong> 选项，并按下图来设置</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/3a0b69da1498450b9896af76a181e118.jpg" alt="14.jpg" style="zoom:80%;" /><p>​    图中的 Material 选项则是选择我们前面创建的材质 Occlusion，这样当人物在判断成功的条件下就会给渲染出这个材质效果了</p><h2 id="设置过滤图层"><a href="#设置过滤图层" class="headerlink" title="设置过滤图层"></a>设置过滤图层</h2><p>​    做完了上面这些还不够，我们还要考虑 <strong>Filters（过滤）</strong>哪一些东西，我们可以在上方的 <strong>Layer Mask</strong> 中选择我们要过滤的图层，因为我们这里遮挡只涉及到人物，因此我们只用过滤人物图层就行了</p><p>​    但是问题在于 Layer Mask 默认自带的选项并没有我们的人物图层，那我们就自创一个：找到我们的人物对象（我这里的名字是Player），然后点击属性面板中的 <strong>Layer —&gt; Add Layer…</strong></p><img src="https://p6.toutiaoimg.com/origin/pgc-image/88e43d5e10e6489eaaf3de4128e87533.jpg" alt="15.jpg" style="zoom:80%;" /><p>​    然后为了方便记忆，可以将这个新图层命名为 Player</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/e0c625c03a9d422681ba030f982dbe7f.jpg" alt="16.jpg" style="zoom:80%;" /><p>​    新建好后不要忘了回到人物属性中选择我们的新图层，这时候弹出一个对话框，我们选择下图第一个选项，将子物体也一起更改为新图层</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/b156a4461b024c348d80d8b760201cde.jpg" alt="17.jpg" style="zoom:80%;" /><h2 id="最后的调整"><a href="#最后的调整" class="headerlink" title="最后的调整"></a>最后的调整</h2><p>​    这个时候我们人物已经有了一些变化了，把它放在树后面可以看到渲染出来的是轮廓了，但是还有一些问题需要调整：当我们不是在遮挡物后面时，人物的一些部件也会有遮挡效果，我们就要来解决它</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/0130ed394a4c479b8b5d210748ed8dd8.jpg" alt="18.jpg" style="zoom:80%;" /><p>​    我们只需要再新建一个 <strong>Render Objects</strong> ，并命名为 <strong>CharcterInFront</strong> 代表是人物在遮挡物前面的时候（与上一个 Render Object 相反情况），然后只需要改变 Layer Mask 为我们新建的 Player 图层，人物就恢复正常了</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/43099fd6b674481abab6aebe7a902607.jpg" alt="19.jpg" style="zoom:80%;" /><img src="https://p9.toutiaoimg.com/origin/pgc-image/cd173ce71bc44957a77546101663df92.jpg" alt="20.jpg" style="zoom:80%;" /><p>​    因为这样设置就代表着人物在被其它物体遮挡了会应用透明化的材质（第一个 CharcterBehind Render Object），在没有被遮挡的情况下就什么都不变（第二个 CharcterInFront Render Object）</p><p>​    到这里，我们就完成了剔除人物遮挡效果啦！</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记4--设置人物的动画</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B04-%E8%AE%BE%E7%BD%AE%E4%BA%BA%E7%89%A9%E7%9A%84%E5%8A%A8%E7%94%BB/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B04-%E8%AE%BE%E7%BD%AE%E4%BA%BA%E7%89%A9%E7%9A%84%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>​    在前面两个章节我们成功地让我们的人物在地图上走了起来，但是我们发现小人的动作是素材下载下来时默认的状态，需要我们来进行调整，那么这一章节就来修改一下小人的动作吧！</p><h1 id="查看素材小人自带的动作动画"><a href="#查看素材小人自带的动作动画" class="headerlink" title="查看素材小人自带的动作动画"></a>查看素材小人自带的动作动画</h1><p>​    我们之前下载下来的人物是有自带的动作的，我们先来查看一下它们是怎样的</p><p>​    打开如下目录（ <strong>Assets Packs —&gt; DogKnight —&gt; Animations</strong> ），找到图片中的这些文件，这一些文件就是我们小人自带的动作了，而在右边有个小窗口可以预览播放动作动画，但是我们发现预览窗口中的人是紫色的，怎样可以调成我们人物的样例呢？</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/d855bb2c3cb24ba0b1e5b351658616e1.jpg" alt="1.jpg" style="zoom:80%;" /><p>​        我们只需要点一下预览窗口上方一个按钮就可以导入一个人物样例用在这个动画上了</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/994679f9c4704258b10a25ab51ad1273.jpg" alt="2.jpg" style="zoom:80%;" /><p>​    点击绿色小人按钮，然后选择 **Other…**，我们就可以在新出来的窗口 <strong>Select GameObject</strong> 中选择我们要用的样例了，这里我选择的是 DogPBR ，也就是我们游戏中要用到的小狗</p><p>​    知道了动作动画在哪里以及怎么预览动作之后，我们就可以着手来实现更改角色的动作了</p><h1 id="使用动作控制器修改人物动作"><a href="#使用动作控制器修改人物动作" class="headerlink" title="使用动作控制器修改人物动作"></a>使用动作控制器修改人物动作</h1><p>​    首先我们新建一个目录来专门存放一个动作控制器文件的文件夹，可以参考下图目录</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/2d3c92a24b084da1825b3632a043a377.jpg" alt="3.jpg" style="zoom:80%;" /><p>​    <strong>Animators</strong> 文件夹中我们右键 <strong>Create</strong> 一个 <strong>Animator Controller</strong> 文件，并可以将它命名为 Player ，这个文件就是用来控制我们人物动作的控制器文件</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/805493fbe75d4f3db98752c50dde6af4.jpg" alt="4.jpg" style="zoom:80%;" /><p>​    新建好动作控制器文件后，我们双击打开它，可以看到如下图一个默认的界面</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/b9f85f9d22ab4bae8e8d5b7eec6983ec.jpg" alt="5.jpg" style="zoom:80%;" /><p>​    我们在中间视图右键然后新建一个 <strong>Blend Tree</strong> （即混合树，用来解决多个动画之间的混合，经常用于移动动画之间的混合），新建好后命名为：Locomotion，并双击打开这个 Blend Tree</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/7922cd39288d461b8746c05bd0e315b2.jpg" alt="6.jpg" style="zoom:80%;" /><p>​    打开后我们首先要做的事就是把左上方 <strong>Parameters（参数）</strong> 选项卡中默认的 Blend 参数删除，并自己新建一个 **Float 类型 **的参数，这个参数是用来参考要哪一个数值来切换我们的动作，这里理所应当是看移动时人物的速度是多少从而来切换不同的动作，因此我们这个 Float 类型的参数就命名为 <strong>“ Speed ”</strong>，到时候我们在代码中就要用到这个值</p><p>​    了解参数之后，我们右键中间的 Blend Tree ，选择 <strong>Add Motion</strong> 添加动作，这里我们可以考虑一下总共要多少个动作：一个是人物没有移动的时候是 <strong>站立不动</strong>，一个是移动速度较慢，属于 <strong>慢走状态</strong>，还有一个速度较快，变为了 <strong>快跑</strong>，这样我们就有了三个动作。因此在这里就要添加三次 Motion 了</p><p>​    <img src="https://p6.toutiaoimg.com/origin/pgc-image/f5ad228bf45040e393dd2e88d27c040a.jpg" alt="7.jpg" style="zoom:80%;" /></p><p>​    添加好 Motion 后我们在右边的 Inspector 视图中便可以看到多了三个空的 Motion ，这个时候要注意<u>先把 Parameter（参数）选择为刚刚创建的 Speed</u> 先，然后就分别把 站立、行走、奔跑 三个动作拖入到三个空 Motion 框中（动作在文章前面可以找到路径），完成后如下图所示</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/58ff789af1ab4b3eb11464c2de7469df.jpg" alt="8.jpg" style="zoom:80%;" /><p>​    弄好上面这些东西后，剩下的就要交给代码来解决了，也是我们应用 Speed 参数的时候了，这次的代码打在了之前创建过的 <strong>PlayerController</strong> 代码文件中，下面贴出这次要用到的代码👇👇👇</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NavMeshAgent</span> agent<span class="token punctuation">;</span><span class="token comment">//导航控制，之前用到的</span>    <span class="token keyword">private</span> <span class="token class-name">Animator</span> animator<span class="token punctuation">;</span><span class="token comment">//动作控制</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取当前组件并赋值给上面声明的变量</span>         agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animator<span class="token operator">=</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//实时更新动作动画</span><span class="token function">SwitchPlyerAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchPlyerAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//切换人物角色的动作动画</span><span class="token comment">//弄好后整个函数放进Update里</span>        animator<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">"Speed"</span><span class="token punctuation">,</span>agent<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>sqrMagnitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置一个Float值，参数2为要设置的值</span>        <span class="token comment">//API解释</span>                <span class="token comment">//velocity -- 获取 NavMeshAgent 组件的当前速度，或者设置一个速度来手动控制代理。</span>        <span class="token comment">//API网址：https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent-velocity.html</span>                <span class="token comment">//sqrMagnitude -- 属于 Vector3 的方法，返回这个向量的长度的平方（只读），计算长度的平方而不是magnitude是非常快的</span>        <span class="token comment">//API网址：http://docs.manew.com/Script/Vector3.sqrMagnitude.html</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    打完代码后，再把 Animator Controller 文件 <strong>Player</strong> 拖到人物属性面板中的 <strong>Animator — Controller</strong> 框框中就大功告成啦！进入游戏看看你的人物是否在移动时会变换指定的动作吧！</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/5b9d38d06a01422394b2959ab214244c.jpg" alt="9.jpg" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记3--摄像机跟踪处理</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B03-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E8%B8%AA%E5%A4%84%E7%90%86/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B03-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E8%B8%AA%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>​    在上一章节，我们第一次在Unity上使用代码来实现了我们人物的移动。但是我们发现镜头并不会跟着人物移动，因此在这一章节我们就来实现如何让摄像机跟着我们小人走。</p><p>​    同样我们也要安装一个插件，叫做 <strong>Cinemachine</strong> ，安装完后我们可以在Unity界面上方的菜单栏看见它的功能条</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/2edd56f142984d5ca500ad9372783225.jpg" alt="1.jpg" style="zoom: 67%;" /><img src="https://p6.toutiaoimg.com/origin/pgc-image/a9788d8d88904631b6965ad7b0f5b286.jpg" alt="2.jpg" style="zoom:80%;" /><center>首先安装好Cinemachine</center><p>​    在这里我们用到的选项是第一个，先选中我们的主摄像机 Main Camera（我这里对主摄像机的命名），在菜单栏中找到 <strong>GameObject—&gt;Align View to Selected</strong>（这一步操作是把我们的视角调到和摄像机的视角一样的角度），然后再在刚刚的 <strong>Cinemachine</strong> 菜单栏中点击<strong>创建一个 Virtual Camera</strong> </p><img src="https://p9.toutiaoimg.com/origin/pgc-image/a2106f307e6d4818b7bfa9ade25435ad.jpg" alt="3.jpg" style="zoom: 75%;" /><p>​    创建好后，我们的 Virtual Camera（虚拟摄像机） 就会顶替了我们的主摄像机，我们找到刚刚创建好的虚拟摄像机对象，在属性栏中进行一些调整：</p><p>​    1）首先在 Body 选择为 <strong>Framing Transposer</strong> ，这样相机就会跟随着我们人物了，这里简单介绍一些其他几个选项的作用</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/f9ab6d9da189491187c26eb6b7f47249.jpg" alt="4.jpg" style="zoom:80%;" /><ul><li><p>Do Nothing：不移动虚拟相机 </p></li><li><p>Framing Transposer：跟随目标移动，并在屏幕空间保持相机和跟随目标的相对位置。 </p></li><li><p>Hard Lock to Target：虚拟相机和跟随目标使用相同位置。</p></li><li><p> Orbital Transposer：相机和跟随目标的相对位置是可变的，还能接收用户的输入。常见于玩家控制的相机。</p></li><li><p> Tracked Dolly：相机沿着预先设置的轨道移动。 </p></li><li><p>Transposer：跟随目标移动，并在世界空间保持相机和跟随目标的相对位置固定。</p><p>2）在 Aim 选项中选择 <strong>Do Nothing</strong> （这里对其它几个选项感兴趣的可以自己去试一下，选择POV的时候视野会跟着鼠标转动，一般可用于第一人称的游戏）</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/2d597d7729c044f4a771b53cde8b0077.jpg" alt="5.jpg" style="zoom:80%;" /><p>3）将你的人物对象拖入 Follow 的框框中（这里其实本质是相机跟随一个像素点，如果想调整跟随的点可以自己调整，也可以新建一个人物子类Empty对象，然后调整这个空对象的位置，再让相机跟随这个对象）</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/edb5d7890a4441ff965a759adb6de889.jpg" alt="6.jpg" style="zoom:80%;" /></li></ul><p>​    到这里，你的摄像机就会跟随着人物移动而转变视角了，当然还可以更进一步，调整一下缓冲区域（就是让相机不要跟随着太紧，让人物走那么一点点距离再相机跟随）：我们可以通过调整下图几个参数而调整，预览屏幕的框框可以看到你的缓冲区大小</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/b17d8f6eca6e4c1494f6b28ede1ecec3.jpg" alt="7.jpg" style="zoom:80%;" /><img src="https://p5.toutiaoimg.com/origin/pgc-image/4242f83084d54044bdb5ecedf8ad588a.jpg" alt="8.jpg" style="zoom:80%;" /><p>​    当然感兴趣的话还可以去查找更多的设置方法去调整你的摄像机，从而让你的视野移动更完美。</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记2--智能导航的烘焙和鼠标控制人物移动</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B02-%E6%99%BA%E8%83%BD%E5%AF%BC%E8%88%AA%E7%9A%84%E7%83%98%E7%84%99%E5%92%8C%E9%BC%A0%E6%A0%87%E6%8E%A7%E5%88%B6%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B02-%E6%99%BA%E8%83%BD%E5%AF%BC%E8%88%AA%E7%9A%84%E7%83%98%E7%84%99%E5%92%8C%E9%BC%A0%E6%A0%87%E6%8E%A7%E5%88%B6%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>​    这一次我们来实现人物在地图上走动，在实现之前我们有一些准备工作要做，首先就是我们的地图烘焙了。</p><h1 id="智能导航地图的烘焙"><a href="#智能导航地图的烘焙" class="headerlink" title="智能导航地图的烘焙"></a>智能导航地图的烘焙</h1><p>​    地图的烘焙就是标记我们场景哪些区域是可以供人物移动的，而哪一些是障碍物或不可走区域，只有规划好了之后我们才可以更好的去实现人物移动，不然可以想一下因为一些粗心失误使得一些障碍物没有设置成功，从而导致人物移动穿模了就不妙了。</p><p>​    那么我们来开始吧！</p><p>​    首先还是要安装一个插件叫做 — <strong>Navigation</strong> ，安装步骤就不再过多介绍了</p><p>​    安装好了之后我们打开界面如下图，我们来看一下怎么烘焙吧</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/148f5c914e914e808596ffa68e51d87d.jpg" alt="1.jpg" style="zoom: 80%;" /><p>​    </p><p>​    首先我们在场景中<strong>选择一个地面</strong>，然后再在 Navigation 插件里点击 <strong>Object选项卡</strong>，可以有个 <strong>Navigation Static</strong> 的选项，我们把这个选项 ✅ 勾上，因为只有设为 static 之后才可以进行烘焙。</p><p>​    ⚠有时候选择了 static 之后会弹出一个对话框，询问是否将该对象所包含的子对象（例如在地板对象中还包含了树木和石头等对象）都设为 static ，这个我们看自己情况选择。</p><p>​    选择 static 后，下面的 <strong>Navigation Area</strong> 就可以选择当前区域为可移动还是不可移动区域了</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/4074b3afad1f40a1b0fc3ea55c186842.jpg" alt="2.jpg" style="zoom:80%;" /><p>​    回到 Bake 选项卡，我们看到可以设置地面在哪些情况下可以走，如 <strong>Max Slope</strong> 代表着可行坡度，就好像我所调的35°，这代表着我们小人最多可以走35角度的坡，如果大于35°的话我们小人是无法到达的</p><p>​    而图中的蓝色圆柱体以代表着你的人物身高和半径，我们修改这些属性也会影响到我们地图上可行区域</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/1400e1a2f3784cb2ac84e3f87c22a959.jpg" alt="3.jpg" style="zoom:80%;" /><p>​    设置完这一切之后我们就可以点击下方的 <strong>Bake</strong> 按钮来烘焙啦，我们也可以在地图上看到颜色的变化，有颜色标记的区域是可以走的，而没有颜色则代表是无法到达的区域</p><p>​    </p><p>​    除了像上面那样直接使用 Navigation 插件进行障碍物等设置方法，我们还可以直接在物件的 <strong>Inspector</strong> 视图中添加一个 <strong>Navigation</strong> 的 <strong>Component</strong></p><p>​                             <img src="https://p6-tt.byteimg.com/origin/pgc-image/290b93d207ca4b5386932a8dcbef0407.jpg" alt="4.jpg" style="zoom:80%;" />                    <img src="https://p26-tt.byteimg.com/origin/pgc-image/e250b8ffcaf84d4f9eb2ef4e009069be.jpg" alt="5.jpg" style="zoom:80%;" /></p><p>​    添加完之后我们可以设置是可移动区域还是障碍区域，最后再进行 <strong>Bake</strong> ，用这种方式实现的地图烘焙有一个优点就是在你移动物体时，所设置的可行或不可行区域也会跟随物体移动，例如：我设置了一个石头为障碍物，在我移动石头时，该障碍物区域也会跟随着移动。</p><p>​    不止地面可以烘焙，我们地面上的树木石头都可以烘焙，具体操作也是先选中这些对象（鉴于可能物体较多，我们可以在Hierarchy视图上多选），然后设为 static ，再接着设置圆柱体范围等可行区域最后再烘焙就大功告成啦</p><h1 id="实现鼠标控制人物移动"><a href="#实现鼠标控制人物移动" class="headerlink" title="实现鼠标控制人物移动"></a>实现鼠标控制人物移动</h1><p>​    在烘焙好地图区域后，我们就可以着手来实现鼠标控制人物移动啦</p><p>​    因为这部分需要涉及到打代码，我们新建一个 <strong>Scripts</strong> 文件夹专门存放我们的代码</p><p>​    新建一个 <strong>C#</strong> 代码文件，一个 <strong>Unity Empty对象</strong>，把它们都命名为 <strong>MouseManager</strong> ，并把代码文件拖拽到 Unity Empty对象中</p><p>​               <img src="https://p3-tt.byteimg.com/origin/pgc-image/21776254d90d48bca1cf31c28f6c402e.jpg" alt="6.jpg" style="zoom:80%;" />                                        <img src="https://p5-tt.byteimg.com/origin/pgc-image/b54f60e1cb4146ff84a3922d31e64f57.jpg" alt="7.jpg" style="zoom:80%;" /></p><p>​    接下来就是编写代码了，由于这里展示的是单例模式，我们还要新建一个名为： <strong>PlayerController</strong> 的C#文件拖拽到要控制的人物上，下面分别是两个C#文件的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MouseManager.cs</span><span class="token comment">//这里只展示重要的部分并附上注释</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token comment">//for Vector3,RaycastHit,Ray</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">//for Action</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">></span></span> OnMouseClicked<span class="token punctuation">;</span><span class="token comment">//声明一个事件，用于当鼠标点击时进行操作</span>    <span class="token class-name">RaycastHit</span> hitInfo<span class="token punctuation">;</span><span class="token comment">//用来存储射线Ray返回的坐标点消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MouseManager</span> Instance<span class="token punctuation">;</span><span class="token comment">//MouseManager类的唯一实例（单例模式用）</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//发射一条射线，起点是主相机（MainCamera）</span>        <span class="token comment">//射线另一端点则是鼠标点击的坐标（Input.mousePosition）</span>        <span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//上面的Raycast函数里将射线点信息返回到了out属性的hitInfo变量里</span>            <span class="token comment">//TODO</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>             <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//如果鼠标点击了一个地方并且hitInfo坐标点不为空的话</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//所点击的物体标签是“Ground”（地面）的话，（注意要把你的地面添加为Ground标签）</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//判断OnMouseClicked事件是否为空，不为空的话则传递坐标点</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//DeBug Info</span><span class="token class-name">Vector3</span> point <span class="token operator">=</span> hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">;</span>Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"鼠标左键单击了&#123;0&#125;! X:&#123;1&#125;,Y:&#123;2&#125;,Z:&#123;3&#125;"</span><span class="token punctuation">,</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>name<span class="token punctuation">,</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>point<span class="token punctuation">.</span>y<span class="token punctuation">,</span>point<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Debug显示鼠标点击的坐标</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//在Unity的脚本C#代码文件中，Awake()是在脚本对象实例化时被调用的，也就是在这个类被创建的时候就进行操作</span><span class="token keyword">if</span><span class="token punctuation">(</span>Instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将上面两个主要的函数放进Update里</span><span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//class MouseManager</span><span class="token comment">//PlayerController.cs</span><span class="token comment">//把这个文件拖入到你要控制的人物中</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token comment">//for Component.GetComponent&lt;></span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token comment">//for CLASS NavMeshAgent;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NavMeshAgent</span> agent<span class="token punctuation">;</span><span class="token comment">//导航控制</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//GetComponent为获取组件</span>        <span class="token comment">//我们在人物添加过一个NavMeshAgent的Component，这里获取的就是它</span>        agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveToTarget</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从事件中获得的坐标点赋值给人物移动的目标点</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将函数方法注册到事件中</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    到此，人物移动的核心部分就实现了，快去实验一下你的小人能不能移动吧！</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记1--熟悉Unity界面以及构建场景</title>
      <link href="UnityNotes/Unity%E7%AC%94%E8%AE%B01-%E7%86%9F%E6%82%89Unity%E7%95%8C%E9%9D%A2%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA%E5%9C%BA%E6%99%AF/"/>
      <url>UnityNotes/Unity%E7%AC%94%E8%AE%B01-%E7%86%9F%E6%82%89Unity%E7%95%8C%E9%9D%A2%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="熟悉Unity界面"><a href="#熟悉Unity界面" class="headerlink" title="熟悉Unity界面"></a>熟悉Unity界面</h1><p>​    首先在开始之前说一下我所使用的Unity版本，我目前所安装的Unity是2020.3版本，具体版本号如下图所示：</p><p><img src="https://p6-tt.byteimg.com/origin/pgc-image/39050d7c97954612bc110e85d4b0d84e.jpg" alt="1.jpg"></p><p>​    同时这个版本也是稳定版本（LTS）</p><p>​    安装完Unity，我们就要开始创建项目，这里我们直接创建一个普通3D项目，项目名为：3DRPG ，进去之后我们按自己喜好调整一下界面布局，具体每个界面的作用这里作简单的介绍，随着我们不断推进项目我们也可以比较快地熟悉各个窗口的作用。</p><p><img src="https://p5-tt.byteimg.com/origin/pgc-image/aa00a709e4fe479aa99a5b3040a5a298.jpg" alt="2.jpg"></p><p>​    👆我们来看一下上面的图，这个界面是我在进行了几个章节之后截的图，一般我们都有几个主要的窗口界面：</p><ul><li><p><strong>Scene</strong>  这个是我们Unity的可视化场景管理窗口，简单来说就是我们可以直接将我们的人物、小物件等东西在Scene窗口上进行操作，这可以极大的方便我们进行场景的布置工作。</p></li><li><p><strong>Hierarchy</strong> 也就是上图靠中间上边的视图，在这个视图中我们可以看到在Scene视图中摆放了哪些物件对象，包括你的小人，花草树木甚至你的Camera(摄像机🎥)和光照对象都会在Hierarchy视图上显示出来。</p></li><li><p><strong>Project</strong> 这个视图里我们可以管理当前项目的文档文件，比如C#代码文件或其它配置文件等都可以在这里直接访问。</p></li><li><p><strong>Inspector</strong> 在这个视图里我们可以查看并修改当前选中对象的属性值，例如我可以在Scene视图或Hierarchy视图选中我的小人，然后修改它的高度、位置等等许多属性。</p></li><li><p><strong>Console</strong> 还有一个视图就是我们的输出控制台啦，在这个控制台里我们可以查看代码错误或者代码输出等信息，在往后我们的C#代码文件中可以利用Debug来输出特定的信息👉👉👉<code>Debug.LogFormat(&quot;调试信息&#123;0&#125;&quot;,xxxx);</code></p><h1 id="安装URP渲染管线"><a href="#安装URP渲染管线" class="headerlink" title="安装URP渲染管线"></a>安装URP渲染管线</h1><p>​    熟悉完界面后，我们就可以开始安装<strong>URP(Universal Render Pipeline)渲染管线</strong>了，首先我们在上边的菜单栏找到Window–Package Manager </p><img src="https://p6-tt.byteimg.com/origin/pgc-image/63fdcf0caf734225823ae387e05ea777.jpg" alt="3.jpg" style="zoom: 67%;" /><p>​    在 Package Manager 中我们可以管理当前项目使用的Unity插件，以后也会经常用到，之后在Package Manager 窗口中左上角我们选择 Pcakages 为<strong>Unity Registry</strong>，随后在右上角搜索<em>Universal RP</em>找到我们要的URP渲染管线并点击安装</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/0c5d7ad152214e88b346851f86c86726.jpg" alt="4.jpg" style="zoom:67%;" /><p>​    我这里安装的URP版本号为 10.4.0 ，该版本已经在Unity 2020.3 中得到了认证。</p><p>​    安装完后我们就要开始配置工作了，首先我们在Project视图点那个+号，然后找到 Rendering -&gt; Universal Render Pipeline -&gt; Pipeline Asset (Forward Renderer) ，如下图👇</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/d659c489af584a5ca3c337957af35a19.jpg" alt="5.jpg" style="zoom:67%;" /><p>​    点击之后我们看到Unity为我们创建了两个文件（下图的第二第三个），当然为了以后更好的管理各种杂七杂八的文件，我们要养成分类的好习惯，所以我们弄个文件夹把它们放在一起，这里我文件夹起名 Pipeline Setting</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/fd12dcde3ace40bf9a60e5db6307675a.jpg" alt="6.jpg" style="zoom: 67%;" /><p>​    下一步我们打开菜单栏中的 Edit—ProjectSettings…</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/35de350f60d04bf7a21461765e3c9f11.jpg" alt="7.jpg" style="zoom: 60%;" /><p>​    在新打开的窗口中我们可以对我们当前的项目进行一些设置操作，这里我们要设置默认的渲染管线为刚刚创建的URP渲染管线，我们分别在左侧栏中选择 Graphics 和 Quality ，再按照下图标蓝色框位置选择我们的URP渲染管线</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/5dac041ae0e14100a36c7ed5e7fa1991.jpg" alt="8.jpg" style="zoom:70%;" /><center>Graphics界面设置URP</center><img src="https://p6-tt.byteimg.com/origin/pgc-image/78eb8e07811a40a08c3f1e084e204cbc.jpg" alt="9.jpg" style="zoom:70%;" /></li></ul><center>Quality界面设置URP</center><p>​    至此，我们的URP渲染管线安装配置就暂时到这了，接下来我们便可以开始导入素材测试渲染效果了。</p><h1 id="导入素材并构建场景"><a href="#导入素材并构建场景" class="headerlink" title="导入素材并构建场景"></a>导入素材并构建场景</h1><h2 id="使用Unity素材商店导入素材"><a href="#使用Unity素材商店导入素材" class="headerlink" title="使用Unity素材商店导入素材"></a>使用Unity素材商店导入素材</h2><p>​    我们可以通过Unity自带的官方商店里面寻找我们喜欢的素材，我们可以点击这个<a href="https://assetstore.unity.com/">链接</a>进入素材商店，也可以在Unity内的 Window—Asset Store 内打开</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/150853385a5e42e282a36d8e1e651371.jpg" alt="10.jpg" style="zoom:60%;" /><p>​    值得注意的是，从Unity2020版开始取消了内置商店的窗口，如果你是2020版或之后的版本的话，打开Asset Store会得到一个无法访问的界面，我们需要再点击 Search Online 按钮按钮来打开网页版商店</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/da99be76548c4ff18c4954eb06ad1d62.jpg" alt="11.jpg" style="zoom:65%;" /><p>​    </p><p>​    我们目前可以先找两个免费素材，如下图所示，一个是场景素材，一个是人物素材，可以供我们前期暂时学习使用了，这里我们点击蓝色的按钮并根据操作添加到你的Unity账户里，就可以在Unity里面下载下来了</p><p><img src="https://p5-tt.byteimg.com/origin/pgc-image/63fc0f40f92a4af181788740c7f975bc.jpg" alt="12.jpg"></p><p>​    在挑选素材时要注意一点就是要看好素材是否支持我们所选择的渲染管线，一般在素材商店界面都会有说明</p><p>​    素材添加到账户之后，我们打开 Package Manager，并在左上角的 Packages 选择为 My Assets，就可以看到在Unity商店添加的素材了，选中素材点击下载并Import就可以添加到项目中啦</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/20d6062a1db34a62a9182d0aa5943889.jpg" alt="13.jpg" style="zoom:70%;" /><p>​    将我们小人拖到Scene视图中，可能会出现小人一身粉色还没渲染外观出来，这时我们就要将素材升级到我们的渲染管线，具体操作是 Edit -&gt; Render Pipeline -&gt; Universal Render Pipeline -&gt; 此时我们可以看到有出来两个选项，第☝个选项是将我们项目里的所以素材都升级为URP；第✌个选项是将当前选中的材质升级为URP，这里我们可以选择第一个。点击升级URP后小人就可以正常显示了</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/29036628920f45c09b47e29ad9a2eaf0.jpg" alt="14.jpg" style="zoom:80%;" /><p>​    </p><h2 id="构建场景"><a href="#构建场景" class="headerlink" title="构建场景"></a>构建场景</h2><p>​    搭建场景部分我们可以先从调整天空样式开始，因为默认的天空样式灰溜溜的并不好看😐，那么我们就开始吧！</p><h3 id="天空"><a href="#天空" class="headerlink" title="天空"></a>天空</h3><p>​    首先调整天空可以先去下个天空盒子（Skybox）素材，这里我下载的是下图所示的Skybox：<a href="https://assetstore.unity.com/packages/vfx/shaders/free-skybox-extended-shader-107400">FREE Skybox Extended Shader</a></p><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/e72308b7966b47368c2cc814dcf5dca4.jpg" alt="15.jpg"></p><p>​    添加好资源后回到Unity内下载并 Import（注意将文件夹分好类），我们可以在素材目录下看到有Demo样例</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/0b812466543d478b9211e068a949438f.jpg" alt="16.jpg" style="zoom:80%;" /><p>​    那么如何来使用这个Skybox呢？</p><p>​    首先我们要在菜单栏打开 Window -&gt; Rendering -&gt; Lighting 窗口</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/448dfc0867b14cea8a884b1da2cd1cc8.jpg" alt="17.jpg" style="zoom:70%;" /><p>​    然后我们在新打开的 Lighting 窗口点击 Environment 选项卡，在Skybox Material 那一栏中就可以选择自己喜欢的Skybox素材了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/e489644b78364fab8c4b97e49a5f69d3.jpg" alt="18.jpg" style="zoom:80%;" /><p>​    另外，我们在Scene选项卡中可以先点击一下New Lighting Settings按钮来新建一个光照配置文件并将它分类摆好，这个配置文件我们后面可以用来配置场景环境光</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/07234fec87af42b8a7db9fbd227478b5.jpg" alt="19.jpg" style="zoom:80%;" /><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/042dbd7860774728a5a7a00969f383e9.jpg" alt="20.jpg"></p><center>将这个配置文件分类摆在Pipeline Setting文件夹下</center><p>​    </p><p>​    现在我们就把刚刚下载下来的Skybox适用到场景中了，如果想要调整参数的话，我们可以到素材目录下找到刚刚选择的Skybox素材对象，并在 Inspector 视图窗口中调整这些参数</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/e3033b1ee0d947b4b315b4a1c17afbf2.jpg" alt="21.jpg" style="zoom:80%;" /><center>我们可以看到右边的Inspector视图内可以修改Skybox的属性</center><p>​    </p><p>​    至此，天空场景就这样搭建好了，接下来我们来搭建地面的元素吧！</p><h3 id="地面"><a href="#地面" class="headerlink" title="地面"></a>地面</h3><p>​    如果想在Unity中自己来绘制场景地面的话，我们可以利用两个插件 — <strong>Poly Brush</strong> 和 <strong>ProBuilder</strong> 来自己建模。</p><h4 id="Poly-Brush"><a href="#Poly-Brush" class="headerlink" title="Poly Brush"></a>Poly Brush</h4><p>​    我们还是打开 Package Manager，左上角的 Packages 选择为 <strong>Unity Registry</strong> 然后我们在搜索框查找 <strong>Poly Brush</strong> 然后下载下来安装。安装好 Poly Brush 不要着急关闭 Package Manager 窗口，我们还要点开 Samples 导入属于我们URP的 Shader Examples ，即下图中的<strong>第二个选项</strong></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/0a1867154c2045d2ada819d40e319961.jpg" alt="22.jpg" style="zoom:80%;" /><center>如果我们使用URP的话选择的是第二个选项</center><p>​    当然如果你是使用普通的Unity项目而没有使用URP渲染管线的话就选择<strong>第一个选项</strong></p><p>​    安装好后我们的 Project 视图里就会多出了一个 Polybrush 插件的文件夹，由于之后我们还要安装一些插件，所以我们可以新建一个文件夹命名为 <strong>Addons</strong> 来专门存放这些插件的文件（要养成分类的好习惯）</p><p>​    弄好这些东西后，我们回到Unity主界面，我们通过上方菜单栏的 <strong>Tools-&gt;Polybrush-&gt;Polybrush Window</strong> 来打开Polybrush窗口</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/c58b3d98cab54de79fac9e3d9a0eaac6.jpg" alt="23.jpg" style="zoom:80%;" /><center>打开 Polybrush 窗口</center><p>​    打开 Polybrush 窗口后我们了解一下这些按钮的功能</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/d8e4a421ebcb42719f15c86813a7e131.jpg" alt="24.jpg" style="zoom:80%;" /><ul><li><p>第一个按钮是调整地面的高度，选中该按钮然后在地面上拖拽鼠标即可将地面升高，按住 Ctrl 并拖拽鼠标便是下降。我们看到下面面板中还有一些参数供我们调整：</p><p><strong>OuterRadius</strong> 可以选择外角大小</p><p><strong>InnerRadius</strong> 则修改内角大小。按住 shift 键滑动鼠标滚轮可以调整内圈大小，按住 Ctrl 键滑动滚轮调整外圈。</p><p><strong>Strength</strong>可以修改强度</p><p><strong>Direction</strong> 可以选择地形改变的方向，默认为normal，下拉可以进行修改。</p><p><strong>BrushMirroring</strong>可以复制笔刷，沿着选中的的x,y,z镜像同时修改地形</p></li><li><p>第二个按钮是柔化按钮，羽化功能可以将地图较为僵硬的顶点进行柔化</p></li><li><p>第三个按钮是颜色刷，可以使我们很方便地将我们的地板涂上我们想要的颜色</p></li><li><p>第四个按钮是将预设的物体涂到地板上，我们可以在面板中勾选要刷的物体以及密度（即概率）</p></li><li><p>第五个是贴图刷，和预制体刷子的功能一样，它是将一些texture刷到场景中，可以把图片素材可以引用在场景中选中的物体上。</p></li></ul><h4 id="ProBuilder"><a href="#ProBuilder" class="headerlink" title="ProBuilder"></a>ProBuilder</h4><p>​    上面的Poly Brush插件是用来绘制修改地面的，那么我们如何来创建自己的地面呢？这下就要用到我们的另一个插件 — <strong>ProBuilder</strong> 了</p><p>​    同样地，我们通过 Package Manager 来安装此插件，下载下来后同样把插件文件夹分好类，然后打开窗口</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/9e16aa320d6e461a9fc6a22752440486.jpg" alt="25.jpg" style="zoom:80%;" /><center>ProBuilder界面</center><p>​    我们可以按住 <strong>左Shift</strong> 并鼠标指到图形按钮来查看这些按钮的功能，我们看到有些按钮右上角有个小齿轮，这代表着我们可以进一步来设置，只用按住 Alt 并点击他们就可以进一步地来设置，拿第一个按钮（功能是<strong>创建几何体</strong>）来说</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/bacf417b80d14ac18301bb95e8fb9034.jpg" alt="26.jpg" style="zoom:80%;" /><p>​    按住 Alt 并点击第一个按钮我们打开如上图所示的窗口，这里我们可以选择要创建的物体是什么，这里我选择的是 Plane （平面），下面可以设置该几何体的的轴的朝向、宽度、长度以及顶点数（如上图顶点数是30x30）</p><p>​    具体的功能我们可以自己去尝试，配合 Polybrush 我们就可以轻松地来创建我们的场景并绘制他们啦！</p><p>​    要注意的是我们如果要使用 <em>Low Poly</em> 风格的场景的话，我们要设置地图网格呈三角形，这里可以通过上面 ProBuilder 图中的 <strong>第二排第五个</strong> 按钮来实现，选中我们的地面几何体，然后点击该按钮便可以设置成功。</p><p>​    </p><p>​    到这里，我们就可以自己去尝试一下构建属于自己的场景了。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>​    在这一章节中，我们开始第一次接触Unity并尝试了解它，了解如何导入素材并构建、绘制我们的场景，我们只有多去尝试使用这些工具，才可以变得熟悉。所以，我们先可以发挥自己创意来构建一个场景，以便后面来操作吧。</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="%E8%AE%B0%E4%BA%8B/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
      <url>%E8%AE%B0%E4%BA%8B/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
      
        <content type="html"><![CDATA[<h1 id="关于这个博客的一些事🍥"><a href="#关于这个博客的一些事🍥" class="headerlink" title="关于这个博客的一些事🍥"></a>关于这个博客的一些事🍥</h1><p>​    当初创建这个博客的目的是想着记录自己在大学生活中遇到的一些问题或者学习笔记等，平时也看了不少别人的个人博客，于是心血来潮就想自己也创一个属于自己的个人博客。</p><p>​    刚开始我便去查找有什么博客平台，因为我喜欢自己自定义界面的方式，便找到了可以利用GitHub来做一个博客方式，即：<a href="https://hexo.io/zh-cn/">hexo</a> 。之后我便跟着教程开始搭建，也发现了一些很好看的主题，我现在用的这个主题是<a href="https://butterfly.js.org/">butterfly</a>（<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev">GitHub地址</a>）。之后研究美化界面又花了好一些时间，不过在弄这些东西的时候我都觉得很满足，看着属于自己的博客慢慢开始搭建起来，一股成就感就上来了，而且在其中也接触到了许多之前没有遇到过的知识。</p><p>​    弄好博客的基本框架后，才是真正的开始，希望有一个博客之后，能够对我自己有更好的帮助，可以更好地去总结知识点，也希望可以分享一些知识给观看博客的你😀。</p><h1 id="关于我的一些事"><a href="#关于我的一些事" class="headerlink" title="关于我的一些事"></a>关于我的一些事</h1><p>​    待更新…….💨</p>]]></content>
      
      
      <categories>
          
          <category> 记事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记事 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
