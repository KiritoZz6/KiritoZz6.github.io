<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity笔记5--剔除人物的遮挡</title>
      <link href="2021/06/12/UnityNotes/Unity%E7%AC%94%E8%AE%B05-%E5%89%94%E9%99%A4%E4%BA%BA%E7%89%A9%E7%9A%84%E9%81%AE%E6%8C%A1/"/>
      <url>2021/06/12/UnityNotes/Unity%E7%AC%94%E8%AE%B05-%E5%89%94%E9%99%A4%E4%BA%BA%E7%89%A9%E7%9A%84%E9%81%AE%E6%8C%A1/</url>
      
        <content type="html"><![CDATA[<p>​    我们发现在移动到一些物体（比如说树）后面的时候，人物就会给遮挡住了，那么有什么办法可以剔除掉这个遮挡呢？可以参考一些游戏，大部分游戏在移动到遮挡物后面时会把人物的轮廓显示出来，这个章节我们就来实现这种效果。</p><h1 id="利用-Shader-Graph（着色器可视化编辑器）剔除遮挡"><a href="#利用-Shader-Graph（着色器可视化编辑器）剔除遮挡" class="headerlink" title="利用 Shader Graph（着色器可视化编辑器）剔除遮挡"></a>利用 Shader Graph（着色器可视化编辑器）剔除遮挡</h1><h2 id="创建一个Shader"><a href="#创建一个Shader" class="headerlink" title="创建一个Shader"></a>创建一个Shader</h2><p>​    首先为了以后的操作方便，我们在 Materials 文件夹下再新建一个 <strong>Shader Graph 文件夹</strong>，我们就在这个文件夹目录下新建一个 Shader Graph （Create —&gt; Shader —&gt; Universal Render Pipeline —&gt; Unlit Shader Graph）并将它命名为 <strong>Occlusion Shader</strong> （遮挡着色器）。</p><p>​    同时选中该 Shader 右键新建一个 Material 材质，命名为 <strong>Occlusion</strong> ，将它拖到上级目录 Materials ，完成后如下图所示</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/bda871c8cfc34794a0f19650681d08c2.jpg" alt="1.jpg" style="zoom:80%;" /><img src="https://p6.toutiaoimg.com/origin/pgc-image/7e8acbcfdcb349588d889a38ea6b699d.jpg" alt="2.jpg" style="zoom:67%;" /><p>​    </p><p>​    做好这些分类工作后，我们双击打开 Occlusion Shader 打开着色器编辑器窗口，看到如下界面，我们可以先在右上角的 Graph Settings 选项卡中<strong>勾选 Alpha Clip</strong> 打开透明通道，勾选了这个之后我们就可以在 Fragment 节点中修改透明值了</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/6d0dd303bf884583b5bf7803d0f5998a.jpg" alt="3.jpg" style="zoom:80%;" /><p>​    然后我们在空白的地方右键新建一个节点，搜索添加  <strong>Fresnel Effect</strong> （菲涅尔效应），我们到时候可以将人物应用这个 Shader 来实现透明化的效果</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/ef52362a31bb45228a82e169ee052644.jpg" alt="4.jpg" style="zoom:80%;" /><p>​    但是我们看这个光圈有点单调，我们可以给它来上点颜色</p><h2 id="添加颜色"><a href="#添加颜色" class="headerlink" title="添加颜色"></a>添加颜色</h2><p>​    要添加颜色，首先就要在左上角新建一个 <strong>Color类型</strong> 的参数（这些新建出来的参数之后都可以直接材质对象的属性界面板修改它们），然后给这个参数设置一个默认颜色值</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/afff800563c946299acfd483a3bb2f67.jpg" alt="5.jpg" style="zoom:80%;" /><p>​    有了颜色值，我们想应用到上面的 Fresnel Effect 节点的话，有个方法就是将它们相乘，这样颜色就可以与之混合：拖拽 Fresnel Effect 节点窗口的 Out 然后点击空白处，在弹出的搜索框中搜索 Multiply（乘），这时候就多了一个节点窗口，A值由原来的 Fresnel Effect 节点输入进来，而剩下一个B值就是留给我们颜色的</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/ca8248f9b6e046ae959697d41e8da5d8.jpg" alt="6.jpg" style="zoom:80%;" /><p>​    此时我们再将左上角的 Color 拖拽出来，并传给B值，这样颜色就混合进去Fresnel Effect 节点了</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/278510f8f57e4f57a093c66168a16cd7.jpg" alt="7.jpg" style="zoom:80%;" /><p>​    将 Multiply 节点输出 Out 值拖入到 Fragment 节点的 Base Color 项中，可以看到右下角的预览窗口就是我们材质的最终效果了</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/7dc333ce40314957b7ed649b5b9fa013.jpg" alt="8.jpg" style="zoom:80%;" /><p>​    当然我们还可以更完善一下，添加一些额外的东西</p><h2 id="添加噪点"><a href="#添加噪点" class="headerlink" title="添加噪点"></a>添加噪点</h2><p>​    我们可以添加一些噪点填充我们的材质</p><p>​    右键创建一个 <strong>Dither</strong> 节点窗口，改变X的值可以看到噪点渐变的效果</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/5253d92200c34098b2989374df8573da.jpg" alt="9.jpg" style="zoom:80%;" /><p>​    由于这个X值是一个 Float 类型，我们可以创建一个<strong>float类型参数</strong>来供外界改变它，我们就把这个参数命名为 <strong>DitherCount</strong> ，默认值可以暂时设为1</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/3554a59477874c29b9730008f8d6207c.jpg" alt="10.jpg" style="zoom:80%;" /><p>​    最后将输出 Out 值传给 Fragment 节点中的 Alpha 即可</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/52e712db91204e3b869a6f13a4876508.jpg" alt="11.jpg" style="zoom:80%;" /><p>​    </p><h2 id="保存Shader并生成为材质"><a href="#保存Shader并生成为材质" class="headerlink" title="保存Shader并生成为材质"></a>保存Shader并生成为材质</h2><p>​    最后的最后我们可以再添加一个控制 Alpha Clip Threshold （Alpha阈值）的参数值，当然它也是 float类型的，命名为 AlphaThreshold</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/891aa0b188d44acc835c192ca99c33de.jpg" alt="12.jpg" style="zoom:80%;" /><p>​    </p><p>​    点击保存，我们就可以在最开始创建的 Occlusion 材质看到效果了，可以看到它的属性面板中有了三个参数，这三个参数就是我们在 Shader 编辑器中创建的三个变量值</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/a2f1c9f63ad443778b5f1cc23c69996a.jpg" alt="13.jpg" style="zoom:80%;" /><h1 id="将材质应用到人物中"><a href="#将材质应用到人物中" class="headerlink" title="将材质应用到人物中"></a>将材质应用到人物中</h1><h2 id="创建一个Render-Objects"><a href="#创建一个Render-Objects" class="headerlink" title="创建一个Render Objects"></a>创建一个Render Objects</h2><p>​    在上面创建好了材质后，我们就可以尝试把它应用到我们的人物里了，我们想要的是当人物移动到树等物体后面给遮挡时应用这个材质，这样就等同于显示人物的轮廓了，那就让我们开始吧！</p><p>​    我们找到我们的 Pipeline Setting 文件夹，选中 <strong>UniversalRenderPipelineAsset_Renderer</strong> ，在右边的属性面板中点击 <strong>Add Renderer Feature</strong> 按钮，新建一个 <strong>Render Objects</strong></p><p>​    因为我们要区分人物在遮挡物前面和在遮挡物后面的情况，所以可以先将这个 Render Object 命名为 <strong>CharcterBehind</strong> ，而判断是否在遮挡物后面的条件就是根据 深度（Depth）来判断，所以我们要勾选 <strong>Depth</strong> 选项，并按下图来设置</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/3a0b69da1498450b9896af76a181e118.jpg" alt="14.jpg" style="zoom:80%;" /><p>​    图中的 Material 选项则是选择我们前面创建的材质 Occlusion，这样当人物在判断成功的条件下就会给渲染出这个材质效果了</p><h2 id="设置过滤图层"><a href="#设置过滤图层" class="headerlink" title="设置过滤图层"></a>设置过滤图层</h2><p>​    做完了上面这些还不够，我们还要考虑 <strong>Filters（过滤）</strong>哪一些东西，我们可以在上方的 <strong>Layer Mask</strong> 中选择我们要过滤的图层，因为我们这里遮挡只涉及到人物，因此我们只用过滤人物图层就行了</p><p>​    但是问题在于 Layer Mask 默认自带的选项并没有我们的人物图层，那我们就自创一个：找到我们的人物对象（我这里的名字是Player），然后点击属性面板中的 <strong>Layer —&gt; Add Layer…</strong></p><img src="https://p6.toutiaoimg.com/origin/pgc-image/88e43d5e10e6489eaaf3de4128e87533.jpg" alt="15.jpg" style="zoom:80%;" /><p>​    然后为了方便记忆，可以将这个新图层命名为 Player</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/e0c625c03a9d422681ba030f982dbe7f.jpg" alt="16.jpg" style="zoom:80%;" /><p>​    新建好后不要忘了回到人物属性中选择我们的新图层，这时候弹出一个对话框，我们选择下图第一个选项，将子物体也一起更改为新图层</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/b156a4461b024c348d80d8b760201cde.jpg" alt="17.jpg" style="zoom:80%;" /><h2 id="最后的调整"><a href="#最后的调整" class="headerlink" title="最后的调整"></a>最后的调整</h2><p>​    这个时候我们人物已经有了一些变化了，把它放在树后面可以看到渲染出来的是轮廓了，但是还有一些问题需要调整：当我们不是在遮挡物后面时，人物的一些部件也会有遮挡效果，我们就要来解决它</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/0130ed394a4c479b8b5d210748ed8dd8.jpg" alt="18.jpg" style="zoom:80%;" /><p>​    我们只需要再新建一个 <strong>Render Objects</strong> ，并命名为 <strong>CharcterInFront</strong> 代表是人物在遮挡物前面的时候（与上一个 Render Object 相反情况），然后只需要改变 Layer Mask 为我们新建的 Player 图层，人物就恢复正常了</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/43099fd6b674481abab6aebe7a902607.jpg" alt="19.jpg" style="zoom:80%;" /><img src="https://p9.toutiaoimg.com/origin/pgc-image/cd173ce71bc44957a77546101663df92.jpg" alt="20.jpg" style="zoom:80%;" /><p>​    因为这样设置就代表着人物在被其它物体遮挡了会应用透明化的材质（第一个 CharcterBehind Render Object），在没有被遮挡的情况下就什么都不变（第二个 CharcterInFront Render Object）</p><p>​    到这里，我们就完成了剔除人物遮挡效果啦！</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记4--设置人物的动画</title>
      <link href="2021/06/10/UnityNotes/Unity%E7%AC%94%E8%AE%B04-%E8%AE%BE%E7%BD%AE%E4%BA%BA%E7%89%A9%E7%9A%84%E5%8A%A8%E7%94%BB/"/>
      <url>2021/06/10/UnityNotes/Unity%E7%AC%94%E8%AE%B04-%E8%AE%BE%E7%BD%AE%E4%BA%BA%E7%89%A9%E7%9A%84%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>​    在前面两个章节我们成功地让我们的人物在地图上走了起来，但是我们发现小人的动作是素材下载下来时默认的状态，需要我们来进行调整，那么这一章节就来修改一下小人的动作吧！</p><h1 id="查看素材小人自带的动作动画"><a href="#查看素材小人自带的动作动画" class="headerlink" title="查看素材小人自带的动作动画"></a>查看素材小人自带的动作动画</h1><p>​    我们之前下载下来的人物是有自带的动作的，我们先来查看一下它们是怎样的</p><p>​    打开如下目录（ <strong>Assets Packs —&gt; DogKnight —&gt; Animations</strong> ），找到图片中的这些文件，这一些文件就是我们小人自带的动作了，而在右边有个小窗口可以预览播放动作动画，但是我们发现预览窗口中的人是紫色的，怎样可以调成我们人物的样例呢？</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/d855bb2c3cb24ba0b1e5b351658616e1.jpg" alt="1.jpg" style="zoom:80%;" /><p>​        我们只需要点一下预览窗口上方一个按钮就可以导入一个人物样例用在这个动画上了</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/994679f9c4704258b10a25ab51ad1273.jpg" alt="2.jpg" style="zoom:80%;" /><p>​    点击绿色小人按钮，然后选择 **Other…**，我们就可以在新出来的窗口 <strong>Select GameObject</strong> 中选择我们要用的样例了，这里我选择的是 DogPBR ，也就是我们游戏中要用到的小狗</p><p>​    知道了动作动画在哪里以及怎么预览动作之后，我们就可以着手来实现更改角色的动作了</p><h1 id="使用动作控制器修改人物动作"><a href="#使用动作控制器修改人物动作" class="headerlink" title="使用动作控制器修改人物动作"></a>使用动作控制器修改人物动作</h1><p>​    首先我们新建一个目录来专门存放一个动作控制器文件的文件夹，可以参考下图目录</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/2d3c92a24b084da1825b3632a043a377.jpg" alt="3.jpg" style="zoom:80%;" /><p>​    <strong>Animators</strong> 文件夹中我们右键 <strong>Create</strong> 一个 <strong>Animator Controller</strong> 文件，并可以将它命名为 Player ，这个文件就是用来控制我们人物动作的控制器文件</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/805493fbe75d4f3db98752c50dde6af4.jpg" alt="4.jpg" style="zoom:80%;" /><p>​    新建好动作控制器文件后，我们双击打开它，可以看到如下图一个默认的界面</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/b9f85f9d22ab4bae8e8d5b7eec6983ec.jpg" alt="5.jpg" style="zoom:80%;" /><p>​    我们在中间视图右键然后新建一个 <strong>Blend Tree</strong> （即混合树，用来解决多个动画之间的混合，经常用于移动动画之间的混合），新建好后命名为：Locomotion，并双击打开这个 Blend Tree</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/7922cd39288d461b8746c05bd0e315b2.jpg" alt="6.jpg" style="zoom:80%;" /><p>​    打开后我们首先要做的事就是把左上方 <strong>Parameters（参数）</strong> 选项卡中默认的 Blend 参数删除，并自己新建一个 **Float 类型 **的参数，这个参数是用来参考要哪一个数值来切换我们的动作，这里理所应当是看移动时人物的速度是多少从而来切换不同的动作，因此我们这个 Float 类型的参数就命名为 <strong>“ Speed ”</strong>，到时候我们在代码中就要用到这个值</p><p>​    了解参数之后，我们右键中间的 Blend Tree ，选择 <strong>Add Motion</strong> 添加动作，这里我们可以考虑一下总共要多少个动作：一个是人物没有移动的时候是 <strong>站立不动</strong>，一个是移动速度较慢，属于 <strong>慢走状态</strong>，还有一个速度较快，变为了 <strong>快跑</strong>，这样我们就有了三个动作。因此在这里就要添加三次 Motion 了</p><p>​    <img src="https://p6.toutiaoimg.com/origin/pgc-image/f5ad228bf45040e393dd2e88d27c040a.jpg" alt="7.jpg" style="zoom:80%;" /></p><p>​    添加好 Motion 后我们在右边的 Inspector 视图中便可以看到多了三个空的 Motion ，这个时候要注意<u>先把 Parameter（参数）选择为刚刚创建的 Speed</u> 先，然后就分别把 站立、行走、奔跑 三个动作拖入到三个空 Motion 框中（动作在文章前面可以找到路径），完成后如下图所示</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/58ff789af1ab4b3eb11464c2de7469df.jpg" alt="8.jpg" style="zoom:80%;" /><p>​    弄好上面这些东西后，剩下的就要交给代码来解决了，也是我们应用 Speed 参数的时候了，这次的代码打在了之前创建过的 <strong>PlayerController</strong> 代码文件中，下面贴出这次要用到的代码👇👇👇</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NavMeshAgent</span> agent<span class="token punctuation">;</span><span class="token comment">//导航控制，之前用到的</span>    <span class="token keyword">private</span> <span class="token class-name">Animator</span> animator<span class="token punctuation">;</span><span class="token comment">//动作控制</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取当前组件并赋值给上面声明的变量</span>         agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animator<span class="token operator">=</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Animator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//实时更新动作动画</span><span class="token function">SwitchPlyerAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchPlyerAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//切换人物角色的动作动画</span><span class="token comment">//弄好后整个函数放进Update里</span>        animator<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">"Speed"</span><span class="token punctuation">,</span>agent<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>sqrMagnitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置一个Float值，参数2为要设置的值</span>        <span class="token comment">//API解释</span>                <span class="token comment">//velocity -- 获取 NavMeshAgent 组件的当前速度，或者设置一个速度来手动控制代理。</span>        <span class="token comment">//API网址：https://docs.unity.cn/cn/2020.3/ScriptReference/AI.NavMeshAgent-velocity.html</span>                <span class="token comment">//sqrMagnitude -- 属于 Vector3 的方法，返回这个向量的长度的平方（只读），计算长度的平方而不是magnitude是非常快的</span>        <span class="token comment">//API网址：http://docs.manew.com/Script/Vector3.sqrMagnitude.html</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    打完代码后，再把 Animator Controller 文件 <strong>Player</strong> 拖到人物属性面板中的 <strong>Animator — Controller</strong> 框框中就大功告成啦！进入游戏看看你的人物是否在移动时会变换指定的动作吧！</p><img src="https://p9.toutiaoimg.com/origin/pgc-image/5b9d38d06a01422394b2959ab214244c.jpg" alt="9.jpg" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记3--摄像机跟踪处理</title>
      <link href="2021/06/09/UnityNotes/Unity%E7%AC%94%E8%AE%B03-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E8%B8%AA%E5%A4%84%E7%90%86/"/>
      <url>2021/06/09/UnityNotes/Unity%E7%AC%94%E8%AE%B03-%E6%91%84%E5%83%8F%E6%9C%BA%E8%B7%9F%E8%B8%AA%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>​    在上一章节，我们第一次在Unity上使用代码来实现了我们人物的移动。但是我们发现镜头并不会跟着人物移动，因此在这一章节我们就来实现如何让摄像机跟着我们小人走。</p><p>​    同样我们也要安装一个插件，叫做 <strong>Cinemachine</strong> ，安装完后我们可以在Unity界面上方的菜单栏看见它的功能条</p><img src="https://p6.toutiaoimg.com/origin/pgc-image/2edd56f142984d5ca500ad9372783225.jpg" alt="1.jpg" style="zoom: 67%;" /><img src="https://p6.toutiaoimg.com/origin/pgc-image/a9788d8d88904631b6965ad7b0f5b286.jpg" alt="2.jpg" style="zoom:80%;" /><center>首先安装好Cinemachine</center><p>​    在这里我们用到的选项是第一个，先选中我们的主摄像机 Main Camera（我这里对主摄像机的命名），在菜单栏中找到 <strong>GameObject—&gt;Align View to Selected</strong>（这一步操作是把我们的视角调到和摄像机的视角一样的角度），然后再在刚刚的 <strong>Cinemachine</strong> 菜单栏中点击<strong>创建一个 Virtual Camera</strong> </p><img src="https://p9.toutiaoimg.com/origin/pgc-image/a2106f307e6d4818b7bfa9ade25435ad.jpg" alt="3.jpg" style="zoom: 75%;" /><p>​    创建好后，我们的 Virtual Camera（虚拟摄像机） 就会顶替了我们的主摄像机，我们找到刚刚创建好的虚拟摄像机对象，在属性栏中进行一些调整：</p><p>​    1）首先在 Body 选择为 <strong>Framing Transposer</strong> ，这样相机就会跟随着我们人物了，这里简单介绍一些其他几个选项的作用</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/f9ab6d9da189491187c26eb6b7f47249.jpg" alt="4.jpg" style="zoom:80%;" /><ul><li><p>Do Nothing：不移动虚拟相机 </p></li><li><p>Framing Transposer：跟随目标移动，并在屏幕空间保持相机和跟随目标的相对位置。 </p></li><li><p>Hard Lock to Target：虚拟相机和跟随目标使用相同位置。</p></li><li><p> Orbital Transposer：相机和跟随目标的相对位置是可变的，还能接收用户的输入。常见于玩家控制的相机。</p></li><li><p> Tracked Dolly：相机沿着预先设置的轨道移动。 </p></li><li><p>Transposer：跟随目标移动，并在世界空间保持相机和跟随目标的相对位置固定。</p><p>2）在 Aim 选项中选择 <strong>Do Nothing</strong> （这里对其它几个选项感兴趣的可以自己去试一下，选择POV的时候视野会跟着鼠标转动，一般可用于第一人称的游戏）</p><img src="https://p26.toutiaoimg.com/origin/pgc-image/2d597d7729c044f4a771b53cde8b0077.jpg" alt="5.jpg" style="zoom:80%;" /><p>3）将你的人物对象拖入 Follow 的框框中（这里其实本质是相机跟随一个像素点，如果想调整跟随的点可以自己调整，也可以新建一个人物子类Empty对象，然后调整这个空对象的位置，再让相机跟随这个对象）</p><img src="https://p5.toutiaoimg.com/origin/pgc-image/edb5d7890a4441ff965a759adb6de889.jpg" alt="6.jpg" style="zoom:80%;" /></li></ul><p>​    到这里，你的摄像机就会跟随着人物移动而转变视角了，当然还可以更进一步，调整一下缓冲区域（就是让相机不要跟随着太紧，让人物走那么一点点距离再相机跟随）：我们可以通过调整下图几个参数而调整，预览屏幕的框框可以看到你的缓冲区大小</p><img src="https://p3.toutiaoimg.com/origin/pgc-image/b17d8f6eca6e4c1494f6b28ede1ecec3.jpg" alt="7.jpg" style="zoom:80%;" /><img src="https://p5.toutiaoimg.com/origin/pgc-image/4242f83084d54044bdb5ecedf8ad588a.jpg" alt="8.jpg" style="zoom:80%;" /><p>​    当然感兴趣的话还可以去查找更多的设置方法去调整你的摄像机，从而让你的视野移动更完美。</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记2--智能导航的烘焙和鼠标控制人物移动</title>
      <link href="2021/06/05/UnityNotes/Unity%E7%AC%94%E8%AE%B02-%E6%99%BA%E8%83%BD%E5%AF%BC%E8%88%AA%E7%9A%84%E7%83%98%E7%84%99%E5%92%8C%E9%BC%A0%E6%A0%87%E6%8E%A7%E5%88%B6%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8/"/>
      <url>2021/06/05/UnityNotes/Unity%E7%AC%94%E8%AE%B02-%E6%99%BA%E8%83%BD%E5%AF%BC%E8%88%AA%E7%9A%84%E7%83%98%E7%84%99%E5%92%8C%E9%BC%A0%E6%A0%87%E6%8E%A7%E5%88%B6%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>​    这一次我们来实现人物在地图上走动，在实现之前我们有一些准备工作要做，首先就是我们的地图烘焙了。</p><h1 id="智能导航地图的烘焙"><a href="#智能导航地图的烘焙" class="headerlink" title="智能导航地图的烘焙"></a>智能导航地图的烘焙</h1><p>​    地图的烘焙就是标记我们场景哪些区域是可以供人物移动的，而哪一些是障碍物或不可走区域，只有规划好了之后我们才可以更好的去实现人物移动，不然可以想一下因为一些粗心失误使得一些障碍物没有设置成功，从而导致人物移动穿模了就不妙了。</p><p>​    那么我们来开始吧！</p><p>​    首先还是要安装一个插件叫做 — <strong>Navigation</strong> ，安装步骤就不再过多介绍了</p><p>​    安装好了之后我们打开界面如下图，我们来看一下怎么烘焙吧</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/148f5c914e914e808596ffa68e51d87d.jpg" alt="1.jpg" style="zoom: 80%;" /><p>​    </p><p>​    首先我们在场景中<strong>选择一个地面</strong>，然后再在 Navigation 插件里点击 <strong>Object选项卡</strong>，可以有个 <strong>Navigation Static</strong> 的选项，我们把这个选项 ✅ 勾上，因为只有设为 static 之后才可以进行烘焙。</p><p>​    ⚠有时候选择了 static 之后会弹出一个对话框，询问是否将该对象所包含的子对象（例如在地板对象中还包含了树木和石头等对象）都设为 static ，这个我们看自己情况选择。</p><p>​    选择 static 后，下面的 <strong>Navigation Area</strong> 就可以选择当前区域为可移动还是不可移动区域了</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/4074b3afad1f40a1b0fc3ea55c186842.jpg" alt="2.jpg" style="zoom:80%;" /><p>​    回到 Bake 选项卡，我们看到可以设置地面在哪些情况下可以走，如 <strong>Max Slope</strong> 代表着可行坡度，就好像我所调的35°，这代表着我们小人最多可以走35角度的坡，如果大于35°的话我们小人是无法到达的</p><p>​    而图中的蓝色圆柱体以代表着你的人物身高和半径，我们修改这些属性也会影响到我们地图上可行区域</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/1400e1a2f3784cb2ac84e3f87c22a959.jpg" alt="3.jpg" style="zoom:80%;" /><p>​    设置完这一切之后我们就可以点击下方的 <strong>Bake</strong> 按钮来烘焙啦，我们也可以在地图上看到颜色的变化，有颜色标记的区域是可以走的，而没有颜色则代表是无法到达的区域</p><p>​    </p><p>​    除了像上面那样直接使用 Navigation 插件进行障碍物等设置方法，我们还可以直接在物件的 <strong>Inspector</strong> 视图中添加一个 <strong>Navigation</strong> 的 <strong>Component</strong></p><p>​                             <img src="https://p6-tt.byteimg.com/origin/pgc-image/290b93d207ca4b5386932a8dcbef0407.jpg" alt="4.jpg" style="zoom:80%;" />                    <img src="https://p26-tt.byteimg.com/origin/pgc-image/e250b8ffcaf84d4f9eb2ef4e009069be.jpg" alt="5.jpg" style="zoom:80%;" /></p><p>​    添加完之后我们可以设置是可移动区域还是障碍区域，最后再进行 <strong>Bake</strong> ，用这种方式实现的地图烘焙有一个优点就是在你移动物体时，所设置的可行或不可行区域也会跟随物体移动，例如：我设置了一个石头为障碍物，在我移动石头时，该障碍物区域也会跟随着移动。</p><p>​    不止地面可以烘焙，我们地面上的树木石头都可以烘焙，具体操作也是先选中这些对象（鉴于可能物体较多，我们可以在Hierarchy视图上多选），然后设为 static ，再接着设置圆柱体范围等可行区域最后再烘焙就大功告成啦</p><h1 id="实现鼠标控制人物移动"><a href="#实现鼠标控制人物移动" class="headerlink" title="实现鼠标控制人物移动"></a>实现鼠标控制人物移动</h1><p>​    在烘焙好地图区域后，我们就可以着手来实现鼠标控制人物移动啦</p><p>​    因为这部分需要涉及到打代码，我们新建一个 <strong>Scripts</strong> 文件夹专门存放我们的代码</p><p>​    新建一个 <strong>C#</strong> 代码文件，一个 <strong>Unity Empty对象</strong>，把它们都命名为 <strong>MouseManager</strong> ，并把代码文件拖拽到 Unity Empty对象中</p><p>​               <img src="https://p3-tt.byteimg.com/origin/pgc-image/21776254d90d48bca1cf31c28f6c402e.jpg" alt="6.jpg" style="zoom:80%;" />                                        <img src="https://p5-tt.byteimg.com/origin/pgc-image/b54f60e1cb4146ff84a3922d31e64f57.jpg" alt="7.jpg" style="zoom:80%;" /></p><p>​    接下来就是编写代码了，由于这里展示的是单例模式，我们还要新建一个名为： <strong>PlayerController</strong> 的C#文件拖拽到要控制的人物上，下面分别是两个C#文件的代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MouseManager.cs</span><span class="token comment">//这里只展示重要的部分并附上注释</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token comment">//for Vector3,RaycastHit,Ray</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">//for Action</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">></span></span> OnMouseClicked<span class="token punctuation">;</span><span class="token comment">//声明一个事件，用于当鼠标点击时进行操作</span>    <span class="token class-name">RaycastHit</span> hitInfo<span class="token punctuation">;</span><span class="token comment">//用来存储射线Ray返回的坐标点消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MouseManager</span> Instance<span class="token punctuation">;</span><span class="token comment">//MouseManager类的唯一实例（单例模式用）</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//发射一条射线，起点是主相机（MainCamera）</span>        <span class="token comment">//射线另一端点则是鼠标点击的坐标（Input.mousePosition）</span>        <span class="token class-name">Ray</span> ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span><span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//上面的Raycast函数里将射线点信息返回到了out属性的hitInfo变量里</span>            <span class="token comment">//TODO</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>             <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//如果鼠标点击了一个地方并且hitInfo坐标点不为空的话</span><span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hitInfo<span class="token punctuation">.</span>collider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//所点击的物体标签是“Ground”（地面）的话，（注意要把你的地面添加为Ground标签）</span><span class="token keyword">if</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span><span class="token function">CompareTag</span><span class="token punctuation">(</span><span class="token string">"Ground"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//判断OnMouseClicked事件是否为空，不为空的话则传递坐标点</span>OnMouseClicked<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//DeBug Info</span><span class="token class-name">Vector3</span> point <span class="token operator">=</span> hitInfo<span class="token punctuation">.</span>point<span class="token punctuation">;</span>Debug<span class="token punctuation">.</span><span class="token function">LogFormat</span><span class="token punctuation">(</span><span class="token string">"鼠标左键单击了&#123;0&#125;! X:&#123;1&#125;,Y:&#123;2&#125;,Z:&#123;3&#125;"</span><span class="token punctuation">,</span>hitInfo<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>name<span class="token punctuation">,</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>point<span class="token punctuation">.</span>y<span class="token punctuation">,</span>point<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Debug显示鼠标点击的坐标</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//在Unity的脚本C#代码文件中，Awake()是在脚本对象实例化时被调用的，也就是在这个类被创建的时候就进行操作</span><span class="token keyword">if</span><span class="token punctuation">(</span>Instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将上面两个主要的函数放进Update里</span><span class="token function">SetCursorTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MouseControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//class MouseManager</span><span class="token comment">//PlayerController.cs</span><span class="token comment">//把这个文件拖入到你要控制的人物中</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token comment">//for Component.GetComponent&lt;></span><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>AI</span><span class="token punctuation">;</span><span class="token comment">//for CLASS NavMeshAgent;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NavMeshAgent</span> agent<span class="token punctuation">;</span><span class="token comment">//导航控制</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//GetComponent为获取组件</span>        <span class="token comment">//我们在人物添加过一个NavMeshAgent的Component，这里获取的就是它</span>        agent <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NavMeshAgent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveToTarget</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从事件中获得的坐标点赋值给人物移动的目标点</span>agent<span class="token punctuation">.</span>destination <span class="token operator">=</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将函数方法注册到事件中</span>MouseManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>OnMouseClicked<span class="token operator">+=</span>MoveToTarget<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    到此，人物移动的核心部分就实现了，快去实验一下你的小人能不能移动吧！</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity笔记1--熟悉Unity界面以及构建场景</title>
      <link href="2021/06/01/UnityNotes/Unity%E7%AC%94%E8%AE%B01-%E7%86%9F%E6%82%89Unity%E7%95%8C%E9%9D%A2%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA%E5%9C%BA%E6%99%AF/"/>
      <url>2021/06/01/UnityNotes/Unity%E7%AC%94%E8%AE%B01-%E7%86%9F%E6%82%89Unity%E7%95%8C%E9%9D%A2%E4%BB%A5%E5%8F%8A%E6%9E%84%E5%BB%BA%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="熟悉Unity界面"><a href="#熟悉Unity界面" class="headerlink" title="熟悉Unity界面"></a>熟悉Unity界面</h1><p>​    首先在开始之前说一下我所使用的Unity版本，我目前所安装的Unity是2020.3版本，具体版本号如下图所示：</p><p><img src="https://p6-tt.byteimg.com/origin/pgc-image/39050d7c97954612bc110e85d4b0d84e.jpg" alt="1.jpg"></p><p>​    同时这个版本也是稳定版本（LTS）</p><p>​    安装完Unity，我们就要开始创建项目，这里我们直接创建一个普通3D项目，项目名为：3DRPG ，进去之后我们按自己喜好调整一下界面布局，具体每个界面的作用这里作简单的介绍，随着我们不断推进项目我们也可以比较快地熟悉各个窗口的作用。</p><p><img src="https://p5-tt.byteimg.com/origin/pgc-image/aa00a709e4fe479aa99a5b3040a5a298.jpg" alt="2.jpg"></p><p>​    👆我们来看一下上面的图，这个界面是我在进行了几个章节之后截的图，一般我们都有几个主要的窗口界面：</p><ul><li><p><strong>Scene</strong>  这个是我们Unity的可视化场景管理窗口，简单来说就是我们可以直接将我们的人物、小物件等东西在Scene窗口上进行操作，这可以极大的方便我们进行场景的布置工作。</p></li><li><p><strong>Hierarchy</strong> 也就是上图靠中间上边的视图，在这个视图中我们可以看到在Scene视图中摆放了哪些物件对象，包括你的小人，花草树木甚至你的Camera(摄像机🎥)和光照对象都会在Hierarchy视图上显示出来。</p></li><li><p><strong>Project</strong> 这个视图里我们可以管理当前项目的文档文件，比如C#代码文件或其它配置文件等都可以在这里直接访问。</p></li><li><p><strong>Inspector</strong> 在这个视图里我们可以查看并修改当前选中对象的属性值，例如我可以在Scene视图或Hierarchy视图选中我的小人，然后修改它的高度、位置等等许多属性。</p></li><li><p><strong>Console</strong> 还有一个视图就是我们的输出控制台啦，在这个控制台里我们可以查看代码错误或者代码输出等信息，在往后我们的C#代码文件中可以利用Debug来输出特定的信息👉👉👉<code>Debug.LogFormat(&quot;调试信息&#123;0&#125;&quot;,xxxx);</code></p><h1 id="安装URP渲染管线"><a href="#安装URP渲染管线" class="headerlink" title="安装URP渲染管线"></a>安装URP渲染管线</h1><p>​    熟悉完界面后，我们就可以开始安装<strong>URP(Universal Render Pipeline)渲染管线</strong>了，首先我们在上边的菜单栏找到Window–Package Manager </p><img src="https://p6-tt.byteimg.com/origin/pgc-image/63fdcf0caf734225823ae387e05ea777.jpg" alt="3.jpg" style="zoom: 67%;" /><p>​    在 Package Manager 中我们可以管理当前项目使用的Unity插件，以后也会经常用到，之后在Package Manager 窗口中左上角我们选择 Pcakages 为<strong>Unity Registry</strong>，随后在右上角搜索<em>Universal RP</em>找到我们要的URP渲染管线并点击安装</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/0c5d7ad152214e88b346851f86c86726.jpg" alt="4.jpg" style="zoom:67%;" /><p>​    我这里安装的URP版本号为 10.4.0 ，该版本已经在Unity 2020.3 中得到了认证。</p><p>​    安装完后我们就要开始配置工作了，首先我们在Project视图点那个+号，然后找到 Rendering -&gt; Universal Render Pipeline -&gt; Pipeline Asset (Forward Renderer) ，如下图👇</p><img src="https://p9-tt.byteimg.com/origin/pgc-image/d659c489af584a5ca3c337957af35a19.jpg" alt="5.jpg" style="zoom:67%;" /><p>​    点击之后我们看到Unity为我们创建了两个文件（下图的第二第三个），当然为了以后更好的管理各种杂七杂八的文件，我们要养成分类的好习惯，所以我们弄个文件夹把它们放在一起，这里我文件夹起名 Pipeline Setting</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/fd12dcde3ace40bf9a60e5db6307675a.jpg" alt="6.jpg" style="zoom: 67%;" /><p>​    下一步我们打开菜单栏中的 Edit—ProjectSettings…</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/35de350f60d04bf7a21461765e3c9f11.jpg" alt="7.jpg" style="zoom: 60%;" /><p>​    在新打开的窗口中我们可以对我们当前的项目进行一些设置操作，这里我们要设置默认的渲染管线为刚刚创建的URP渲染管线，我们分别在左侧栏中选择 Graphics 和 Quality ，再按照下图标蓝色框位置选择我们的URP渲染管线</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/5dac041ae0e14100a36c7ed5e7fa1991.jpg" alt="8.jpg" style="zoom:70%;" /><center>Graphics界面设置URP</center><img src="https://p6-tt.byteimg.com/origin/pgc-image/78eb8e07811a40a08c3f1e084e204cbc.jpg" alt="9.jpg" style="zoom:70%;" /></li></ul><center>Quality界面设置URP</center><p>​    至此，我们的URP渲染管线安装配置就暂时到这了，接下来我们便可以开始导入素材测试渲染效果了。</p><h1 id="导入素材并构建场景"><a href="#导入素材并构建场景" class="headerlink" title="导入素材并构建场景"></a>导入素材并构建场景</h1><h2 id="使用Unity素材商店导入素材"><a href="#使用Unity素材商店导入素材" class="headerlink" title="使用Unity素材商店导入素材"></a>使用Unity素材商店导入素材</h2><p>​    我们可以通过Unity自带的官方商店里面寻找我们喜欢的素材，我们可以点击这个<a href="https://assetstore.unity.com/">链接</a>进入素材商店，也可以在Unity内的 Window—Asset Store 内打开</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/150853385a5e42e282a36d8e1e651371.jpg" alt="10.jpg" style="zoom:60%;" /><p>​    值得注意的是，从Unity2020版开始取消了内置商店的窗口，如果你是2020版或之后的版本的话，打开Asset Store会得到一个无法访问的界面，我们需要再点击 Search Online 按钮按钮来打开网页版商店</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/da99be76548c4ff18c4954eb06ad1d62.jpg" alt="11.jpg" style="zoom:65%;" /><p>​    </p><p>​    我们目前可以先找两个免费素材，如下图所示，一个是场景素材，一个是人物素材，可以供我们前期暂时学习使用了，这里我们点击蓝色的按钮并根据操作添加到你的Unity账户里，就可以在Unity里面下载下来了</p><p><img src="https://p5-tt.byteimg.com/origin/pgc-image/63fc0f40f92a4af181788740c7f975bc.jpg" alt="12.jpg"></p><p>​    在挑选素材时要注意一点就是要看好素材是否支持我们所选择的渲染管线，一般在素材商店界面都会有说明</p><p>​    素材添加到账户之后，我们打开 Package Manager，并在左上角的 Packages 选择为 My Assets，就可以看到在Unity商店添加的素材了，选中素材点击下载并Import就可以添加到项目中啦</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/20d6062a1db34a62a9182d0aa5943889.jpg" alt="13.jpg" style="zoom:70%;" /><p>​    将我们小人拖到Scene视图中，可能会出现小人一身粉色还没渲染外观出来，这时我们就要将素材升级到我们的渲染管线，具体操作是 Edit -&gt; Render Pipeline -&gt; Universal Render Pipeline -&gt; 此时我们可以看到有出来两个选项，第☝个选项是将我们项目里的所以素材都升级为URP；第✌个选项是将当前选中的材质升级为URP，这里我们可以选择第一个。点击升级URP后小人就可以正常显示了</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/29036628920f45c09b47e29ad9a2eaf0.jpg" alt="14.jpg" style="zoom:80%;" /><p>​    </p><h2 id="构建场景"><a href="#构建场景" class="headerlink" title="构建场景"></a>构建场景</h2><p>​    搭建场景部分我们可以先从调整天空样式开始，因为默认的天空样式灰溜溜的并不好看😐，那么我们就开始吧！</p><h3 id="天空"><a href="#天空" class="headerlink" title="天空"></a>天空</h3><p>​    首先调整天空可以先去下个天空盒子（Skybox）素材，这里我下载的是下图所示的Skybox：<a href="https://assetstore.unity.com/packages/vfx/shaders/free-skybox-extended-shader-107400">FREE Skybox Extended Shader</a></p><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/e72308b7966b47368c2cc814dcf5dca4.jpg" alt="15.jpg"></p><p>​    添加好资源后回到Unity内下载并 Import（注意将文件夹分好类），我们可以在素材目录下看到有Demo样例</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/0b812466543d478b9211e068a949438f.jpg" alt="16.jpg" style="zoom:80%;" /><p>​    那么如何来使用这个Skybox呢？</p><p>​    首先我们要在菜单栏打开 Window -&gt; Rendering -&gt; Lighting 窗口</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/448dfc0867b14cea8a884b1da2cd1cc8.jpg" alt="17.jpg" style="zoom:70%;" /><p>​    然后我们在新打开的 Lighting 窗口点击 Environment 选项卡，在Skybox Material 那一栏中就可以选择自己喜欢的Skybox素材了</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/e489644b78364fab8c4b97e49a5f69d3.jpg" alt="18.jpg" style="zoom:80%;" /><p>​    另外，我们在Scene选项卡中可以先点击一下New Lighting Settings按钮来新建一个光照配置文件并将它分类摆好，这个配置文件我们后面可以用来配置场景环境光</p><img src="https://p3-tt.byteimg.com/origin/pgc-image/07234fec87af42b8a7db9fbd227478b5.jpg" alt="19.jpg" style="zoom:80%;" /><p><img src="https://p9-tt.byteimg.com/origin/pgc-image/042dbd7860774728a5a7a00969f383e9.jpg" alt="20.jpg"></p><center>将这个配置文件分类摆在Pipeline Setting文件夹下</center><p>​    </p><p>​    现在我们就把刚刚下载下来的Skybox适用到场景中了，如果想要调整参数的话，我们可以到素材目录下找到刚刚选择的Skybox素材对象，并在 Inspector 视图窗口中调整这些参数</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/e3033b1ee0d947b4b315b4a1c17afbf2.jpg" alt="21.jpg" style="zoom:80%;" /><center>我们可以看到右边的Inspector视图内可以修改Skybox的属性</center><p>​    </p><p>​    至此，天空场景就这样搭建好了，接下来我们来搭建地面的元素吧！</p><h3 id="地面"><a href="#地面" class="headerlink" title="地面"></a>地面</h3><p>​    如果想在Unity中自己来绘制场景地面的话，我们可以利用两个插件 — <strong>Poly Brush</strong> 和 <strong>ProBuilder</strong> 来自己建模。</p><h4 id="Poly-Brush"><a href="#Poly-Brush" class="headerlink" title="Poly Brush"></a>Poly Brush</h4><p>​    我们还是打开 Package Manager，左上角的 Packages 选择为 <strong>Unity Registry</strong> 然后我们在搜索框查找 <strong>Poly Brush</strong> 然后下载下来安装。安装好 Poly Brush 不要着急关闭 Package Manager 窗口，我们还要点开 Samples 导入属于我们URP的 Shader Examples ，即下图中的<strong>第二个选项</strong></p><img src="https://p6-tt.byteimg.com/origin/pgc-image/0a1867154c2045d2ada819d40e319961.jpg" alt="22.jpg" style="zoom:80%;" /><center>如果我们使用URP的话选择的是第二个选项</center><p>​    当然如果你是使用普通的Unity项目而没有使用URP渲染管线的话就选择<strong>第一个选项</strong></p><p>​    安装好后我们的 Project 视图里就会多出了一个 Polybrush 插件的文件夹，由于之后我们还要安装一些插件，所以我们可以新建一个文件夹命名为 <strong>Addons</strong> 来专门存放这些插件的文件（要养成分类的好习惯）</p><p>​    弄好这些东西后，我们回到Unity主界面，我们通过上方菜单栏的 <strong>Tools-&gt;Polybrush-&gt;Polybrush Window</strong> 来打开Polybrush窗口</p><img src="https://p26-tt.byteimg.com/origin/pgc-image/c58b3d98cab54de79fac9e3d9a0eaac6.jpg" alt="23.jpg" style="zoom:80%;" /><center>打开 Polybrush 窗口</center><p>​    打开 Polybrush 窗口后我们了解一下这些按钮的功能</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/d8e4a421ebcb42719f15c86813a7e131.jpg" alt="24.jpg" style="zoom:80%;" /><ul><li><p>第一个按钮是调整地面的高度，选中该按钮然后在地面上拖拽鼠标即可将地面升高，按住 Ctrl 并拖拽鼠标便是下降。我们看到下面面板中还有一些参数供我们调整：</p><p><strong>OuterRadius</strong> 可以选择外角大小</p><p><strong>InnerRadius</strong> 则修改内角大小。按住 shift 键滑动鼠标滚轮可以调整内圈大小，按住 Ctrl 键滑动滚轮调整外圈。</p><p><strong>Strength</strong>可以修改强度</p><p><strong>Direction</strong> 可以选择地形改变的方向，默认为normal，下拉可以进行修改。</p><p><strong>BrushMirroring</strong>可以复制笔刷，沿着选中的的x,y,z镜像同时修改地形</p></li><li><p>第二个按钮是柔化按钮，羽化功能可以将地图较为僵硬的顶点进行柔化</p></li><li><p>第三个按钮是颜色刷，可以使我们很方便地将我们的地板涂上我们想要的颜色</p></li><li><p>第四个按钮是将预设的物体涂到地板上，我们可以在面板中勾选要刷的物体以及密度（即概率）</p></li><li><p>第五个是贴图刷，和预制体刷子的功能一样，它是将一些texture刷到场景中，可以把图片素材可以引用在场景中选中的物体上。</p></li></ul><h4 id="ProBuilder"><a href="#ProBuilder" class="headerlink" title="ProBuilder"></a>ProBuilder</h4><p>​    上面的Poly Brush插件是用来绘制修改地面的，那么我们如何来创建自己的地面呢？这下就要用到我们的另一个插件 — <strong>ProBuilder</strong> 了</p><p>​    同样地，我们通过 Package Manager 来安装此插件，下载下来后同样把插件文件夹分好类，然后打开窗口</p><img src="https://p5-tt.byteimg.com/origin/pgc-image/9e16aa320d6e461a9fc6a22752440486.jpg" alt="25.jpg" style="zoom:80%;" /><center>ProBuilder界面</center><p>​    我们可以按住 <strong>左Shift</strong> 并鼠标指到图形按钮来查看这些按钮的功能，我们看到有些按钮右上角有个小齿轮，这代表着我们可以进一步来设置，只用按住 Alt 并点击他们就可以进一步地来设置，拿第一个按钮（功能是<strong>创建几何体</strong>）来说</p><img src="https://p6-tt.byteimg.com/origin/pgc-image/bacf417b80d14ac18301bb95e8fb9034.jpg" alt="26.jpg" style="zoom:80%;" /><p>​    按住 Alt 并点击第一个按钮我们打开如上图所示的窗口，这里我们可以选择要创建的物体是什么，这里我选择的是 Plane （平面），下面可以设置该几何体的的轴的朝向、宽度、长度以及顶点数（如上图顶点数是30x30）</p><p>​    具体的功能我们可以自己去尝试，配合 Polybrush 我们就可以轻松地来创建我们的场景并绘制他们啦！</p><p>​    要注意的是我们如果要使用 <em>Low Poly</em> 风格的场景的话，我们要设置地图网格呈三角形，这里可以通过上面 ProBuilder 图中的 <strong>第二排第五个</strong> 按钮来实现，选中我们的地面几何体，然后点击该按钮便可以设置成功。</p><p>​    </p><p>​    到这里，我们就可以自己去尝试一下构建属于自己的场景了。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>​    在这一章节中，我们开始第一次接触Unity并尝试了解它，了解如何导入素材并构建、绘制我们的场景，我们只有多去尝试使用这些工具，才可以变得熟悉。所以，我们先可以发挥自己创意来构建一个场景，以便后面来操作吧。</p>]]></content>
      
      
      <categories>
          
          <category> Unity学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="2021/05/31/%E8%AE%B0%E4%BA%8B/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
      <url>2021/05/31/%E8%AE%B0%E4%BA%8B/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
      
        <content type="html"><![CDATA[<h1 id="关于这个博客的一些事🍥"><a href="#关于这个博客的一些事🍥" class="headerlink" title="关于这个博客的一些事🍥"></a>关于这个博客的一些事🍥</h1><p>​    当初创建这个博客的目的是想着记录自己在大学生活中遇到的一些问题或者学习笔记等，平时也看了不少别人的个人博客，于是心血来潮就想自己也创一个属于自己的个人博客。</p><p>​    刚开始我便去查找有什么博客平台，因为我喜欢自己自定义界面的方式，便找到了可以利用GitHub来做一个博客方式，即：<a href="https://hexo.io/zh-cn/">hexo</a> 。之后我便跟着教程开始搭建，也发现了一些很好看的主题，我现在用的这个主题是<a href="https://butterfly.js.org/">butterfly</a>（<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev">GitHub地址</a>）。之后研究美化界面又花了好一些时间，不过在弄这些东西的时候我都觉得很满足，看着属于自己的博客慢慢开始搭建起来，一股成就感就上来了，而且在其中也接触到了许多之前没有遇到过的知识。</p><p>​    弄好博客的基本框架后，才是真正的开始，希望有一个博客之后，能够对我自己有更好的帮助，可以更好地去总结知识点，也希望可以分享一些知识给观看博客的你😀。</p><h1 id="关于我的一些事"><a href="#关于我的一些事" class="headerlink" title="关于我的一些事"></a>关于我的一些事</h1><p>​    待更新…….💨</p>]]></content>
      
      
      <categories>
          
          <category> 记事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记事 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
